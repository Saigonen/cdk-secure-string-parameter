"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js
var require_deserializerMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializerMiddleware = void 0;
    var deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed
        };
      } catch (error) {
        Object.defineProperty(error, "$response", {
          value: response
        });
        throw error;
      }
    };
    exports.deserializerMiddleware = deserializerMiddleware;
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js
var require_serializerMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializerMiddleware = void 0;
    var serializerMiddleware = (options, serializer) => (next, context) => async (args) => {
      const request = await serializer(args.input, options);
      return next({
        ...args,
        request
      });
    };
    exports.serializerMiddleware = serializerMiddleware;
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js
var require_serdePlugin = __commonJS({
  "node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSerdePlugin = exports.serializerMiddlewareOption = exports.deserializerMiddlewareOption = void 0;
    var deserializerMiddleware_1 = require_deserializerMiddleware();
    var serializerMiddleware_1 = require_serializerMiddleware();
    exports.deserializerMiddlewareOption = {
      name: "deserializerMiddleware",
      step: "deserialize",
      tags: ["DESERIALIZER"],
      override: true
    };
    exports.serializerMiddlewareOption = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
    function getSerdePlugin(config, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add((0, deserializerMiddleware_1.deserializerMiddleware)(config, deserializer), exports.deserializerMiddlewareOption);
          commandStack.add((0, serializerMiddleware_1.serializerMiddleware)(config, serializer), exports.serializerMiddlewareOption);
        }
      };
    }
    exports.getSerdePlugin = getSerdePlugin;
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js
var require_dist_cjs = __commonJS({
  "node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_deserializerMiddleware(), exports);
    tslib_1.__exportStar(require_serdePlugin(), exports);
    tslib_1.__exportStar(require_serializerMiddleware(), exports);
  }
});

// node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js
var require_MiddlewareStack = __commonJS({
  "node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.constructStack = void 0;
    var constructStack = () => {
      let absoluteEntries = [];
      let relativeEntries = [];
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]);
      const removeByName = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.name && entry.name === toRemove) {
            isRemoved = true;
            entriesNameSet.delete(toRemove);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const removeByReference = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            if (entry.name)
              entriesNameSet.delete(entry.name);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const cloneTo = (toStack) => {
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        return toStack;
      };
      const expandRelativeMiddlewareList = (from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      };
      const getMiddlewareList = () => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || "anonymous"} middleware ${entry.relation} ${entry.toMiddleware}`);
            }
            if (entry.relation === "after") {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === "before") {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expendedMiddlewareList) => {
          wholeList.push(...expendedMiddlewareList);
          return wholeList;
        }, []);
        return mainChain.map((entry) => entry.middleware);
      };
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override } = options;
          const entry = {
            step: "initialize",
            priority: "normal",
            middleware,
            ...options
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = absoluteEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = absoluteEntries[toOverrideIndex];
              if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
                throw new Error(`"${name}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);
              }
              absoluteEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override } = options;
          const entry = {
            middleware,
            ...options
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = relativeEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = relativeEntries[toOverrideIndex];
              if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                throw new Error(`"${name}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by same-name middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
              }
              relativeEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo((0, exports.constructStack)()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === "string")
            return removeByName(toRemove);
          else
            return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = (entry) => {
            const { tags, name } = entry;
            if (tags && tags.includes(toRemove)) {
              if (name)
                entriesNameSet.delete(name);
              isRemoved = true;
              return false;
            }
            return true;
          };
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          const cloned = cloneTo((0, exports.constructStack)());
          cloned.use(from);
          return cloned;
        },
        applyToStack: cloneTo,
        resolve: (handler2, context) => {
          for (const middleware of getMiddlewareList().reverse()) {
            handler2 = middleware(handler2, context);
          }
          return handler2;
        }
      };
      return stack;
    };
    exports.constructStack = constructStack;
    var stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1
    };
    var priorityWeights = {
      high: 3,
      normal: 2,
      low: 1
    };
  }
});

// node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js
var require_dist_cjs2 = __commonJS({
  "node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_MiddlewareStack(), exports);
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/client.js
var require_client = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Client = void 0;
    var middleware_stack_1 = require_dist_cjs2();
    var Client = class {
      constructor(config) {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
        this.config = config;
      }
      send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const handler2 = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) {
          handler2(command).then((result) => callback(null, result.output), (err) => callback(err)).catch(() => {
          });
        } else {
          return handler2(command).then((result) => result.output);
        }
      }
      destroy() {
        if (this.config.requestHandler.destroy)
          this.config.requestHandler.destroy();
      }
    };
    exports.Client = Client;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/command.js
var require_command = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/command.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Command = void 0;
    var middleware_stack_1 = require_dist_cjs2();
    var Command = class {
      constructor() {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
      }
    };
    exports.Command = Command;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js
var require_constants = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SENSITIVE_STRING = void 0;
    exports.SENSITIVE_STRING = "***SensitiveInformation***";
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js
var require_parse_utils = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.strictParseByte = exports.strictParseShort = exports.strictParseInt32 = exports.strictParseInt = exports.strictParseLong = exports.limitedParseFloat32 = exports.limitedParseFloat = exports.handleFloat = exports.limitedParseDouble = exports.strictParseFloat32 = exports.strictParseFloat = exports.strictParseDouble = exports.expectUnion = exports.expectString = exports.expectObject = exports.expectNonNull = exports.expectByte = exports.expectShort = exports.expectInt32 = exports.expectInt = exports.expectLong = exports.expectFloat32 = exports.expectNumber = exports.expectBoolean = exports.parseBoolean = void 0;
    var parseBoolean = (value) => {
      switch (value) {
        case "true":
          return true;
        case "false":
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    };
    exports.parseBoolean = parseBoolean;
    var expectBoolean = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "boolean") {
        return value;
      }
      throw new TypeError(`Expected boolean, got ${typeof value}`);
    };
    exports.expectBoolean = expectBoolean;
    var expectNumber = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "number") {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}`);
    };
    exports.expectNumber = expectNumber;
    var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    var expectFloat32 = (value) => {
      const expected = (0, exports.expectNumber)(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    };
    exports.expectFloat32 = expectFloat32;
    var expectLong = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}`);
    };
    exports.expectLong = expectLong;
    exports.expectInt = exports.expectLong;
    var expectInt32 = (value) => expectSizedInt(value, 32);
    exports.expectInt32 = expectInt32;
    var expectShort = (value) => expectSizedInt(value, 16);
    exports.expectShort = expectShort;
    var expectByte = (value) => expectSizedInt(value, 8);
    exports.expectByte = expectByte;
    var expectSizedInt = (value, size) => {
      const expected = (0, exports.expectLong)(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    };
    var castInt = (value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    };
    var expectNonNull = (value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
      }
      return value;
    };
    exports.expectNonNull = expectNonNull;
    var expectObject = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "object" && !Array.isArray(value)) {
        return value;
      }
      throw new TypeError(`Expected object, got ${typeof value}`);
    };
    exports.expectObject = expectObject;
    var expectString = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        return value;
      }
      throw new TypeError(`Expected string, got ${typeof value}`);
    };
    exports.expectString = expectString;
    var expectUnion = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = (0, exports.expectObject)(value);
      const setKeys = Object.entries(asObject).filter(([_, v]) => v !== null && v !== void 0).map(([k, _]) => k);
      if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member`);
      }
      if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
      }
      return asObject;
    };
    exports.expectUnion = expectUnion;
    var strictParseDouble = (value) => {
      if (typeof value == "string") {
        return (0, exports.expectNumber)(parseNumber(value));
      }
      return (0, exports.expectNumber)(value);
    };
    exports.strictParseDouble = strictParseDouble;
    exports.strictParseFloat = exports.strictParseDouble;
    var strictParseFloat32 = (value) => {
      if (typeof value == "string") {
        return (0, exports.expectFloat32)(parseNumber(value));
      }
      return (0, exports.expectFloat32)(value);
    };
    exports.strictParseFloat32 = strictParseFloat32;
    var NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    var parseNumber = (value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    };
    var limitedParseDouble = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports.expectNumber)(value);
    };
    exports.limitedParseDouble = limitedParseDouble;
    exports.handleFloat = exports.limitedParseDouble;
    exports.limitedParseFloat = exports.limitedParseDouble;
    var limitedParseFloat32 = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports.expectFloat32)(value);
    };
    exports.limitedParseFloat32 = limitedParseFloat32;
    var parseFloatString = (value) => {
      switch (value) {
        case "NaN":
          return NaN;
        case "Infinity":
          return Infinity;
        case "-Infinity":
          return -Infinity;
        default:
          throw new Error(`Unable to parse float value: ${value}`);
      }
    };
    var strictParseLong = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectLong)(parseNumber(value));
      }
      return (0, exports.expectLong)(value);
    };
    exports.strictParseLong = strictParseLong;
    exports.strictParseInt = exports.strictParseLong;
    var strictParseInt32 = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectInt32)(parseNumber(value));
      }
      return (0, exports.expectInt32)(value);
    };
    exports.strictParseInt32 = strictParseInt32;
    var strictParseShort = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectShort)(parseNumber(value));
      }
      return (0, exports.expectShort)(value);
    };
    exports.strictParseShort = strictParseShort;
    var strictParseByte = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectByte)(parseNumber(value));
      }
      return (0, exports.expectByte)(value);
    };
    exports.strictParseByte = strictParseByte;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js
var require_date_utils = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseEpochTimestamp = exports.parseRfc7231DateTime = exports.parseRfc3339DateTime = exports.dateToUtcString = void 0;
    var parse_utils_1 = require_parse_utils();
    var DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    var MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function dateToUtcString(date) {
      const year = date.getUTCFullYear();
      const month = date.getUTCMonth();
      const dayOfWeek = date.getUTCDay();
      const dayOfMonthInt = date.getUTCDate();
      const hoursInt = date.getUTCHours();
      const minutesInt = date.getUTCMinutes();
      const secondsInt = date.getUTCSeconds();
      const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
      const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
      const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
      const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
      return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
    }
    exports.dateToUtcString = dateToUtcString;
    var RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
    var parseRfc3339DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      const year = (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    };
    exports.parseRfc3339DateTime = parseRfc3339DateTime;
    var IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
    var parseRfc7231DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
          hours,
          minutes,
          seconds,
          fractionalMilliseconds
        }));
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      throw new TypeError("Invalid RFC-7231 date-time value");
    };
    exports.parseRfc7231DateTime = parseRfc7231DateTime;
    var parseEpochTimestamp = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      let valueAsDouble;
      if (typeof value === "number") {
        valueAsDouble = value;
      } else if (typeof value === "string") {
        valueAsDouble = (0, parse_utils_1.strictParseDouble)(value);
      } else {
        throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
      }
      if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
      }
      return new Date(Math.round(valueAsDouble * 1e3));
    };
    exports.parseEpochTimestamp = parseEpochTimestamp;
    var buildDate = (year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
    };
    var parseTwoDigitYear = (value) => {
      const thisYear = new Date().getUTCFullYear();
      const valueInThisCentury = Math.floor(thisYear / 100) * 100 + (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    };
    var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    var adjustRfc850Year = (input) => {
      if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
      }
      return input;
    };
    var parseMonthByShortName = (value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    };
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var validateDayOfMonth = (year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
      }
    };
    var isLeapYear = (year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    var parseDateValue = (value, type, lower, upper) => {
      const dateVal = (0, parse_utils_1.strictParseByte)(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
      }
      return dateVal;
    };
    var parseMilliseconds = (value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return (0, parse_utils_1.strictParseFloat32)("0." + value) * 1e3;
    };
    var stripLeadingZeroes = (value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    };
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js
var require_defaults_mode = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadConfigsForDefaultMode = void 0;
    var loadConfigsForDefaultMode = (mode) => {
      switch (mode) {
        case "standard":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "in-region":
          return {
            retryMode: "standard",
            connectionTimeout: 1100
          };
        case "cross-region":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "mobile":
          return {
            retryMode: "standard",
            connectionTimeout: 3e4
          };
        default:
          return {};
      }
    };
    exports.loadConfigsForDefaultMode = loadConfigsForDefaultMode;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js
var require_emitWarningIfUnsupportedVersion = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.emitWarningIfUnsupportedVersion = void 0;
    var warningEmitted = false;
    var emitWarningIfUnsupportedVersion = (version) => {
      if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf("."))) < 14) {
        warningEmitted = true;
        process.emitWarning(`The AWS SDK for JavaScript (v3) will
no longer support Node.js ${version} on November 1, 2022.

To continue receiving updates to AWS services, bug fixes, and security
updates please upgrade to Node.js 14.x or later.

For details, please refer our blog post: https://a.co/48dbdYz`, `NodeDeprecationWarning`);
      }
    };
    exports.emitWarningIfUnsupportedVersion = emitWarningIfUnsupportedVersion;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js
var require_exceptions = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateServiceException = exports.ServiceException = void 0;
    var ServiceException = class extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
    };
    exports.ServiceException = ServiceException;
    var decorateServiceException = (exception, additions = {}) => {
      Object.entries(additions).filter(([, v]) => v !== void 0).forEach(([k, v]) => {
        if (exception[k] == void 0 || exception[k] === "") {
          exception[k] = v;
        }
      });
      const message = exception.message || exception.Message || "UnknownError";
      exception.message = message;
      delete exception.Message;
      return exception;
    };
    exports.decorateServiceException = decorateServiceException;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js
var require_extended_encode_uri_component = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extendedEncodeURIComponent = void 0;
    function extendedEncodeURIComponent(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    exports.extendedEncodeURIComponent = extendedEncodeURIComponent;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js
var require_get_array_if_single_item = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getArrayIfSingleItem = void 0;
    var getArrayIfSingleItem = (mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];
    exports.getArrayIfSingleItem = getArrayIfSingleItem;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js
var require_get_value_from_text_node = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getValueFromTextNode = void 0;
    var getValueFromTextNode = (obj) => {
      const textNodeName = "#text";
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === "object" && obj[key] !== null) {
          obj[key] = (0, exports.getValueFromTextNode)(obj[key]);
        }
      }
      return obj;
    };
    exports.getValueFromTextNode = getValueFromTextNode;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js
var require_lazy_json = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LazyJsonString = exports.StringWrapper = void 0;
    var StringWrapper = function() {
      const Class = Object.getPrototypeOf(this).constructor;
      const Constructor = Function.bind.apply(String, [null, ...arguments]);
      const instance = new Constructor();
      Object.setPrototypeOf(instance, Class.prototype);
      return instance;
    };
    exports.StringWrapper = StringWrapper;
    exports.StringWrapper.prototype = Object.create(String.prototype, {
      constructor: {
        value: exports.StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    Object.setPrototypeOf(exports.StringWrapper, String);
    var LazyJsonString = class extends exports.StringWrapper {
      deserializeJSON() {
        return JSON.parse(super.toString());
      }
      toJSON() {
        return super.toString();
      }
      static fromObject(object) {
        if (object instanceof LazyJsonString) {
          return object;
        } else if (object instanceof String || typeof object === "string") {
          return new LazyJsonString(object);
        }
        return new LazyJsonString(JSON.stringify(object));
      }
    };
    exports.LazyJsonString = LazyJsonString;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js
var require_ser_utils = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializeFloat = void 0;
    var serializeFloat = (value) => {
      if (value !== value) {
        return "NaN";
      }
      switch (value) {
        case Infinity:
          return "Infinity";
        case -Infinity:
          return "-Infinity";
        default:
          return value;
      }
    };
    exports.serializeFloat = serializeFloat;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js
var require_split_every = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.splitEvery = void 0;
    function splitEvery(value, delimiter, numDelimiters) {
      if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
      }
      const segments = value.split(delimiter);
      if (numDelimiters === 1) {
        return segments;
      }
      const compoundSegments = [];
      let currentSegment = "";
      for (let i = 0; i < segments.length; i++) {
        if (currentSegment === "") {
          currentSegment = segments[i];
        } else {
          currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
          compoundSegments.push(currentSegment);
          currentSegment = "";
        }
      }
      if (currentSegment !== "") {
        compoundSegments.push(currentSegment);
      }
      return compoundSegments;
    }
    exports.splitEvery = splitEvery;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/index.js
var require_dist_cjs3 = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_client(), exports);
    tslib_1.__exportStar(require_command(), exports);
    tslib_1.__exportStar(require_constants(), exports);
    tslib_1.__exportStar(require_date_utils(), exports);
    tslib_1.__exportStar(require_defaults_mode(), exports);
    tslib_1.__exportStar(require_emitWarningIfUnsupportedVersion(), exports);
    tslib_1.__exportStar(require_exceptions(), exports);
    tslib_1.__exportStar(require_extended_encode_uri_component(), exports);
    tslib_1.__exportStar(require_get_array_if_single_item(), exports);
    tslib_1.__exportStar(require_get_value_from_text_node(), exports);
    tslib_1.__exportStar(require_lazy_json(), exports);
    tslib_1.__exportStar(require_parse_utils(), exports);
    tslib_1.__exportStar(require_ser_utils(), exports);
    tslib_1.__exportStar(require_split_every(), exports);
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/models/KMSServiceException.js
var require_KMSServiceException = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/models/KMSServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KMSServiceException = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var KMSServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, KMSServiceException.prototype);
      }
    };
    exports.KMSServiceException = KMSServiceException;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/models/models_0.js
var require_models_0 = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KeyMetadata = exports.SigningAlgorithmSpec = exports.MultiRegionConfiguration = exports.MultiRegionKey = exports.MultiRegionKeyType = exports.MacAlgorithmSpec = exports.KeyState = exports.KeyManagerType = exports.ExpirationModelType = exports.EncryptionAlgorithmSpec = exports.CreateKeyRequest = exports.Tag = exports.OriginType = exports.KeyUsageType = exports.KeySpec = exports.CustomerMasterKeySpec = exports.InvalidGrantTokenException = exports.DisabledException = exports.CreateGrantResponse = exports.CreateGrantRequest = exports.GrantOperation = exports.GrantConstraints = exports.IncorrectTrustAnchorException = exports.CustomKeyStoreNameInUseException = exports.CreateCustomKeyStoreResponse = exports.CreateCustomKeyStoreRequest = exports.LimitExceededException = exports.InvalidAliasNameException = exports.CreateAliasRequest = exports.ConnectionStateType = exports.ConnectionErrorCodeType = exports.CustomKeyStoreNotFoundException = exports.CustomKeyStoreInvalidStateException = exports.ConnectCustomKeyStoreResponse = exports.ConnectCustomKeyStoreRequest = exports.CloudHsmClusterNotRelatedException = exports.CloudHsmClusterNotFoundException = exports.CloudHsmClusterNotActiveException = exports.CloudHsmClusterInvalidConfigurationException = exports.CloudHsmClusterInUseException = exports.NotFoundException = exports.KMSInvalidStateException = exports.KMSInternalException = exports.InvalidArnException = exports.DependencyTimeoutException = exports.CancelKeyDeletionResponse = exports.CancelKeyDeletionRequest = exports.AlreadyExistsException = exports.AliasListEntry = exports.AlgorithmSpec = void 0;
    exports.GetParametersForImportRequest = exports.WrappingKeySpec = exports.GetKeyRotationStatusResponse = exports.GetKeyRotationStatusRequest = exports.GetKeyPolicyResponse = exports.GetKeyPolicyRequest = exports.GenerateRandomResponse = exports.GenerateRandomRequest = exports.GenerateMacResponse = exports.GenerateMacRequest = exports.GenerateDataKeyWithoutPlaintextResponse = exports.GenerateDataKeyWithoutPlaintextRequest = exports.GenerateDataKeyPairWithoutPlaintextResponse = exports.GenerateDataKeyPairWithoutPlaintextRequest = exports.GenerateDataKeyPairResponse = exports.GenerateDataKeyPairRequest = exports.GenerateDataKeyResponse = exports.GenerateDataKeyRequest = exports.ExpiredImportTokenException = exports.EncryptResponse = exports.EncryptRequest = exports.EnableKeyRotationRequest = exports.EnableKeyRequest = exports.DisconnectCustomKeyStoreResponse = exports.DisconnectCustomKeyStoreRequest = exports.DisableKeyRotationRequest = exports.DisableKeyRequest = exports.DescribeKeyResponse = exports.DescribeKeyRequest = exports.InvalidMarkerException = exports.DescribeCustomKeyStoresResponse = exports.DescribeCustomKeyStoresRequest = exports.DeleteImportedKeyMaterialRequest = exports.DeleteCustomKeyStoreResponse = exports.DeleteCustomKeyStoreRequest = exports.DeleteAliasRequest = exports.KeyUnavailableException = exports.InvalidKeyUsageException = exports.InvalidCiphertextException = exports.IncorrectKeyException = exports.DecryptResponse = exports.DecryptRequest = exports.DataKeySpec = exports.DataKeyPairSpec = exports.CustomKeyStoresListEntry = exports.CustomKeyStoreHasCMKsException = exports.UnsupportedOperationException = exports.TagException = exports.MalformedPolicyDocumentException = exports.CreateKeyResponse = void 0;
    exports.VerifyMacResponse = exports.VerifyMacRequest = exports.VerifyResponse = exports.VerifyRequest = exports.UpdatePrimaryRegionRequest = exports.UpdateKeyDescriptionRequest = exports.UpdateCustomKeyStoreResponse = exports.UpdateCustomKeyStoreRequest = exports.UpdateAliasRequest = exports.UntagResourceRequest = exports.TagResourceRequest = exports.SignResponse = exports.SignRequest = exports.ScheduleKeyDeletionResponse = exports.ScheduleKeyDeletionRequest = exports.RevokeGrantRequest = exports.RetireGrantRequest = exports.ReplicateKeyResponse = exports.ReplicateKeyRequest = exports.ReEncryptResponse = exports.ReEncryptRequest = exports.PutKeyPolicyRequest = exports.MessageType = exports.ListRetirableGrantsRequest = exports.ListResourceTagsResponse = exports.ListResourceTagsRequest = exports.ListKeysResponse = exports.ListKeysRequest = exports.ListKeyPoliciesResponse = exports.ListKeyPoliciesRequest = exports.ListGrantsResponse = exports.ListGrantsRequest = exports.ListAliasesResponse = exports.ListAliasesRequest = exports.KMSInvalidSignatureException = exports.KMSInvalidMacException = exports.KeyListEntry = exports.InvalidGrantIdException = exports.InvalidImportTokenException = exports.IncorrectKeyMaterialException = exports.ImportKeyMaterialResponse = exports.ImportKeyMaterialRequest = exports.GrantListEntry = exports.GetPublicKeyResponse = exports.GetPublicKeyRequest = exports.GetParametersForImportResponse = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var KMSServiceException_1 = require_KMSServiceException();
    var AlgorithmSpec;
    (function(AlgorithmSpec2) {
      AlgorithmSpec2["RSAES_OAEP_SHA_1"] = "RSAES_OAEP_SHA_1";
      AlgorithmSpec2["RSAES_OAEP_SHA_256"] = "RSAES_OAEP_SHA_256";
      AlgorithmSpec2["RSAES_PKCS1_V1_5"] = "RSAES_PKCS1_V1_5";
    })(AlgorithmSpec = exports.AlgorithmSpec || (exports.AlgorithmSpec = {}));
    var AliasListEntry;
    (function(AliasListEntry2) {
      AliasListEntry2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AliasListEntry = exports.AliasListEntry || (exports.AliasListEntry = {}));
    var AlreadyExistsException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "AlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "AlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AlreadyExistsException.prototype);
      }
    };
    exports.AlreadyExistsException = AlreadyExistsException;
    var CancelKeyDeletionRequest;
    (function(CancelKeyDeletionRequest2) {
      CancelKeyDeletionRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CancelKeyDeletionRequest = exports.CancelKeyDeletionRequest || (exports.CancelKeyDeletionRequest = {}));
    var CancelKeyDeletionResponse;
    (function(CancelKeyDeletionResponse2) {
      CancelKeyDeletionResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CancelKeyDeletionResponse = exports.CancelKeyDeletionResponse || (exports.CancelKeyDeletionResponse = {}));
    var DependencyTimeoutException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "DependencyTimeoutException",
          $fault: "server",
          ...opts
        });
        this.name = "DependencyTimeoutException";
        this.$fault = "server";
        Object.setPrototypeOf(this, DependencyTimeoutException.prototype);
      }
    };
    exports.DependencyTimeoutException = DependencyTimeoutException;
    var InvalidArnException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "InvalidArnException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidArnException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidArnException.prototype);
      }
    };
    exports.InvalidArnException = InvalidArnException;
    var KMSInternalException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "KMSInternalException",
          $fault: "server",
          ...opts
        });
        this.name = "KMSInternalException";
        this.$fault = "server";
        Object.setPrototypeOf(this, KMSInternalException.prototype);
      }
    };
    exports.KMSInternalException = KMSInternalException;
    var KMSInvalidStateException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "KMSInvalidStateException",
          $fault: "client",
          ...opts
        });
        this.name = "KMSInvalidStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, KMSInvalidStateException.prototype);
      }
    };
    exports.KMSInvalidStateException = KMSInvalidStateException;
    var NotFoundException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "NotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
      }
    };
    exports.NotFoundException = NotFoundException;
    var CloudHsmClusterInUseException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "CloudHsmClusterInUseException",
          $fault: "client",
          ...opts
        });
        this.name = "CloudHsmClusterInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CloudHsmClusterInUseException.prototype);
      }
    };
    exports.CloudHsmClusterInUseException = CloudHsmClusterInUseException;
    var CloudHsmClusterInvalidConfigurationException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "CloudHsmClusterInvalidConfigurationException",
          $fault: "client",
          ...opts
        });
        this.name = "CloudHsmClusterInvalidConfigurationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CloudHsmClusterInvalidConfigurationException.prototype);
      }
    };
    exports.CloudHsmClusterInvalidConfigurationException = CloudHsmClusterInvalidConfigurationException;
    var CloudHsmClusterNotActiveException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "CloudHsmClusterNotActiveException",
          $fault: "client",
          ...opts
        });
        this.name = "CloudHsmClusterNotActiveException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CloudHsmClusterNotActiveException.prototype);
      }
    };
    exports.CloudHsmClusterNotActiveException = CloudHsmClusterNotActiveException;
    var CloudHsmClusterNotFoundException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "CloudHsmClusterNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "CloudHsmClusterNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CloudHsmClusterNotFoundException.prototype);
      }
    };
    exports.CloudHsmClusterNotFoundException = CloudHsmClusterNotFoundException;
    var CloudHsmClusterNotRelatedException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "CloudHsmClusterNotRelatedException",
          $fault: "client",
          ...opts
        });
        this.name = "CloudHsmClusterNotRelatedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CloudHsmClusterNotRelatedException.prototype);
      }
    };
    exports.CloudHsmClusterNotRelatedException = CloudHsmClusterNotRelatedException;
    var ConnectCustomKeyStoreRequest;
    (function(ConnectCustomKeyStoreRequest2) {
      ConnectCustomKeyStoreRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ConnectCustomKeyStoreRequest = exports.ConnectCustomKeyStoreRequest || (exports.ConnectCustomKeyStoreRequest = {}));
    var ConnectCustomKeyStoreResponse;
    (function(ConnectCustomKeyStoreResponse2) {
      ConnectCustomKeyStoreResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ConnectCustomKeyStoreResponse = exports.ConnectCustomKeyStoreResponse || (exports.ConnectCustomKeyStoreResponse = {}));
    var CustomKeyStoreInvalidStateException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "CustomKeyStoreInvalidStateException",
          $fault: "client",
          ...opts
        });
        this.name = "CustomKeyStoreInvalidStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomKeyStoreInvalidStateException.prototype);
      }
    };
    exports.CustomKeyStoreInvalidStateException = CustomKeyStoreInvalidStateException;
    var CustomKeyStoreNotFoundException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "CustomKeyStoreNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "CustomKeyStoreNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomKeyStoreNotFoundException.prototype);
      }
    };
    exports.CustomKeyStoreNotFoundException = CustomKeyStoreNotFoundException;
    var ConnectionErrorCodeType;
    (function(ConnectionErrorCodeType2) {
      ConnectionErrorCodeType2["CLUSTER_NOT_FOUND"] = "CLUSTER_NOT_FOUND";
      ConnectionErrorCodeType2["INSUFFICIENT_CLOUDHSM_HSMS"] = "INSUFFICIENT_CLOUDHSM_HSMS";
      ConnectionErrorCodeType2["INTERNAL_ERROR"] = "INTERNAL_ERROR";
      ConnectionErrorCodeType2["INVALID_CREDENTIALS"] = "INVALID_CREDENTIALS";
      ConnectionErrorCodeType2["NETWORK_ERRORS"] = "NETWORK_ERRORS";
      ConnectionErrorCodeType2["SUBNET_NOT_FOUND"] = "SUBNET_NOT_FOUND";
      ConnectionErrorCodeType2["USER_LOCKED_OUT"] = "USER_LOCKED_OUT";
      ConnectionErrorCodeType2["USER_LOGGED_IN"] = "USER_LOGGED_IN";
      ConnectionErrorCodeType2["USER_NOT_FOUND"] = "USER_NOT_FOUND";
    })(ConnectionErrorCodeType = exports.ConnectionErrorCodeType || (exports.ConnectionErrorCodeType = {}));
    var ConnectionStateType;
    (function(ConnectionStateType2) {
      ConnectionStateType2["CONNECTED"] = "CONNECTED";
      ConnectionStateType2["CONNECTING"] = "CONNECTING";
      ConnectionStateType2["DISCONNECTED"] = "DISCONNECTED";
      ConnectionStateType2["DISCONNECTING"] = "DISCONNECTING";
      ConnectionStateType2["FAILED"] = "FAILED";
    })(ConnectionStateType = exports.ConnectionStateType || (exports.ConnectionStateType = {}));
    var CreateAliasRequest;
    (function(CreateAliasRequest2) {
      CreateAliasRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CreateAliasRequest = exports.CreateAliasRequest || (exports.CreateAliasRequest = {}));
    var InvalidAliasNameException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "InvalidAliasNameException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAliasNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAliasNameException.prototype);
      }
    };
    exports.InvalidAliasNameException = InvalidAliasNameException;
    var LimitExceededException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "LimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
      }
    };
    exports.LimitExceededException = LimitExceededException;
    var CreateCustomKeyStoreRequest;
    (function(CreateCustomKeyStoreRequest2) {
      CreateCustomKeyStoreRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.KeyStorePassword && { KeyStorePassword: smithy_client_1.SENSITIVE_STRING }
      });
    })(CreateCustomKeyStoreRequest = exports.CreateCustomKeyStoreRequest || (exports.CreateCustomKeyStoreRequest = {}));
    var CreateCustomKeyStoreResponse;
    (function(CreateCustomKeyStoreResponse2) {
      CreateCustomKeyStoreResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CreateCustomKeyStoreResponse = exports.CreateCustomKeyStoreResponse || (exports.CreateCustomKeyStoreResponse = {}));
    var CustomKeyStoreNameInUseException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "CustomKeyStoreNameInUseException",
          $fault: "client",
          ...opts
        });
        this.name = "CustomKeyStoreNameInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomKeyStoreNameInUseException.prototype);
      }
    };
    exports.CustomKeyStoreNameInUseException = CustomKeyStoreNameInUseException;
    var IncorrectTrustAnchorException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "IncorrectTrustAnchorException",
          $fault: "client",
          ...opts
        });
        this.name = "IncorrectTrustAnchorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IncorrectTrustAnchorException.prototype);
      }
    };
    exports.IncorrectTrustAnchorException = IncorrectTrustAnchorException;
    var GrantConstraints;
    (function(GrantConstraints2) {
      GrantConstraints2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GrantConstraints = exports.GrantConstraints || (exports.GrantConstraints = {}));
    var GrantOperation;
    (function(GrantOperation2) {
      GrantOperation2["CreateGrant"] = "CreateGrant";
      GrantOperation2["Decrypt"] = "Decrypt";
      GrantOperation2["DescribeKey"] = "DescribeKey";
      GrantOperation2["Encrypt"] = "Encrypt";
      GrantOperation2["GenerateDataKey"] = "GenerateDataKey";
      GrantOperation2["GenerateDataKeyPair"] = "GenerateDataKeyPair";
      GrantOperation2["GenerateDataKeyPairWithoutPlaintext"] = "GenerateDataKeyPairWithoutPlaintext";
      GrantOperation2["GenerateDataKeyWithoutPlaintext"] = "GenerateDataKeyWithoutPlaintext";
      GrantOperation2["GenerateMac"] = "GenerateMac";
      GrantOperation2["GetPublicKey"] = "GetPublicKey";
      GrantOperation2["ReEncryptFrom"] = "ReEncryptFrom";
      GrantOperation2["ReEncryptTo"] = "ReEncryptTo";
      GrantOperation2["RetireGrant"] = "RetireGrant";
      GrantOperation2["Sign"] = "Sign";
      GrantOperation2["Verify"] = "Verify";
      GrantOperation2["VerifyMac"] = "VerifyMac";
    })(GrantOperation = exports.GrantOperation || (exports.GrantOperation = {}));
    var CreateGrantRequest;
    (function(CreateGrantRequest2) {
      CreateGrantRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CreateGrantRequest = exports.CreateGrantRequest || (exports.CreateGrantRequest = {}));
    var CreateGrantResponse;
    (function(CreateGrantResponse2) {
      CreateGrantResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CreateGrantResponse = exports.CreateGrantResponse || (exports.CreateGrantResponse = {}));
    var DisabledException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "DisabledException",
          $fault: "client",
          ...opts
        });
        this.name = "DisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DisabledException.prototype);
      }
    };
    exports.DisabledException = DisabledException;
    var InvalidGrantTokenException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "InvalidGrantTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidGrantTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidGrantTokenException.prototype);
      }
    };
    exports.InvalidGrantTokenException = InvalidGrantTokenException;
    var CustomerMasterKeySpec;
    (function(CustomerMasterKeySpec2) {
      CustomerMasterKeySpec2["ECC_NIST_P256"] = "ECC_NIST_P256";
      CustomerMasterKeySpec2["ECC_NIST_P384"] = "ECC_NIST_P384";
      CustomerMasterKeySpec2["ECC_NIST_P521"] = "ECC_NIST_P521";
      CustomerMasterKeySpec2["ECC_SECG_P256K1"] = "ECC_SECG_P256K1";
      CustomerMasterKeySpec2["HMAC_224"] = "HMAC_224";
      CustomerMasterKeySpec2["HMAC_256"] = "HMAC_256";
      CustomerMasterKeySpec2["HMAC_384"] = "HMAC_384";
      CustomerMasterKeySpec2["HMAC_512"] = "HMAC_512";
      CustomerMasterKeySpec2["RSA_2048"] = "RSA_2048";
      CustomerMasterKeySpec2["RSA_3072"] = "RSA_3072";
      CustomerMasterKeySpec2["RSA_4096"] = "RSA_4096";
      CustomerMasterKeySpec2["SYMMETRIC_DEFAULT"] = "SYMMETRIC_DEFAULT";
    })(CustomerMasterKeySpec = exports.CustomerMasterKeySpec || (exports.CustomerMasterKeySpec = {}));
    var KeySpec;
    (function(KeySpec2) {
      KeySpec2["ECC_NIST_P256"] = "ECC_NIST_P256";
      KeySpec2["ECC_NIST_P384"] = "ECC_NIST_P384";
      KeySpec2["ECC_NIST_P521"] = "ECC_NIST_P521";
      KeySpec2["ECC_SECG_P256K1"] = "ECC_SECG_P256K1";
      KeySpec2["HMAC_224"] = "HMAC_224";
      KeySpec2["HMAC_256"] = "HMAC_256";
      KeySpec2["HMAC_384"] = "HMAC_384";
      KeySpec2["HMAC_512"] = "HMAC_512";
      KeySpec2["RSA_2048"] = "RSA_2048";
      KeySpec2["RSA_3072"] = "RSA_3072";
      KeySpec2["RSA_4096"] = "RSA_4096";
      KeySpec2["SYMMETRIC_DEFAULT"] = "SYMMETRIC_DEFAULT";
    })(KeySpec = exports.KeySpec || (exports.KeySpec = {}));
    var KeyUsageType;
    (function(KeyUsageType2) {
      KeyUsageType2["ENCRYPT_DECRYPT"] = "ENCRYPT_DECRYPT";
      KeyUsageType2["GENERATE_VERIFY_MAC"] = "GENERATE_VERIFY_MAC";
      KeyUsageType2["SIGN_VERIFY"] = "SIGN_VERIFY";
    })(KeyUsageType = exports.KeyUsageType || (exports.KeyUsageType = {}));
    var OriginType;
    (function(OriginType2) {
      OriginType2["AWS_CLOUDHSM"] = "AWS_CLOUDHSM";
      OriginType2["AWS_KMS"] = "AWS_KMS";
      OriginType2["EXTERNAL"] = "EXTERNAL";
    })(OriginType = exports.OriginType || (exports.OriginType = {}));
    var Tag;
    (function(Tag2) {
      Tag2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(Tag = exports.Tag || (exports.Tag = {}));
    var CreateKeyRequest;
    (function(CreateKeyRequest2) {
      CreateKeyRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CreateKeyRequest = exports.CreateKeyRequest || (exports.CreateKeyRequest = {}));
    var EncryptionAlgorithmSpec;
    (function(EncryptionAlgorithmSpec2) {
      EncryptionAlgorithmSpec2["RSAES_OAEP_SHA_1"] = "RSAES_OAEP_SHA_1";
      EncryptionAlgorithmSpec2["RSAES_OAEP_SHA_256"] = "RSAES_OAEP_SHA_256";
      EncryptionAlgorithmSpec2["SYMMETRIC_DEFAULT"] = "SYMMETRIC_DEFAULT";
    })(EncryptionAlgorithmSpec = exports.EncryptionAlgorithmSpec || (exports.EncryptionAlgorithmSpec = {}));
    var ExpirationModelType;
    (function(ExpirationModelType2) {
      ExpirationModelType2["KEY_MATERIAL_DOES_NOT_EXPIRE"] = "KEY_MATERIAL_DOES_NOT_EXPIRE";
      ExpirationModelType2["KEY_MATERIAL_EXPIRES"] = "KEY_MATERIAL_EXPIRES";
    })(ExpirationModelType = exports.ExpirationModelType || (exports.ExpirationModelType = {}));
    var KeyManagerType;
    (function(KeyManagerType2) {
      KeyManagerType2["AWS"] = "AWS";
      KeyManagerType2["CUSTOMER"] = "CUSTOMER";
    })(KeyManagerType = exports.KeyManagerType || (exports.KeyManagerType = {}));
    var KeyState;
    (function(KeyState2) {
      KeyState2["Creating"] = "Creating";
      KeyState2["Disabled"] = "Disabled";
      KeyState2["Enabled"] = "Enabled";
      KeyState2["PendingDeletion"] = "PendingDeletion";
      KeyState2["PendingImport"] = "PendingImport";
      KeyState2["PendingReplicaDeletion"] = "PendingReplicaDeletion";
      KeyState2["Unavailable"] = "Unavailable";
      KeyState2["Updating"] = "Updating";
    })(KeyState = exports.KeyState || (exports.KeyState = {}));
    var MacAlgorithmSpec;
    (function(MacAlgorithmSpec2) {
      MacAlgorithmSpec2["HMAC_SHA_224"] = "HMAC_SHA_224";
      MacAlgorithmSpec2["HMAC_SHA_256"] = "HMAC_SHA_256";
      MacAlgorithmSpec2["HMAC_SHA_384"] = "HMAC_SHA_384";
      MacAlgorithmSpec2["HMAC_SHA_512"] = "HMAC_SHA_512";
    })(MacAlgorithmSpec = exports.MacAlgorithmSpec || (exports.MacAlgorithmSpec = {}));
    var MultiRegionKeyType;
    (function(MultiRegionKeyType2) {
      MultiRegionKeyType2["PRIMARY"] = "PRIMARY";
      MultiRegionKeyType2["REPLICA"] = "REPLICA";
    })(MultiRegionKeyType = exports.MultiRegionKeyType || (exports.MultiRegionKeyType = {}));
    var MultiRegionKey;
    (function(MultiRegionKey2) {
      MultiRegionKey2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(MultiRegionKey = exports.MultiRegionKey || (exports.MultiRegionKey = {}));
    var MultiRegionConfiguration;
    (function(MultiRegionConfiguration2) {
      MultiRegionConfiguration2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(MultiRegionConfiguration = exports.MultiRegionConfiguration || (exports.MultiRegionConfiguration = {}));
    var SigningAlgorithmSpec;
    (function(SigningAlgorithmSpec2) {
      SigningAlgorithmSpec2["ECDSA_SHA_256"] = "ECDSA_SHA_256";
      SigningAlgorithmSpec2["ECDSA_SHA_384"] = "ECDSA_SHA_384";
      SigningAlgorithmSpec2["ECDSA_SHA_512"] = "ECDSA_SHA_512";
      SigningAlgorithmSpec2["RSASSA_PKCS1_V1_5_SHA_256"] = "RSASSA_PKCS1_V1_5_SHA_256";
      SigningAlgorithmSpec2["RSASSA_PKCS1_V1_5_SHA_384"] = "RSASSA_PKCS1_V1_5_SHA_384";
      SigningAlgorithmSpec2["RSASSA_PKCS1_V1_5_SHA_512"] = "RSASSA_PKCS1_V1_5_SHA_512";
      SigningAlgorithmSpec2["RSASSA_PSS_SHA_256"] = "RSASSA_PSS_SHA_256";
      SigningAlgorithmSpec2["RSASSA_PSS_SHA_384"] = "RSASSA_PSS_SHA_384";
      SigningAlgorithmSpec2["RSASSA_PSS_SHA_512"] = "RSASSA_PSS_SHA_512";
    })(SigningAlgorithmSpec = exports.SigningAlgorithmSpec || (exports.SigningAlgorithmSpec = {}));
    var KeyMetadata;
    (function(KeyMetadata2) {
      KeyMetadata2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(KeyMetadata = exports.KeyMetadata || (exports.KeyMetadata = {}));
    var CreateKeyResponse;
    (function(CreateKeyResponse2) {
      CreateKeyResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CreateKeyResponse = exports.CreateKeyResponse || (exports.CreateKeyResponse = {}));
    var MalformedPolicyDocumentException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "MalformedPolicyDocumentException",
          $fault: "client",
          ...opts
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
      }
    };
    exports.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
    var TagException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "TagException",
          $fault: "client",
          ...opts
        });
        this.name = "TagException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TagException.prototype);
      }
    };
    exports.TagException = TagException;
    var UnsupportedOperationException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedOperationException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedOperationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedOperationException.prototype);
      }
    };
    exports.UnsupportedOperationException = UnsupportedOperationException;
    var CustomKeyStoreHasCMKsException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "CustomKeyStoreHasCMKsException",
          $fault: "client",
          ...opts
        });
        this.name = "CustomKeyStoreHasCMKsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomKeyStoreHasCMKsException.prototype);
      }
    };
    exports.CustomKeyStoreHasCMKsException = CustomKeyStoreHasCMKsException;
    var CustomKeyStoresListEntry;
    (function(CustomKeyStoresListEntry2) {
      CustomKeyStoresListEntry2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CustomKeyStoresListEntry = exports.CustomKeyStoresListEntry || (exports.CustomKeyStoresListEntry = {}));
    var DataKeyPairSpec;
    (function(DataKeyPairSpec2) {
      DataKeyPairSpec2["ECC_NIST_P256"] = "ECC_NIST_P256";
      DataKeyPairSpec2["ECC_NIST_P384"] = "ECC_NIST_P384";
      DataKeyPairSpec2["ECC_NIST_P521"] = "ECC_NIST_P521";
      DataKeyPairSpec2["ECC_SECG_P256K1"] = "ECC_SECG_P256K1";
      DataKeyPairSpec2["RSA_2048"] = "RSA_2048";
      DataKeyPairSpec2["RSA_3072"] = "RSA_3072";
      DataKeyPairSpec2["RSA_4096"] = "RSA_4096";
    })(DataKeyPairSpec = exports.DataKeyPairSpec || (exports.DataKeyPairSpec = {}));
    var DataKeySpec;
    (function(DataKeySpec2) {
      DataKeySpec2["AES_128"] = "AES_128";
      DataKeySpec2["AES_256"] = "AES_256";
    })(DataKeySpec = exports.DataKeySpec || (exports.DataKeySpec = {}));
    var DecryptRequest;
    (function(DecryptRequest2) {
      DecryptRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DecryptRequest = exports.DecryptRequest || (exports.DecryptRequest = {}));
    var DecryptResponse;
    (function(DecryptResponse2) {
      DecryptResponse2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Plaintext && { Plaintext: smithy_client_1.SENSITIVE_STRING }
      });
    })(DecryptResponse = exports.DecryptResponse || (exports.DecryptResponse = {}));
    var IncorrectKeyException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "IncorrectKeyException",
          $fault: "client",
          ...opts
        });
        this.name = "IncorrectKeyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IncorrectKeyException.prototype);
      }
    };
    exports.IncorrectKeyException = IncorrectKeyException;
    var InvalidCiphertextException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "InvalidCiphertextException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidCiphertextException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidCiphertextException.prototype);
      }
    };
    exports.InvalidCiphertextException = InvalidCiphertextException;
    var InvalidKeyUsageException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "InvalidKeyUsageException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidKeyUsageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidKeyUsageException.prototype);
      }
    };
    exports.InvalidKeyUsageException = InvalidKeyUsageException;
    var KeyUnavailableException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "KeyUnavailableException",
          $fault: "server",
          ...opts
        });
        this.name = "KeyUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, KeyUnavailableException.prototype);
      }
    };
    exports.KeyUnavailableException = KeyUnavailableException;
    var DeleteAliasRequest;
    (function(DeleteAliasRequest2) {
      DeleteAliasRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeleteAliasRequest = exports.DeleteAliasRequest || (exports.DeleteAliasRequest = {}));
    var DeleteCustomKeyStoreRequest;
    (function(DeleteCustomKeyStoreRequest2) {
      DeleteCustomKeyStoreRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeleteCustomKeyStoreRequest = exports.DeleteCustomKeyStoreRequest || (exports.DeleteCustomKeyStoreRequest = {}));
    var DeleteCustomKeyStoreResponse;
    (function(DeleteCustomKeyStoreResponse2) {
      DeleteCustomKeyStoreResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeleteCustomKeyStoreResponse = exports.DeleteCustomKeyStoreResponse || (exports.DeleteCustomKeyStoreResponse = {}));
    var DeleteImportedKeyMaterialRequest;
    (function(DeleteImportedKeyMaterialRequest2) {
      DeleteImportedKeyMaterialRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeleteImportedKeyMaterialRequest = exports.DeleteImportedKeyMaterialRequest || (exports.DeleteImportedKeyMaterialRequest = {}));
    var DescribeCustomKeyStoresRequest;
    (function(DescribeCustomKeyStoresRequest2) {
      DescribeCustomKeyStoresRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeCustomKeyStoresRequest = exports.DescribeCustomKeyStoresRequest || (exports.DescribeCustomKeyStoresRequest = {}));
    var DescribeCustomKeyStoresResponse;
    (function(DescribeCustomKeyStoresResponse2) {
      DescribeCustomKeyStoresResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeCustomKeyStoresResponse = exports.DescribeCustomKeyStoresResponse || (exports.DescribeCustomKeyStoresResponse = {}));
    var InvalidMarkerException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "InvalidMarkerException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidMarkerException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidMarkerException.prototype);
      }
    };
    exports.InvalidMarkerException = InvalidMarkerException;
    var DescribeKeyRequest;
    (function(DescribeKeyRequest2) {
      DescribeKeyRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeKeyRequest = exports.DescribeKeyRequest || (exports.DescribeKeyRequest = {}));
    var DescribeKeyResponse;
    (function(DescribeKeyResponse2) {
      DescribeKeyResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeKeyResponse = exports.DescribeKeyResponse || (exports.DescribeKeyResponse = {}));
    var DisableKeyRequest;
    (function(DisableKeyRequest2) {
      DisableKeyRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DisableKeyRequest = exports.DisableKeyRequest || (exports.DisableKeyRequest = {}));
    var DisableKeyRotationRequest;
    (function(DisableKeyRotationRequest2) {
      DisableKeyRotationRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DisableKeyRotationRequest = exports.DisableKeyRotationRequest || (exports.DisableKeyRotationRequest = {}));
    var DisconnectCustomKeyStoreRequest;
    (function(DisconnectCustomKeyStoreRequest2) {
      DisconnectCustomKeyStoreRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DisconnectCustomKeyStoreRequest = exports.DisconnectCustomKeyStoreRequest || (exports.DisconnectCustomKeyStoreRequest = {}));
    var DisconnectCustomKeyStoreResponse;
    (function(DisconnectCustomKeyStoreResponse2) {
      DisconnectCustomKeyStoreResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DisconnectCustomKeyStoreResponse = exports.DisconnectCustomKeyStoreResponse || (exports.DisconnectCustomKeyStoreResponse = {}));
    var EnableKeyRequest;
    (function(EnableKeyRequest2) {
      EnableKeyRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(EnableKeyRequest = exports.EnableKeyRequest || (exports.EnableKeyRequest = {}));
    var EnableKeyRotationRequest;
    (function(EnableKeyRotationRequest2) {
      EnableKeyRotationRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(EnableKeyRotationRequest = exports.EnableKeyRotationRequest || (exports.EnableKeyRotationRequest = {}));
    var EncryptRequest;
    (function(EncryptRequest2) {
      EncryptRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Plaintext && { Plaintext: smithy_client_1.SENSITIVE_STRING }
      });
    })(EncryptRequest = exports.EncryptRequest || (exports.EncryptRequest = {}));
    var EncryptResponse;
    (function(EncryptResponse2) {
      EncryptResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(EncryptResponse = exports.EncryptResponse || (exports.EncryptResponse = {}));
    var ExpiredImportTokenException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "ExpiredImportTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredImportTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExpiredImportTokenException.prototype);
      }
    };
    exports.ExpiredImportTokenException = ExpiredImportTokenException;
    var GenerateDataKeyRequest;
    (function(GenerateDataKeyRequest2) {
      GenerateDataKeyRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GenerateDataKeyRequest = exports.GenerateDataKeyRequest || (exports.GenerateDataKeyRequest = {}));
    var GenerateDataKeyResponse;
    (function(GenerateDataKeyResponse2) {
      GenerateDataKeyResponse2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Plaintext && { Plaintext: smithy_client_1.SENSITIVE_STRING }
      });
    })(GenerateDataKeyResponse = exports.GenerateDataKeyResponse || (exports.GenerateDataKeyResponse = {}));
    var GenerateDataKeyPairRequest;
    (function(GenerateDataKeyPairRequest2) {
      GenerateDataKeyPairRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GenerateDataKeyPairRequest = exports.GenerateDataKeyPairRequest || (exports.GenerateDataKeyPairRequest = {}));
    var GenerateDataKeyPairResponse;
    (function(GenerateDataKeyPairResponse2) {
      GenerateDataKeyPairResponse2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.PrivateKeyPlaintext && { PrivateKeyPlaintext: smithy_client_1.SENSITIVE_STRING }
      });
    })(GenerateDataKeyPairResponse = exports.GenerateDataKeyPairResponse || (exports.GenerateDataKeyPairResponse = {}));
    var GenerateDataKeyPairWithoutPlaintextRequest;
    (function(GenerateDataKeyPairWithoutPlaintextRequest2) {
      GenerateDataKeyPairWithoutPlaintextRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GenerateDataKeyPairWithoutPlaintextRequest = exports.GenerateDataKeyPairWithoutPlaintextRequest || (exports.GenerateDataKeyPairWithoutPlaintextRequest = {}));
    var GenerateDataKeyPairWithoutPlaintextResponse;
    (function(GenerateDataKeyPairWithoutPlaintextResponse2) {
      GenerateDataKeyPairWithoutPlaintextResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GenerateDataKeyPairWithoutPlaintextResponse = exports.GenerateDataKeyPairWithoutPlaintextResponse || (exports.GenerateDataKeyPairWithoutPlaintextResponse = {}));
    var GenerateDataKeyWithoutPlaintextRequest;
    (function(GenerateDataKeyWithoutPlaintextRequest2) {
      GenerateDataKeyWithoutPlaintextRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GenerateDataKeyWithoutPlaintextRequest = exports.GenerateDataKeyWithoutPlaintextRequest || (exports.GenerateDataKeyWithoutPlaintextRequest = {}));
    var GenerateDataKeyWithoutPlaintextResponse;
    (function(GenerateDataKeyWithoutPlaintextResponse2) {
      GenerateDataKeyWithoutPlaintextResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GenerateDataKeyWithoutPlaintextResponse = exports.GenerateDataKeyWithoutPlaintextResponse || (exports.GenerateDataKeyWithoutPlaintextResponse = {}));
    var GenerateMacRequest;
    (function(GenerateMacRequest2) {
      GenerateMacRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Message && { Message: smithy_client_1.SENSITIVE_STRING }
      });
    })(GenerateMacRequest = exports.GenerateMacRequest || (exports.GenerateMacRequest = {}));
    var GenerateMacResponse;
    (function(GenerateMacResponse2) {
      GenerateMacResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GenerateMacResponse = exports.GenerateMacResponse || (exports.GenerateMacResponse = {}));
    var GenerateRandomRequest;
    (function(GenerateRandomRequest2) {
      GenerateRandomRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GenerateRandomRequest = exports.GenerateRandomRequest || (exports.GenerateRandomRequest = {}));
    var GenerateRandomResponse;
    (function(GenerateRandomResponse2) {
      GenerateRandomResponse2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Plaintext && { Plaintext: smithy_client_1.SENSITIVE_STRING }
      });
    })(GenerateRandomResponse = exports.GenerateRandomResponse || (exports.GenerateRandomResponse = {}));
    var GetKeyPolicyRequest;
    (function(GetKeyPolicyRequest2) {
      GetKeyPolicyRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetKeyPolicyRequest = exports.GetKeyPolicyRequest || (exports.GetKeyPolicyRequest = {}));
    var GetKeyPolicyResponse;
    (function(GetKeyPolicyResponse2) {
      GetKeyPolicyResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetKeyPolicyResponse = exports.GetKeyPolicyResponse || (exports.GetKeyPolicyResponse = {}));
    var GetKeyRotationStatusRequest;
    (function(GetKeyRotationStatusRequest2) {
      GetKeyRotationStatusRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetKeyRotationStatusRequest = exports.GetKeyRotationStatusRequest || (exports.GetKeyRotationStatusRequest = {}));
    var GetKeyRotationStatusResponse;
    (function(GetKeyRotationStatusResponse2) {
      GetKeyRotationStatusResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetKeyRotationStatusResponse = exports.GetKeyRotationStatusResponse || (exports.GetKeyRotationStatusResponse = {}));
    var WrappingKeySpec;
    (function(WrappingKeySpec2) {
      WrappingKeySpec2["RSA_2048"] = "RSA_2048";
    })(WrappingKeySpec = exports.WrappingKeySpec || (exports.WrappingKeySpec = {}));
    var GetParametersForImportRequest;
    (function(GetParametersForImportRequest2) {
      GetParametersForImportRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetParametersForImportRequest = exports.GetParametersForImportRequest || (exports.GetParametersForImportRequest = {}));
    var GetParametersForImportResponse;
    (function(GetParametersForImportResponse2) {
      GetParametersForImportResponse2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.PublicKey && { PublicKey: smithy_client_1.SENSITIVE_STRING }
      });
    })(GetParametersForImportResponse = exports.GetParametersForImportResponse || (exports.GetParametersForImportResponse = {}));
    var GetPublicKeyRequest;
    (function(GetPublicKeyRequest2) {
      GetPublicKeyRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetPublicKeyRequest = exports.GetPublicKeyRequest || (exports.GetPublicKeyRequest = {}));
    var GetPublicKeyResponse;
    (function(GetPublicKeyResponse2) {
      GetPublicKeyResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetPublicKeyResponse = exports.GetPublicKeyResponse || (exports.GetPublicKeyResponse = {}));
    var GrantListEntry;
    (function(GrantListEntry2) {
      GrantListEntry2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GrantListEntry = exports.GrantListEntry || (exports.GrantListEntry = {}));
    var ImportKeyMaterialRequest;
    (function(ImportKeyMaterialRequest2) {
      ImportKeyMaterialRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ImportKeyMaterialRequest = exports.ImportKeyMaterialRequest || (exports.ImportKeyMaterialRequest = {}));
    var ImportKeyMaterialResponse;
    (function(ImportKeyMaterialResponse2) {
      ImportKeyMaterialResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ImportKeyMaterialResponse = exports.ImportKeyMaterialResponse || (exports.ImportKeyMaterialResponse = {}));
    var IncorrectKeyMaterialException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "IncorrectKeyMaterialException",
          $fault: "client",
          ...opts
        });
        this.name = "IncorrectKeyMaterialException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IncorrectKeyMaterialException.prototype);
      }
    };
    exports.IncorrectKeyMaterialException = IncorrectKeyMaterialException;
    var InvalidImportTokenException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "InvalidImportTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidImportTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidImportTokenException.prototype);
      }
    };
    exports.InvalidImportTokenException = InvalidImportTokenException;
    var InvalidGrantIdException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "InvalidGrantIdException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidGrantIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidGrantIdException.prototype);
      }
    };
    exports.InvalidGrantIdException = InvalidGrantIdException;
    var KeyListEntry;
    (function(KeyListEntry2) {
      KeyListEntry2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(KeyListEntry = exports.KeyListEntry || (exports.KeyListEntry = {}));
    var KMSInvalidMacException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "KMSInvalidMacException",
          $fault: "client",
          ...opts
        });
        this.name = "KMSInvalidMacException";
        this.$fault = "client";
        Object.setPrototypeOf(this, KMSInvalidMacException.prototype);
      }
    };
    exports.KMSInvalidMacException = KMSInvalidMacException;
    var KMSInvalidSignatureException = class extends KMSServiceException_1.KMSServiceException {
      constructor(opts) {
        super({
          name: "KMSInvalidSignatureException",
          $fault: "client",
          ...opts
        });
        this.name = "KMSInvalidSignatureException";
        this.$fault = "client";
        Object.setPrototypeOf(this, KMSInvalidSignatureException.prototype);
      }
    };
    exports.KMSInvalidSignatureException = KMSInvalidSignatureException;
    var ListAliasesRequest;
    (function(ListAliasesRequest2) {
      ListAliasesRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListAliasesRequest = exports.ListAliasesRequest || (exports.ListAliasesRequest = {}));
    var ListAliasesResponse;
    (function(ListAliasesResponse2) {
      ListAliasesResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListAliasesResponse = exports.ListAliasesResponse || (exports.ListAliasesResponse = {}));
    var ListGrantsRequest;
    (function(ListGrantsRequest2) {
      ListGrantsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListGrantsRequest = exports.ListGrantsRequest || (exports.ListGrantsRequest = {}));
    var ListGrantsResponse;
    (function(ListGrantsResponse2) {
      ListGrantsResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListGrantsResponse = exports.ListGrantsResponse || (exports.ListGrantsResponse = {}));
    var ListKeyPoliciesRequest;
    (function(ListKeyPoliciesRequest2) {
      ListKeyPoliciesRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListKeyPoliciesRequest = exports.ListKeyPoliciesRequest || (exports.ListKeyPoliciesRequest = {}));
    var ListKeyPoliciesResponse;
    (function(ListKeyPoliciesResponse2) {
      ListKeyPoliciesResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListKeyPoliciesResponse = exports.ListKeyPoliciesResponse || (exports.ListKeyPoliciesResponse = {}));
    var ListKeysRequest;
    (function(ListKeysRequest2) {
      ListKeysRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListKeysRequest = exports.ListKeysRequest || (exports.ListKeysRequest = {}));
    var ListKeysResponse;
    (function(ListKeysResponse2) {
      ListKeysResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListKeysResponse = exports.ListKeysResponse || (exports.ListKeysResponse = {}));
    var ListResourceTagsRequest;
    (function(ListResourceTagsRequest2) {
      ListResourceTagsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListResourceTagsRequest = exports.ListResourceTagsRequest || (exports.ListResourceTagsRequest = {}));
    var ListResourceTagsResponse;
    (function(ListResourceTagsResponse2) {
      ListResourceTagsResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListResourceTagsResponse = exports.ListResourceTagsResponse || (exports.ListResourceTagsResponse = {}));
    var ListRetirableGrantsRequest;
    (function(ListRetirableGrantsRequest2) {
      ListRetirableGrantsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListRetirableGrantsRequest = exports.ListRetirableGrantsRequest || (exports.ListRetirableGrantsRequest = {}));
    var MessageType;
    (function(MessageType2) {
      MessageType2["DIGEST"] = "DIGEST";
      MessageType2["RAW"] = "RAW";
    })(MessageType = exports.MessageType || (exports.MessageType = {}));
    var PutKeyPolicyRequest;
    (function(PutKeyPolicyRequest2) {
      PutKeyPolicyRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(PutKeyPolicyRequest = exports.PutKeyPolicyRequest || (exports.PutKeyPolicyRequest = {}));
    var ReEncryptRequest;
    (function(ReEncryptRequest2) {
      ReEncryptRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ReEncryptRequest = exports.ReEncryptRequest || (exports.ReEncryptRequest = {}));
    var ReEncryptResponse;
    (function(ReEncryptResponse2) {
      ReEncryptResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ReEncryptResponse = exports.ReEncryptResponse || (exports.ReEncryptResponse = {}));
    var ReplicateKeyRequest;
    (function(ReplicateKeyRequest2) {
      ReplicateKeyRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ReplicateKeyRequest = exports.ReplicateKeyRequest || (exports.ReplicateKeyRequest = {}));
    var ReplicateKeyResponse;
    (function(ReplicateKeyResponse2) {
      ReplicateKeyResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ReplicateKeyResponse = exports.ReplicateKeyResponse || (exports.ReplicateKeyResponse = {}));
    var RetireGrantRequest;
    (function(RetireGrantRequest2) {
      RetireGrantRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(RetireGrantRequest = exports.RetireGrantRequest || (exports.RetireGrantRequest = {}));
    var RevokeGrantRequest;
    (function(RevokeGrantRequest2) {
      RevokeGrantRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(RevokeGrantRequest = exports.RevokeGrantRequest || (exports.RevokeGrantRequest = {}));
    var ScheduleKeyDeletionRequest;
    (function(ScheduleKeyDeletionRequest2) {
      ScheduleKeyDeletionRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ScheduleKeyDeletionRequest = exports.ScheduleKeyDeletionRequest || (exports.ScheduleKeyDeletionRequest = {}));
    var ScheduleKeyDeletionResponse;
    (function(ScheduleKeyDeletionResponse2) {
      ScheduleKeyDeletionResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ScheduleKeyDeletionResponse = exports.ScheduleKeyDeletionResponse || (exports.ScheduleKeyDeletionResponse = {}));
    var SignRequest;
    (function(SignRequest2) {
      SignRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Message && { Message: smithy_client_1.SENSITIVE_STRING }
      });
    })(SignRequest = exports.SignRequest || (exports.SignRequest = {}));
    var SignResponse;
    (function(SignResponse2) {
      SignResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(SignResponse = exports.SignResponse || (exports.SignResponse = {}));
    var TagResourceRequest;
    (function(TagResourceRequest2) {
      TagResourceRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(TagResourceRequest = exports.TagResourceRequest || (exports.TagResourceRequest = {}));
    var UntagResourceRequest;
    (function(UntagResourceRequest2) {
      UntagResourceRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UntagResourceRequest = exports.UntagResourceRequest || (exports.UntagResourceRequest = {}));
    var UpdateAliasRequest;
    (function(UpdateAliasRequest2) {
      UpdateAliasRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UpdateAliasRequest = exports.UpdateAliasRequest || (exports.UpdateAliasRequest = {}));
    var UpdateCustomKeyStoreRequest;
    (function(UpdateCustomKeyStoreRequest2) {
      UpdateCustomKeyStoreRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.KeyStorePassword && { KeyStorePassword: smithy_client_1.SENSITIVE_STRING }
      });
    })(UpdateCustomKeyStoreRequest = exports.UpdateCustomKeyStoreRequest || (exports.UpdateCustomKeyStoreRequest = {}));
    var UpdateCustomKeyStoreResponse;
    (function(UpdateCustomKeyStoreResponse2) {
      UpdateCustomKeyStoreResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UpdateCustomKeyStoreResponse = exports.UpdateCustomKeyStoreResponse || (exports.UpdateCustomKeyStoreResponse = {}));
    var UpdateKeyDescriptionRequest;
    (function(UpdateKeyDescriptionRequest2) {
      UpdateKeyDescriptionRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UpdateKeyDescriptionRequest = exports.UpdateKeyDescriptionRequest || (exports.UpdateKeyDescriptionRequest = {}));
    var UpdatePrimaryRegionRequest;
    (function(UpdatePrimaryRegionRequest2) {
      UpdatePrimaryRegionRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UpdatePrimaryRegionRequest = exports.UpdatePrimaryRegionRequest || (exports.UpdatePrimaryRegionRequest = {}));
    var VerifyRequest;
    (function(VerifyRequest2) {
      VerifyRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Message && { Message: smithy_client_1.SENSITIVE_STRING }
      });
    })(VerifyRequest = exports.VerifyRequest || (exports.VerifyRequest = {}));
    var VerifyResponse;
    (function(VerifyResponse2) {
      VerifyResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(VerifyResponse = exports.VerifyResponse || (exports.VerifyResponse = {}));
    var VerifyMacRequest;
    (function(VerifyMacRequest2) {
      VerifyMacRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Message && { Message: smithy_client_1.SENSITIVE_STRING }
      });
    })(VerifyMacRequest = exports.VerifyMacRequest || (exports.VerifyMacRequest = {}));
    var VerifyMacResponse;
    (function(VerifyMacResponse2) {
      VerifyMacResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(VerifyMacResponse = exports.VerifyMacResponse || (exports.VerifyMacResponse = {}));
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js
var require_httpHandler = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js
var require_httpRequest = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpRequest = void 0;
    var HttpRequest = class {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
      }
      static isInstance(request) {
        if (!request)
          return false;
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        const cloned = new HttpRequest({
          ...this,
          headers: { ...this.headers }
        });
        if (cloned.query)
          cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
    exports.HttpRequest = HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param
        };
      }, {});
    }
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js
var require_httpResponse = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpResponse = void 0;
    var HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
    exports.HttpResponse = HttpResponse;
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js
var require_isValidHostname = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isValidHostname = void 0;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    exports.isValidHostname = isValidHostname;
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/index.js
var require_dist_cjs4 = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_httpHandler(), exports);
    tslib_1.__exportStar(require_httpRequest(), exports);
    tslib_1.__exportStar(require_httpResponse(), exports);
    tslib_1.__exportStar(require_isValidHostname(), exports);
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/protocols/Aws_json1_1.js
var require_Aws_json1_1 = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/protocols/Aws_json1_1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializeAws_json1_1VerifyMacCommand = exports.serializeAws_json1_1VerifyCommand = exports.serializeAws_json1_1UpdatePrimaryRegionCommand = exports.serializeAws_json1_1UpdateKeyDescriptionCommand = exports.serializeAws_json1_1UpdateCustomKeyStoreCommand = exports.serializeAws_json1_1UpdateAliasCommand = exports.serializeAws_json1_1UntagResourceCommand = exports.serializeAws_json1_1TagResourceCommand = exports.serializeAws_json1_1SignCommand = exports.serializeAws_json1_1ScheduleKeyDeletionCommand = exports.serializeAws_json1_1RevokeGrantCommand = exports.serializeAws_json1_1RetireGrantCommand = exports.serializeAws_json1_1ReplicateKeyCommand = exports.serializeAws_json1_1ReEncryptCommand = exports.serializeAws_json1_1PutKeyPolicyCommand = exports.serializeAws_json1_1ListRetirableGrantsCommand = exports.serializeAws_json1_1ListResourceTagsCommand = exports.serializeAws_json1_1ListKeysCommand = exports.serializeAws_json1_1ListKeyPoliciesCommand = exports.serializeAws_json1_1ListGrantsCommand = exports.serializeAws_json1_1ListAliasesCommand = exports.serializeAws_json1_1ImportKeyMaterialCommand = exports.serializeAws_json1_1GetPublicKeyCommand = exports.serializeAws_json1_1GetParametersForImportCommand = exports.serializeAws_json1_1GetKeyRotationStatusCommand = exports.serializeAws_json1_1GetKeyPolicyCommand = exports.serializeAws_json1_1GenerateRandomCommand = exports.serializeAws_json1_1GenerateMacCommand = exports.serializeAws_json1_1GenerateDataKeyWithoutPlaintextCommand = exports.serializeAws_json1_1GenerateDataKeyPairWithoutPlaintextCommand = exports.serializeAws_json1_1GenerateDataKeyPairCommand = exports.serializeAws_json1_1GenerateDataKeyCommand = exports.serializeAws_json1_1EncryptCommand = exports.serializeAws_json1_1EnableKeyRotationCommand = exports.serializeAws_json1_1EnableKeyCommand = exports.serializeAws_json1_1DisconnectCustomKeyStoreCommand = exports.serializeAws_json1_1DisableKeyRotationCommand = exports.serializeAws_json1_1DisableKeyCommand = exports.serializeAws_json1_1DescribeKeyCommand = exports.serializeAws_json1_1DescribeCustomKeyStoresCommand = exports.serializeAws_json1_1DeleteImportedKeyMaterialCommand = exports.serializeAws_json1_1DeleteCustomKeyStoreCommand = exports.serializeAws_json1_1DeleteAliasCommand = exports.serializeAws_json1_1DecryptCommand = exports.serializeAws_json1_1CreateKeyCommand = exports.serializeAws_json1_1CreateGrantCommand = exports.serializeAws_json1_1CreateCustomKeyStoreCommand = exports.serializeAws_json1_1CreateAliasCommand = exports.serializeAws_json1_1ConnectCustomKeyStoreCommand = exports.serializeAws_json1_1CancelKeyDeletionCommand = void 0;
    exports.deserializeAws_json1_1VerifyMacCommand = exports.deserializeAws_json1_1VerifyCommand = exports.deserializeAws_json1_1UpdatePrimaryRegionCommand = exports.deserializeAws_json1_1UpdateKeyDescriptionCommand = exports.deserializeAws_json1_1UpdateCustomKeyStoreCommand = exports.deserializeAws_json1_1UpdateAliasCommand = exports.deserializeAws_json1_1UntagResourceCommand = exports.deserializeAws_json1_1TagResourceCommand = exports.deserializeAws_json1_1SignCommand = exports.deserializeAws_json1_1ScheduleKeyDeletionCommand = exports.deserializeAws_json1_1RevokeGrantCommand = exports.deserializeAws_json1_1RetireGrantCommand = exports.deserializeAws_json1_1ReplicateKeyCommand = exports.deserializeAws_json1_1ReEncryptCommand = exports.deserializeAws_json1_1PutKeyPolicyCommand = exports.deserializeAws_json1_1ListRetirableGrantsCommand = exports.deserializeAws_json1_1ListResourceTagsCommand = exports.deserializeAws_json1_1ListKeysCommand = exports.deserializeAws_json1_1ListKeyPoliciesCommand = exports.deserializeAws_json1_1ListGrantsCommand = exports.deserializeAws_json1_1ListAliasesCommand = exports.deserializeAws_json1_1ImportKeyMaterialCommand = exports.deserializeAws_json1_1GetPublicKeyCommand = exports.deserializeAws_json1_1GetParametersForImportCommand = exports.deserializeAws_json1_1GetKeyRotationStatusCommand = exports.deserializeAws_json1_1GetKeyPolicyCommand = exports.deserializeAws_json1_1GenerateRandomCommand = exports.deserializeAws_json1_1GenerateMacCommand = exports.deserializeAws_json1_1GenerateDataKeyWithoutPlaintextCommand = exports.deserializeAws_json1_1GenerateDataKeyPairWithoutPlaintextCommand = exports.deserializeAws_json1_1GenerateDataKeyPairCommand = exports.deserializeAws_json1_1GenerateDataKeyCommand = exports.deserializeAws_json1_1EncryptCommand = exports.deserializeAws_json1_1EnableKeyRotationCommand = exports.deserializeAws_json1_1EnableKeyCommand = exports.deserializeAws_json1_1DisconnectCustomKeyStoreCommand = exports.deserializeAws_json1_1DisableKeyRotationCommand = exports.deserializeAws_json1_1DisableKeyCommand = exports.deserializeAws_json1_1DescribeKeyCommand = exports.deserializeAws_json1_1DescribeCustomKeyStoresCommand = exports.deserializeAws_json1_1DeleteImportedKeyMaterialCommand = exports.deserializeAws_json1_1DeleteCustomKeyStoreCommand = exports.deserializeAws_json1_1DeleteAliasCommand = exports.deserializeAws_json1_1DecryptCommand = exports.deserializeAws_json1_1CreateKeyCommand = exports.deserializeAws_json1_1CreateGrantCommand = exports.deserializeAws_json1_1CreateCustomKeyStoreCommand = exports.deserializeAws_json1_1CreateAliasCommand = exports.deserializeAws_json1_1ConnectCustomKeyStoreCommand = exports.deserializeAws_json1_1CancelKeyDeletionCommand = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs3();
    var KMSServiceException_1 = require_KMSServiceException();
    var models_0_1 = require_models_0();
    var serializeAws_json1_1CancelKeyDeletionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.CancelKeyDeletion"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CancelKeyDeletionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CancelKeyDeletionCommand = serializeAws_json1_1CancelKeyDeletionCommand;
    var serializeAws_json1_1ConnectCustomKeyStoreCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.ConnectCustomKeyStore"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ConnectCustomKeyStoreRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ConnectCustomKeyStoreCommand = serializeAws_json1_1ConnectCustomKeyStoreCommand;
    var serializeAws_json1_1CreateAliasCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.CreateAlias"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateAliasRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CreateAliasCommand = serializeAws_json1_1CreateAliasCommand;
    var serializeAws_json1_1CreateCustomKeyStoreCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.CreateCustomKeyStore"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateCustomKeyStoreRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CreateCustomKeyStoreCommand = serializeAws_json1_1CreateCustomKeyStoreCommand;
    var serializeAws_json1_1CreateGrantCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.CreateGrant"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateGrantRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CreateGrantCommand = serializeAws_json1_1CreateGrantCommand;
    var serializeAws_json1_1CreateKeyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.CreateKey"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateKeyRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CreateKeyCommand = serializeAws_json1_1CreateKeyCommand;
    var serializeAws_json1_1DecryptCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.Decrypt"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DecryptRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DecryptCommand = serializeAws_json1_1DecryptCommand;
    var serializeAws_json1_1DeleteAliasCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.DeleteAlias"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteAliasRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteAliasCommand = serializeAws_json1_1DeleteAliasCommand;
    var serializeAws_json1_1DeleteCustomKeyStoreCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.DeleteCustomKeyStore"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteCustomKeyStoreRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteCustomKeyStoreCommand = serializeAws_json1_1DeleteCustomKeyStoreCommand;
    var serializeAws_json1_1DeleteImportedKeyMaterialCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.DeleteImportedKeyMaterial"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteImportedKeyMaterialRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteImportedKeyMaterialCommand = serializeAws_json1_1DeleteImportedKeyMaterialCommand;
    var serializeAws_json1_1DescribeCustomKeyStoresCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.DescribeCustomKeyStores"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeCustomKeyStoresRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeCustomKeyStoresCommand = serializeAws_json1_1DescribeCustomKeyStoresCommand;
    var serializeAws_json1_1DescribeKeyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.DescribeKey"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeKeyRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeKeyCommand = serializeAws_json1_1DescribeKeyCommand;
    var serializeAws_json1_1DisableKeyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.DisableKey"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DisableKeyRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DisableKeyCommand = serializeAws_json1_1DisableKeyCommand;
    var serializeAws_json1_1DisableKeyRotationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.DisableKeyRotation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DisableKeyRotationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DisableKeyRotationCommand = serializeAws_json1_1DisableKeyRotationCommand;
    var serializeAws_json1_1DisconnectCustomKeyStoreCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.DisconnectCustomKeyStore"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DisconnectCustomKeyStoreRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DisconnectCustomKeyStoreCommand = serializeAws_json1_1DisconnectCustomKeyStoreCommand;
    var serializeAws_json1_1EnableKeyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.EnableKey"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1EnableKeyRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1EnableKeyCommand = serializeAws_json1_1EnableKeyCommand;
    var serializeAws_json1_1EnableKeyRotationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.EnableKeyRotation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1EnableKeyRotationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1EnableKeyRotationCommand = serializeAws_json1_1EnableKeyRotationCommand;
    var serializeAws_json1_1EncryptCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.Encrypt"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1EncryptRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1EncryptCommand = serializeAws_json1_1EncryptCommand;
    var serializeAws_json1_1GenerateDataKeyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.GenerateDataKey"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GenerateDataKeyRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GenerateDataKeyCommand = serializeAws_json1_1GenerateDataKeyCommand;
    var serializeAws_json1_1GenerateDataKeyPairCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.GenerateDataKeyPair"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GenerateDataKeyPairRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GenerateDataKeyPairCommand = serializeAws_json1_1GenerateDataKeyPairCommand;
    var serializeAws_json1_1GenerateDataKeyPairWithoutPlaintextCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.GenerateDataKeyPairWithoutPlaintext"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GenerateDataKeyPairWithoutPlaintextRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GenerateDataKeyPairWithoutPlaintextCommand = serializeAws_json1_1GenerateDataKeyPairWithoutPlaintextCommand;
    var serializeAws_json1_1GenerateDataKeyWithoutPlaintextCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.GenerateDataKeyWithoutPlaintext"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GenerateDataKeyWithoutPlaintextRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GenerateDataKeyWithoutPlaintextCommand = serializeAws_json1_1GenerateDataKeyWithoutPlaintextCommand;
    var serializeAws_json1_1GenerateMacCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.GenerateMac"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GenerateMacRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GenerateMacCommand = serializeAws_json1_1GenerateMacCommand;
    var serializeAws_json1_1GenerateRandomCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.GenerateRandom"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GenerateRandomRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GenerateRandomCommand = serializeAws_json1_1GenerateRandomCommand;
    var serializeAws_json1_1GetKeyPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.GetKeyPolicy"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetKeyPolicyRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetKeyPolicyCommand = serializeAws_json1_1GetKeyPolicyCommand;
    var serializeAws_json1_1GetKeyRotationStatusCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.GetKeyRotationStatus"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetKeyRotationStatusRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetKeyRotationStatusCommand = serializeAws_json1_1GetKeyRotationStatusCommand;
    var serializeAws_json1_1GetParametersForImportCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.GetParametersForImport"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetParametersForImportRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetParametersForImportCommand = serializeAws_json1_1GetParametersForImportCommand;
    var serializeAws_json1_1GetPublicKeyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.GetPublicKey"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetPublicKeyRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetPublicKeyCommand = serializeAws_json1_1GetPublicKeyCommand;
    var serializeAws_json1_1ImportKeyMaterialCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.ImportKeyMaterial"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ImportKeyMaterialRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ImportKeyMaterialCommand = serializeAws_json1_1ImportKeyMaterialCommand;
    var serializeAws_json1_1ListAliasesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.ListAliases"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListAliasesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListAliasesCommand = serializeAws_json1_1ListAliasesCommand;
    var serializeAws_json1_1ListGrantsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.ListGrants"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListGrantsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListGrantsCommand = serializeAws_json1_1ListGrantsCommand;
    var serializeAws_json1_1ListKeyPoliciesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.ListKeyPolicies"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListKeyPoliciesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListKeyPoliciesCommand = serializeAws_json1_1ListKeyPoliciesCommand;
    var serializeAws_json1_1ListKeysCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.ListKeys"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListKeysRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListKeysCommand = serializeAws_json1_1ListKeysCommand;
    var serializeAws_json1_1ListResourceTagsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.ListResourceTags"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListResourceTagsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListResourceTagsCommand = serializeAws_json1_1ListResourceTagsCommand;
    var serializeAws_json1_1ListRetirableGrantsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.ListRetirableGrants"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListRetirableGrantsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListRetirableGrantsCommand = serializeAws_json1_1ListRetirableGrantsCommand;
    var serializeAws_json1_1PutKeyPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.PutKeyPolicy"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1PutKeyPolicyRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1PutKeyPolicyCommand = serializeAws_json1_1PutKeyPolicyCommand;
    var serializeAws_json1_1ReEncryptCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.ReEncrypt"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ReEncryptRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ReEncryptCommand = serializeAws_json1_1ReEncryptCommand;
    var serializeAws_json1_1ReplicateKeyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.ReplicateKey"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ReplicateKeyRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ReplicateKeyCommand = serializeAws_json1_1ReplicateKeyCommand;
    var serializeAws_json1_1RetireGrantCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.RetireGrant"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1RetireGrantRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1RetireGrantCommand = serializeAws_json1_1RetireGrantCommand;
    var serializeAws_json1_1RevokeGrantCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.RevokeGrant"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1RevokeGrantRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1RevokeGrantCommand = serializeAws_json1_1RevokeGrantCommand;
    var serializeAws_json1_1ScheduleKeyDeletionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.ScheduleKeyDeletion"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ScheduleKeyDeletionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ScheduleKeyDeletionCommand = serializeAws_json1_1ScheduleKeyDeletionCommand;
    var serializeAws_json1_1SignCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.Sign"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1SignRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1SignCommand = serializeAws_json1_1SignCommand;
    var serializeAws_json1_1TagResourceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.TagResource"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1TagResourceRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1TagResourceCommand = serializeAws_json1_1TagResourceCommand;
    var serializeAws_json1_1UntagResourceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.UntagResource"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UntagResourceRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UntagResourceCommand = serializeAws_json1_1UntagResourceCommand;
    var serializeAws_json1_1UpdateAliasCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.UpdateAlias"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateAliasRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateAliasCommand = serializeAws_json1_1UpdateAliasCommand;
    var serializeAws_json1_1UpdateCustomKeyStoreCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.UpdateCustomKeyStore"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateCustomKeyStoreRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateCustomKeyStoreCommand = serializeAws_json1_1UpdateCustomKeyStoreCommand;
    var serializeAws_json1_1UpdateKeyDescriptionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.UpdateKeyDescription"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateKeyDescriptionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateKeyDescriptionCommand = serializeAws_json1_1UpdateKeyDescriptionCommand;
    var serializeAws_json1_1UpdatePrimaryRegionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.UpdatePrimaryRegion"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdatePrimaryRegionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdatePrimaryRegionCommand = serializeAws_json1_1UpdatePrimaryRegionCommand;
    var serializeAws_json1_1VerifyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.Verify"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1VerifyRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1VerifyCommand = serializeAws_json1_1VerifyCommand;
    var serializeAws_json1_1VerifyMacCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "TrentService.VerifyMac"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1VerifyMacRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1VerifyMacCommand = serializeAws_json1_1VerifyMacCommand;
    var deserializeAws_json1_1CancelKeyDeletionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CancelKeyDeletionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CancelKeyDeletionResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CancelKeyDeletionCommand = deserializeAws_json1_1CancelKeyDeletionCommand;
    var deserializeAws_json1_1CancelKeyDeletionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ConnectCustomKeyStoreCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ConnectCustomKeyStoreCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ConnectCustomKeyStoreResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ConnectCustomKeyStoreCommand = deserializeAws_json1_1ConnectCustomKeyStoreCommand;
    var deserializeAws_json1_1ConnectCustomKeyStoreCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CloudHsmClusterInvalidConfigurationException":
        case "com.amazonaws.kms#CloudHsmClusterInvalidConfigurationException":
          throw await deserializeAws_json1_1CloudHsmClusterInvalidConfigurationExceptionResponse(parsedOutput, context);
        case "CloudHsmClusterNotActiveException":
        case "com.amazonaws.kms#CloudHsmClusterNotActiveException":
          throw await deserializeAws_json1_1CloudHsmClusterNotActiveExceptionResponse(parsedOutput, context);
        case "CustomKeyStoreInvalidStateException":
        case "com.amazonaws.kms#CustomKeyStoreInvalidStateException":
          throw await deserializeAws_json1_1CustomKeyStoreInvalidStateExceptionResponse(parsedOutput, context);
        case "CustomKeyStoreNotFoundException":
        case "com.amazonaws.kms#CustomKeyStoreNotFoundException":
          throw await deserializeAws_json1_1CustomKeyStoreNotFoundExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1CreateAliasCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateAliasCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CreateAliasCommand = deserializeAws_json1_1CreateAliasCommand;
    var deserializeAws_json1_1CreateAliasCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.kms#AlreadyExistsException":
          throw await deserializeAws_json1_1AlreadyExistsExceptionResponse(parsedOutput, context);
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "InvalidAliasNameException":
        case "com.amazonaws.kms#InvalidAliasNameException":
          throw await deserializeAws_json1_1InvalidAliasNameExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kms#LimitExceededException":
          throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1CreateCustomKeyStoreCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateCustomKeyStoreCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateCustomKeyStoreResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CreateCustomKeyStoreCommand = deserializeAws_json1_1CreateCustomKeyStoreCommand;
    var deserializeAws_json1_1CreateCustomKeyStoreCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CloudHsmClusterInUseException":
        case "com.amazonaws.kms#CloudHsmClusterInUseException":
          throw await deserializeAws_json1_1CloudHsmClusterInUseExceptionResponse(parsedOutput, context);
        case "CloudHsmClusterInvalidConfigurationException":
        case "com.amazonaws.kms#CloudHsmClusterInvalidConfigurationException":
          throw await deserializeAws_json1_1CloudHsmClusterInvalidConfigurationExceptionResponse(parsedOutput, context);
        case "CloudHsmClusterNotActiveException":
        case "com.amazonaws.kms#CloudHsmClusterNotActiveException":
          throw await deserializeAws_json1_1CloudHsmClusterNotActiveExceptionResponse(parsedOutput, context);
        case "CloudHsmClusterNotFoundException":
        case "com.amazonaws.kms#CloudHsmClusterNotFoundException":
          throw await deserializeAws_json1_1CloudHsmClusterNotFoundExceptionResponse(parsedOutput, context);
        case "CustomKeyStoreNameInUseException":
        case "com.amazonaws.kms#CustomKeyStoreNameInUseException":
          throw await deserializeAws_json1_1CustomKeyStoreNameInUseExceptionResponse(parsedOutput, context);
        case "IncorrectTrustAnchorException":
        case "com.amazonaws.kms#IncorrectTrustAnchorException":
          throw await deserializeAws_json1_1IncorrectTrustAnchorExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1CreateGrantCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateGrantCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateGrantResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CreateGrantCommand = deserializeAws_json1_1CreateGrantCommand;
    var deserializeAws_json1_1CreateGrantCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "DisabledException":
        case "com.amazonaws.kms#DisabledException":
          throw await deserializeAws_json1_1DisabledExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "InvalidGrantTokenException":
        case "com.amazonaws.kms#InvalidGrantTokenException":
          throw await deserializeAws_json1_1InvalidGrantTokenExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kms#LimitExceededException":
          throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1CreateKeyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateKeyCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateKeyResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CreateKeyCommand = deserializeAws_json1_1CreateKeyCommand;
    var deserializeAws_json1_1CreateKeyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CloudHsmClusterInvalidConfigurationException":
        case "com.amazonaws.kms#CloudHsmClusterInvalidConfigurationException":
          throw await deserializeAws_json1_1CloudHsmClusterInvalidConfigurationExceptionResponse(parsedOutput, context);
        case "CustomKeyStoreInvalidStateException":
        case "com.amazonaws.kms#CustomKeyStoreInvalidStateException":
          throw await deserializeAws_json1_1CustomKeyStoreInvalidStateExceptionResponse(parsedOutput, context);
        case "CustomKeyStoreNotFoundException":
        case "com.amazonaws.kms#CustomKeyStoreNotFoundException":
          throw await deserializeAws_json1_1CustomKeyStoreNotFoundExceptionResponse(parsedOutput, context);
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kms#LimitExceededException":
          throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.kms#MalformedPolicyDocumentException":
          throw await deserializeAws_json1_1MalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "TagException":
        case "com.amazonaws.kms#TagException":
          throw await deserializeAws_json1_1TagExceptionResponse(parsedOutput, context);
        case "UnsupportedOperationException":
        case "com.amazonaws.kms#UnsupportedOperationException":
          throw await deserializeAws_json1_1UnsupportedOperationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DecryptCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DecryptCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DecryptResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DecryptCommand = deserializeAws_json1_1DecryptCommand;
    var deserializeAws_json1_1DecryptCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "DisabledException":
        case "com.amazonaws.kms#DisabledException":
          throw await deserializeAws_json1_1DisabledExceptionResponse(parsedOutput, context);
        case "IncorrectKeyException":
        case "com.amazonaws.kms#IncorrectKeyException":
          throw await deserializeAws_json1_1IncorrectKeyExceptionResponse(parsedOutput, context);
        case "InvalidCiphertextException":
        case "com.amazonaws.kms#InvalidCiphertextException":
          throw await deserializeAws_json1_1InvalidCiphertextExceptionResponse(parsedOutput, context);
        case "InvalidGrantTokenException":
        case "com.amazonaws.kms#InvalidGrantTokenException":
          throw await deserializeAws_json1_1InvalidGrantTokenExceptionResponse(parsedOutput, context);
        case "InvalidKeyUsageException":
        case "com.amazonaws.kms#InvalidKeyUsageException":
          throw await deserializeAws_json1_1InvalidKeyUsageExceptionResponse(parsedOutput, context);
        case "KeyUnavailableException":
        case "com.amazonaws.kms#KeyUnavailableException":
          throw await deserializeAws_json1_1KeyUnavailableExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DeleteAliasCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteAliasCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteAliasCommand = deserializeAws_json1_1DeleteAliasCommand;
    var deserializeAws_json1_1DeleteAliasCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DeleteCustomKeyStoreCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteCustomKeyStoreCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteCustomKeyStoreResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteCustomKeyStoreCommand = deserializeAws_json1_1DeleteCustomKeyStoreCommand;
    var deserializeAws_json1_1DeleteCustomKeyStoreCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CustomKeyStoreHasCMKsException":
        case "com.amazonaws.kms#CustomKeyStoreHasCMKsException":
          throw await deserializeAws_json1_1CustomKeyStoreHasCMKsExceptionResponse(parsedOutput, context);
        case "CustomKeyStoreInvalidStateException":
        case "com.amazonaws.kms#CustomKeyStoreInvalidStateException":
          throw await deserializeAws_json1_1CustomKeyStoreInvalidStateExceptionResponse(parsedOutput, context);
        case "CustomKeyStoreNotFoundException":
        case "com.amazonaws.kms#CustomKeyStoreNotFoundException":
          throw await deserializeAws_json1_1CustomKeyStoreNotFoundExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DeleteImportedKeyMaterialCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteImportedKeyMaterialCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteImportedKeyMaterialCommand = deserializeAws_json1_1DeleteImportedKeyMaterialCommand;
    var deserializeAws_json1_1DeleteImportedKeyMaterialCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "UnsupportedOperationException":
        case "com.amazonaws.kms#UnsupportedOperationException":
          throw await deserializeAws_json1_1UnsupportedOperationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeCustomKeyStoresCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeCustomKeyStoresCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeCustomKeyStoresResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeCustomKeyStoresCommand = deserializeAws_json1_1DescribeCustomKeyStoresCommand;
    var deserializeAws_json1_1DescribeCustomKeyStoresCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CustomKeyStoreNotFoundException":
        case "com.amazonaws.kms#CustomKeyStoreNotFoundException":
          throw await deserializeAws_json1_1CustomKeyStoreNotFoundExceptionResponse(parsedOutput, context);
        case "InvalidMarkerException":
        case "com.amazonaws.kms#InvalidMarkerException":
          throw await deserializeAws_json1_1InvalidMarkerExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeKeyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeKeyCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeKeyResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeKeyCommand = deserializeAws_json1_1DescribeKeyCommand;
    var deserializeAws_json1_1DescribeKeyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DisableKeyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DisableKeyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DisableKeyCommand = deserializeAws_json1_1DisableKeyCommand;
    var deserializeAws_json1_1DisableKeyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DisableKeyRotationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DisableKeyRotationCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DisableKeyRotationCommand = deserializeAws_json1_1DisableKeyRotationCommand;
    var deserializeAws_json1_1DisableKeyRotationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "DisabledException":
        case "com.amazonaws.kms#DisabledException":
          throw await deserializeAws_json1_1DisabledExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "UnsupportedOperationException":
        case "com.amazonaws.kms#UnsupportedOperationException":
          throw await deserializeAws_json1_1UnsupportedOperationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DisconnectCustomKeyStoreCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DisconnectCustomKeyStoreCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DisconnectCustomKeyStoreResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DisconnectCustomKeyStoreCommand = deserializeAws_json1_1DisconnectCustomKeyStoreCommand;
    var deserializeAws_json1_1DisconnectCustomKeyStoreCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CustomKeyStoreInvalidStateException":
        case "com.amazonaws.kms#CustomKeyStoreInvalidStateException":
          throw await deserializeAws_json1_1CustomKeyStoreInvalidStateExceptionResponse(parsedOutput, context);
        case "CustomKeyStoreNotFoundException":
        case "com.amazonaws.kms#CustomKeyStoreNotFoundException":
          throw await deserializeAws_json1_1CustomKeyStoreNotFoundExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1EnableKeyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1EnableKeyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1EnableKeyCommand = deserializeAws_json1_1EnableKeyCommand;
    var deserializeAws_json1_1EnableKeyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kms#LimitExceededException":
          throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1EnableKeyRotationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1EnableKeyRotationCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1EnableKeyRotationCommand = deserializeAws_json1_1EnableKeyRotationCommand;
    var deserializeAws_json1_1EnableKeyRotationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "DisabledException":
        case "com.amazonaws.kms#DisabledException":
          throw await deserializeAws_json1_1DisabledExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "UnsupportedOperationException":
        case "com.amazonaws.kms#UnsupportedOperationException":
          throw await deserializeAws_json1_1UnsupportedOperationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1EncryptCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1EncryptCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1EncryptResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1EncryptCommand = deserializeAws_json1_1EncryptCommand;
    var deserializeAws_json1_1EncryptCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "DisabledException":
        case "com.amazonaws.kms#DisabledException":
          throw await deserializeAws_json1_1DisabledExceptionResponse(parsedOutput, context);
        case "InvalidGrantTokenException":
        case "com.amazonaws.kms#InvalidGrantTokenException":
          throw await deserializeAws_json1_1InvalidGrantTokenExceptionResponse(parsedOutput, context);
        case "InvalidKeyUsageException":
        case "com.amazonaws.kms#InvalidKeyUsageException":
          throw await deserializeAws_json1_1InvalidKeyUsageExceptionResponse(parsedOutput, context);
        case "KeyUnavailableException":
        case "com.amazonaws.kms#KeyUnavailableException":
          throw await deserializeAws_json1_1KeyUnavailableExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GenerateDataKeyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GenerateDataKeyCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GenerateDataKeyResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GenerateDataKeyCommand = deserializeAws_json1_1GenerateDataKeyCommand;
    var deserializeAws_json1_1GenerateDataKeyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "DisabledException":
        case "com.amazonaws.kms#DisabledException":
          throw await deserializeAws_json1_1DisabledExceptionResponse(parsedOutput, context);
        case "InvalidGrantTokenException":
        case "com.amazonaws.kms#InvalidGrantTokenException":
          throw await deserializeAws_json1_1InvalidGrantTokenExceptionResponse(parsedOutput, context);
        case "InvalidKeyUsageException":
        case "com.amazonaws.kms#InvalidKeyUsageException":
          throw await deserializeAws_json1_1InvalidKeyUsageExceptionResponse(parsedOutput, context);
        case "KeyUnavailableException":
        case "com.amazonaws.kms#KeyUnavailableException":
          throw await deserializeAws_json1_1KeyUnavailableExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GenerateDataKeyPairCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GenerateDataKeyPairCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GenerateDataKeyPairResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GenerateDataKeyPairCommand = deserializeAws_json1_1GenerateDataKeyPairCommand;
    var deserializeAws_json1_1GenerateDataKeyPairCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "DisabledException":
        case "com.amazonaws.kms#DisabledException":
          throw await deserializeAws_json1_1DisabledExceptionResponse(parsedOutput, context);
        case "InvalidGrantTokenException":
        case "com.amazonaws.kms#InvalidGrantTokenException":
          throw await deserializeAws_json1_1InvalidGrantTokenExceptionResponse(parsedOutput, context);
        case "InvalidKeyUsageException":
        case "com.amazonaws.kms#InvalidKeyUsageException":
          throw await deserializeAws_json1_1InvalidKeyUsageExceptionResponse(parsedOutput, context);
        case "KeyUnavailableException":
        case "com.amazonaws.kms#KeyUnavailableException":
          throw await deserializeAws_json1_1KeyUnavailableExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "UnsupportedOperationException":
        case "com.amazonaws.kms#UnsupportedOperationException":
          throw await deserializeAws_json1_1UnsupportedOperationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GenerateDataKeyPairWithoutPlaintextCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GenerateDataKeyPairWithoutPlaintextCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GenerateDataKeyPairWithoutPlaintextResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GenerateDataKeyPairWithoutPlaintextCommand = deserializeAws_json1_1GenerateDataKeyPairWithoutPlaintextCommand;
    var deserializeAws_json1_1GenerateDataKeyPairWithoutPlaintextCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "DisabledException":
        case "com.amazonaws.kms#DisabledException":
          throw await deserializeAws_json1_1DisabledExceptionResponse(parsedOutput, context);
        case "InvalidGrantTokenException":
        case "com.amazonaws.kms#InvalidGrantTokenException":
          throw await deserializeAws_json1_1InvalidGrantTokenExceptionResponse(parsedOutput, context);
        case "InvalidKeyUsageException":
        case "com.amazonaws.kms#InvalidKeyUsageException":
          throw await deserializeAws_json1_1InvalidKeyUsageExceptionResponse(parsedOutput, context);
        case "KeyUnavailableException":
        case "com.amazonaws.kms#KeyUnavailableException":
          throw await deserializeAws_json1_1KeyUnavailableExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "UnsupportedOperationException":
        case "com.amazonaws.kms#UnsupportedOperationException":
          throw await deserializeAws_json1_1UnsupportedOperationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GenerateDataKeyWithoutPlaintextCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GenerateDataKeyWithoutPlaintextCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GenerateDataKeyWithoutPlaintextResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GenerateDataKeyWithoutPlaintextCommand = deserializeAws_json1_1GenerateDataKeyWithoutPlaintextCommand;
    var deserializeAws_json1_1GenerateDataKeyWithoutPlaintextCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "DisabledException":
        case "com.amazonaws.kms#DisabledException":
          throw await deserializeAws_json1_1DisabledExceptionResponse(parsedOutput, context);
        case "InvalidGrantTokenException":
        case "com.amazonaws.kms#InvalidGrantTokenException":
          throw await deserializeAws_json1_1InvalidGrantTokenExceptionResponse(parsedOutput, context);
        case "InvalidKeyUsageException":
        case "com.amazonaws.kms#InvalidKeyUsageException":
          throw await deserializeAws_json1_1InvalidKeyUsageExceptionResponse(parsedOutput, context);
        case "KeyUnavailableException":
        case "com.amazonaws.kms#KeyUnavailableException":
          throw await deserializeAws_json1_1KeyUnavailableExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GenerateMacCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GenerateMacCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GenerateMacResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GenerateMacCommand = deserializeAws_json1_1GenerateMacCommand;
    var deserializeAws_json1_1GenerateMacCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DisabledException":
        case "com.amazonaws.kms#DisabledException":
          throw await deserializeAws_json1_1DisabledExceptionResponse(parsedOutput, context);
        case "InvalidGrantTokenException":
        case "com.amazonaws.kms#InvalidGrantTokenException":
          throw await deserializeAws_json1_1InvalidGrantTokenExceptionResponse(parsedOutput, context);
        case "InvalidKeyUsageException":
        case "com.amazonaws.kms#InvalidKeyUsageException":
          throw await deserializeAws_json1_1InvalidKeyUsageExceptionResponse(parsedOutput, context);
        case "KeyUnavailableException":
        case "com.amazonaws.kms#KeyUnavailableException":
          throw await deserializeAws_json1_1KeyUnavailableExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GenerateRandomCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GenerateRandomCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GenerateRandomResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GenerateRandomCommand = deserializeAws_json1_1GenerateRandomCommand;
    var deserializeAws_json1_1GenerateRandomCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CustomKeyStoreInvalidStateException":
        case "com.amazonaws.kms#CustomKeyStoreInvalidStateException":
          throw await deserializeAws_json1_1CustomKeyStoreInvalidStateExceptionResponse(parsedOutput, context);
        case "CustomKeyStoreNotFoundException":
        case "com.amazonaws.kms#CustomKeyStoreNotFoundException":
          throw await deserializeAws_json1_1CustomKeyStoreNotFoundExceptionResponse(parsedOutput, context);
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetKeyPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetKeyPolicyCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetKeyPolicyResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetKeyPolicyCommand = deserializeAws_json1_1GetKeyPolicyCommand;
    var deserializeAws_json1_1GetKeyPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetKeyRotationStatusCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetKeyRotationStatusCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetKeyRotationStatusResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetKeyRotationStatusCommand = deserializeAws_json1_1GetKeyRotationStatusCommand;
    var deserializeAws_json1_1GetKeyRotationStatusCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "UnsupportedOperationException":
        case "com.amazonaws.kms#UnsupportedOperationException":
          throw await deserializeAws_json1_1UnsupportedOperationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetParametersForImportCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetParametersForImportCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetParametersForImportResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetParametersForImportCommand = deserializeAws_json1_1GetParametersForImportCommand;
    var deserializeAws_json1_1GetParametersForImportCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "UnsupportedOperationException":
        case "com.amazonaws.kms#UnsupportedOperationException":
          throw await deserializeAws_json1_1UnsupportedOperationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetPublicKeyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetPublicKeyCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetPublicKeyResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetPublicKeyCommand = deserializeAws_json1_1GetPublicKeyCommand;
    var deserializeAws_json1_1GetPublicKeyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "DisabledException":
        case "com.amazonaws.kms#DisabledException":
          throw await deserializeAws_json1_1DisabledExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "InvalidGrantTokenException":
        case "com.amazonaws.kms#InvalidGrantTokenException":
          throw await deserializeAws_json1_1InvalidGrantTokenExceptionResponse(parsedOutput, context);
        case "InvalidKeyUsageException":
        case "com.amazonaws.kms#InvalidKeyUsageException":
          throw await deserializeAws_json1_1InvalidKeyUsageExceptionResponse(parsedOutput, context);
        case "KeyUnavailableException":
        case "com.amazonaws.kms#KeyUnavailableException":
          throw await deserializeAws_json1_1KeyUnavailableExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "UnsupportedOperationException":
        case "com.amazonaws.kms#UnsupportedOperationException":
          throw await deserializeAws_json1_1UnsupportedOperationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ImportKeyMaterialCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ImportKeyMaterialCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ImportKeyMaterialResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ImportKeyMaterialCommand = deserializeAws_json1_1ImportKeyMaterialCommand;
    var deserializeAws_json1_1ImportKeyMaterialCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "ExpiredImportTokenException":
        case "com.amazonaws.kms#ExpiredImportTokenException":
          throw await deserializeAws_json1_1ExpiredImportTokenExceptionResponse(parsedOutput, context);
        case "IncorrectKeyMaterialException":
        case "com.amazonaws.kms#IncorrectKeyMaterialException":
          throw await deserializeAws_json1_1IncorrectKeyMaterialExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "InvalidCiphertextException":
        case "com.amazonaws.kms#InvalidCiphertextException":
          throw await deserializeAws_json1_1InvalidCiphertextExceptionResponse(parsedOutput, context);
        case "InvalidImportTokenException":
        case "com.amazonaws.kms#InvalidImportTokenException":
          throw await deserializeAws_json1_1InvalidImportTokenExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "UnsupportedOperationException":
        case "com.amazonaws.kms#UnsupportedOperationException":
          throw await deserializeAws_json1_1UnsupportedOperationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ListAliasesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListAliasesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListAliasesResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListAliasesCommand = deserializeAws_json1_1ListAliasesCommand;
    var deserializeAws_json1_1ListAliasesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "InvalidMarkerException":
        case "com.amazonaws.kms#InvalidMarkerException":
          throw await deserializeAws_json1_1InvalidMarkerExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ListGrantsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListGrantsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListGrantsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListGrantsCommand = deserializeAws_json1_1ListGrantsCommand;
    var deserializeAws_json1_1ListGrantsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "InvalidGrantIdException":
        case "com.amazonaws.kms#InvalidGrantIdException":
          throw await deserializeAws_json1_1InvalidGrantIdExceptionResponse(parsedOutput, context);
        case "InvalidMarkerException":
        case "com.amazonaws.kms#InvalidMarkerException":
          throw await deserializeAws_json1_1InvalidMarkerExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ListKeyPoliciesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListKeyPoliciesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListKeyPoliciesResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListKeyPoliciesCommand = deserializeAws_json1_1ListKeyPoliciesCommand;
    var deserializeAws_json1_1ListKeyPoliciesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ListKeysCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListKeysCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListKeysResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListKeysCommand = deserializeAws_json1_1ListKeysCommand;
    var deserializeAws_json1_1ListKeysCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "InvalidMarkerException":
        case "com.amazonaws.kms#InvalidMarkerException":
          throw await deserializeAws_json1_1InvalidMarkerExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ListResourceTagsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListResourceTagsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListResourceTagsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListResourceTagsCommand = deserializeAws_json1_1ListResourceTagsCommand;
    var deserializeAws_json1_1ListResourceTagsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "InvalidMarkerException":
        case "com.amazonaws.kms#InvalidMarkerException":
          throw await deserializeAws_json1_1InvalidMarkerExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ListRetirableGrantsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListRetirableGrantsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListGrantsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListRetirableGrantsCommand = deserializeAws_json1_1ListRetirableGrantsCommand;
    var deserializeAws_json1_1ListRetirableGrantsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "InvalidMarkerException":
        case "com.amazonaws.kms#InvalidMarkerException":
          throw await deserializeAws_json1_1InvalidMarkerExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1PutKeyPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutKeyPolicyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1PutKeyPolicyCommand = deserializeAws_json1_1PutKeyPolicyCommand;
    var deserializeAws_json1_1PutKeyPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kms#LimitExceededException":
          throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.kms#MalformedPolicyDocumentException":
          throw await deserializeAws_json1_1MalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "UnsupportedOperationException":
        case "com.amazonaws.kms#UnsupportedOperationException":
          throw await deserializeAws_json1_1UnsupportedOperationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ReEncryptCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ReEncryptCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ReEncryptResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ReEncryptCommand = deserializeAws_json1_1ReEncryptCommand;
    var deserializeAws_json1_1ReEncryptCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "DisabledException":
        case "com.amazonaws.kms#DisabledException":
          throw await deserializeAws_json1_1DisabledExceptionResponse(parsedOutput, context);
        case "IncorrectKeyException":
        case "com.amazonaws.kms#IncorrectKeyException":
          throw await deserializeAws_json1_1IncorrectKeyExceptionResponse(parsedOutput, context);
        case "InvalidCiphertextException":
        case "com.amazonaws.kms#InvalidCiphertextException":
          throw await deserializeAws_json1_1InvalidCiphertextExceptionResponse(parsedOutput, context);
        case "InvalidGrantTokenException":
        case "com.amazonaws.kms#InvalidGrantTokenException":
          throw await deserializeAws_json1_1InvalidGrantTokenExceptionResponse(parsedOutput, context);
        case "InvalidKeyUsageException":
        case "com.amazonaws.kms#InvalidKeyUsageException":
          throw await deserializeAws_json1_1InvalidKeyUsageExceptionResponse(parsedOutput, context);
        case "KeyUnavailableException":
        case "com.amazonaws.kms#KeyUnavailableException":
          throw await deserializeAws_json1_1KeyUnavailableExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ReplicateKeyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ReplicateKeyCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ReplicateKeyResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ReplicateKeyCommand = deserializeAws_json1_1ReplicateKeyCommand;
    var deserializeAws_json1_1ReplicateKeyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.kms#AlreadyExistsException":
          throw await deserializeAws_json1_1AlreadyExistsExceptionResponse(parsedOutput, context);
        case "DisabledException":
        case "com.amazonaws.kms#DisabledException":
          throw await deserializeAws_json1_1DisabledExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kms#LimitExceededException":
          throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.kms#MalformedPolicyDocumentException":
          throw await deserializeAws_json1_1MalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "TagException":
        case "com.amazonaws.kms#TagException":
          throw await deserializeAws_json1_1TagExceptionResponse(parsedOutput, context);
        case "UnsupportedOperationException":
        case "com.amazonaws.kms#UnsupportedOperationException":
          throw await deserializeAws_json1_1UnsupportedOperationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1RetireGrantCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1RetireGrantCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1RetireGrantCommand = deserializeAws_json1_1RetireGrantCommand;
    var deserializeAws_json1_1RetireGrantCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "InvalidGrantIdException":
        case "com.amazonaws.kms#InvalidGrantIdException":
          throw await deserializeAws_json1_1InvalidGrantIdExceptionResponse(parsedOutput, context);
        case "InvalidGrantTokenException":
        case "com.amazonaws.kms#InvalidGrantTokenException":
          throw await deserializeAws_json1_1InvalidGrantTokenExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1RevokeGrantCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1RevokeGrantCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1RevokeGrantCommand = deserializeAws_json1_1RevokeGrantCommand;
    var deserializeAws_json1_1RevokeGrantCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "InvalidGrantIdException":
        case "com.amazonaws.kms#InvalidGrantIdException":
          throw await deserializeAws_json1_1InvalidGrantIdExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ScheduleKeyDeletionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ScheduleKeyDeletionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ScheduleKeyDeletionResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ScheduleKeyDeletionCommand = deserializeAws_json1_1ScheduleKeyDeletionCommand;
    var deserializeAws_json1_1ScheduleKeyDeletionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1SignCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1SignCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1SignResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1SignCommand = deserializeAws_json1_1SignCommand;
    var deserializeAws_json1_1SignCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "DisabledException":
        case "com.amazonaws.kms#DisabledException":
          throw await deserializeAws_json1_1DisabledExceptionResponse(parsedOutput, context);
        case "InvalidGrantTokenException":
        case "com.amazonaws.kms#InvalidGrantTokenException":
          throw await deserializeAws_json1_1InvalidGrantTokenExceptionResponse(parsedOutput, context);
        case "InvalidKeyUsageException":
        case "com.amazonaws.kms#InvalidKeyUsageException":
          throw await deserializeAws_json1_1InvalidKeyUsageExceptionResponse(parsedOutput, context);
        case "KeyUnavailableException":
        case "com.amazonaws.kms#KeyUnavailableException":
          throw await deserializeAws_json1_1KeyUnavailableExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1TagResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1TagResourceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1TagResourceCommand = deserializeAws_json1_1TagResourceCommand;
    var deserializeAws_json1_1TagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kms#LimitExceededException":
          throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "TagException":
        case "com.amazonaws.kms#TagException":
          throw await deserializeAws_json1_1TagExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1UntagResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UntagResourceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UntagResourceCommand = deserializeAws_json1_1UntagResourceCommand;
    var deserializeAws_json1_1UntagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "TagException":
        case "com.amazonaws.kms#TagException":
          throw await deserializeAws_json1_1TagExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1UpdateAliasCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateAliasCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateAliasCommand = deserializeAws_json1_1UpdateAliasCommand;
    var deserializeAws_json1_1UpdateAliasCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kms#LimitExceededException":
          throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1UpdateCustomKeyStoreCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateCustomKeyStoreCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateCustomKeyStoreResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateCustomKeyStoreCommand = deserializeAws_json1_1UpdateCustomKeyStoreCommand;
    var deserializeAws_json1_1UpdateCustomKeyStoreCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CloudHsmClusterInvalidConfigurationException":
        case "com.amazonaws.kms#CloudHsmClusterInvalidConfigurationException":
          throw await deserializeAws_json1_1CloudHsmClusterInvalidConfigurationExceptionResponse(parsedOutput, context);
        case "CloudHsmClusterNotActiveException":
        case "com.amazonaws.kms#CloudHsmClusterNotActiveException":
          throw await deserializeAws_json1_1CloudHsmClusterNotActiveExceptionResponse(parsedOutput, context);
        case "CloudHsmClusterNotFoundException":
        case "com.amazonaws.kms#CloudHsmClusterNotFoundException":
          throw await deserializeAws_json1_1CloudHsmClusterNotFoundExceptionResponse(parsedOutput, context);
        case "CloudHsmClusterNotRelatedException":
        case "com.amazonaws.kms#CloudHsmClusterNotRelatedException":
          throw await deserializeAws_json1_1CloudHsmClusterNotRelatedExceptionResponse(parsedOutput, context);
        case "CustomKeyStoreInvalidStateException":
        case "com.amazonaws.kms#CustomKeyStoreInvalidStateException":
          throw await deserializeAws_json1_1CustomKeyStoreInvalidStateExceptionResponse(parsedOutput, context);
        case "CustomKeyStoreNameInUseException":
        case "com.amazonaws.kms#CustomKeyStoreNameInUseException":
          throw await deserializeAws_json1_1CustomKeyStoreNameInUseExceptionResponse(parsedOutput, context);
        case "CustomKeyStoreNotFoundException":
        case "com.amazonaws.kms#CustomKeyStoreNotFoundException":
          throw await deserializeAws_json1_1CustomKeyStoreNotFoundExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1UpdateKeyDescriptionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateKeyDescriptionCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateKeyDescriptionCommand = deserializeAws_json1_1UpdateKeyDescriptionCommand;
    var deserializeAws_json1_1UpdateKeyDescriptionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1UpdatePrimaryRegionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdatePrimaryRegionCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdatePrimaryRegionCommand = deserializeAws_json1_1UpdatePrimaryRegionCommand;
    var deserializeAws_json1_1UpdatePrimaryRegionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DisabledException":
        case "com.amazonaws.kms#DisabledException":
          throw await deserializeAws_json1_1DisabledExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "UnsupportedOperationException":
        case "com.amazonaws.kms#UnsupportedOperationException":
          throw await deserializeAws_json1_1UnsupportedOperationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1VerifyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1VerifyCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1VerifyResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1VerifyCommand = deserializeAws_json1_1VerifyCommand;
    var deserializeAws_json1_1VerifyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
          throw await deserializeAws_json1_1DependencyTimeoutExceptionResponse(parsedOutput, context);
        case "DisabledException":
        case "com.amazonaws.kms#DisabledException":
          throw await deserializeAws_json1_1DisabledExceptionResponse(parsedOutput, context);
        case "InvalidGrantTokenException":
        case "com.amazonaws.kms#InvalidGrantTokenException":
          throw await deserializeAws_json1_1InvalidGrantTokenExceptionResponse(parsedOutput, context);
        case "InvalidKeyUsageException":
        case "com.amazonaws.kms#InvalidKeyUsageException":
          throw await deserializeAws_json1_1InvalidKeyUsageExceptionResponse(parsedOutput, context);
        case "KeyUnavailableException":
        case "com.amazonaws.kms#KeyUnavailableException":
          throw await deserializeAws_json1_1KeyUnavailableExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidSignatureException":
        case "com.amazonaws.kms#KMSInvalidSignatureException":
          throw await deserializeAws_json1_1KMSInvalidSignatureExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1VerifyMacCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1VerifyMacCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1VerifyMacResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1VerifyMacCommand = deserializeAws_json1_1VerifyMacCommand;
    var deserializeAws_json1_1VerifyMacCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DisabledException":
        case "com.amazonaws.kms#DisabledException":
          throw await deserializeAws_json1_1DisabledExceptionResponse(parsedOutput, context);
        case "InvalidGrantTokenException":
        case "com.amazonaws.kms#InvalidGrantTokenException":
          throw await deserializeAws_json1_1InvalidGrantTokenExceptionResponse(parsedOutput, context);
        case "InvalidKeyUsageException":
        case "com.amazonaws.kms#InvalidKeyUsageException":
          throw await deserializeAws_json1_1InvalidKeyUsageExceptionResponse(parsedOutput, context);
        case "KeyUnavailableException":
        case "com.amazonaws.kms#KeyUnavailableException":
          throw await deserializeAws_json1_1KeyUnavailableExceptionResponse(parsedOutput, context);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
          throw await deserializeAws_json1_1KMSInternalExceptionResponse(parsedOutput, context);
        case "KMSInvalidMacException":
        case "com.amazonaws.kms#KMSInvalidMacException":
          throw await deserializeAws_json1_1KMSInvalidMacExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
          throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
          throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new KMSServiceException_1.KMSServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1AlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AlreadyExistsException(body, context);
      const exception = new models_0_1.AlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1CloudHsmClusterInUseExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1CloudHsmClusterInUseException(body, context);
      const exception = new models_0_1.CloudHsmClusterInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1CloudHsmClusterInvalidConfigurationExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1CloudHsmClusterInvalidConfigurationException(body, context);
      const exception = new models_0_1.CloudHsmClusterInvalidConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1CloudHsmClusterNotActiveExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1CloudHsmClusterNotActiveException(body, context);
      const exception = new models_0_1.CloudHsmClusterNotActiveException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1CloudHsmClusterNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1CloudHsmClusterNotFoundException(body, context);
      const exception = new models_0_1.CloudHsmClusterNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1CloudHsmClusterNotRelatedExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1CloudHsmClusterNotRelatedException(body, context);
      const exception = new models_0_1.CloudHsmClusterNotRelatedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1CustomKeyStoreHasCMKsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1CustomKeyStoreHasCMKsException(body, context);
      const exception = new models_0_1.CustomKeyStoreHasCMKsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1CustomKeyStoreInvalidStateExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1CustomKeyStoreInvalidStateException(body, context);
      const exception = new models_0_1.CustomKeyStoreInvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1CustomKeyStoreNameInUseExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1CustomKeyStoreNameInUseException(body, context);
      const exception = new models_0_1.CustomKeyStoreNameInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1CustomKeyStoreNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1CustomKeyStoreNotFoundException(body, context);
      const exception = new models_0_1.CustomKeyStoreNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DependencyTimeoutExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DependencyTimeoutException(body, context);
      const exception = new models_0_1.DependencyTimeoutException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DisabledExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DisabledException(body, context);
      const exception = new models_0_1.DisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ExpiredImportTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ExpiredImportTokenException(body, context);
      const exception = new models_0_1.ExpiredImportTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1IncorrectKeyExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1IncorrectKeyException(body, context);
      const exception = new models_0_1.IncorrectKeyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1IncorrectKeyMaterialExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1IncorrectKeyMaterialException(body, context);
      const exception = new models_0_1.IncorrectKeyMaterialException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1IncorrectTrustAnchorExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1IncorrectTrustAnchorException(body, context);
      const exception = new models_0_1.IncorrectTrustAnchorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidAliasNameExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAliasNameException(body, context);
      const exception = new models_0_1.InvalidAliasNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidArnExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidArnException(body, context);
      const exception = new models_0_1.InvalidArnException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidCiphertextExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidCiphertextException(body, context);
      const exception = new models_0_1.InvalidCiphertextException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidGrantIdExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidGrantIdException(body, context);
      const exception = new models_0_1.InvalidGrantIdException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidGrantTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidGrantTokenException(body, context);
      const exception = new models_0_1.InvalidGrantTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidImportTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidImportTokenException(body, context);
      const exception = new models_0_1.InvalidImportTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidKeyUsageExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidKeyUsageException(body, context);
      const exception = new models_0_1.InvalidKeyUsageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidMarkerExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidMarkerException(body, context);
      const exception = new models_0_1.InvalidMarkerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1KeyUnavailableExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1KeyUnavailableException(body, context);
      const exception = new models_0_1.KeyUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1KMSInternalExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1KMSInternalException(body, context);
      const exception = new models_0_1.KMSInternalException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1KMSInvalidMacExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1KMSInvalidMacException(body, context);
      const exception = new models_0_1.KMSInvalidMacException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1KMSInvalidSignatureExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1KMSInvalidSignatureException(body, context);
      const exception = new models_0_1.KMSInvalidSignatureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1KMSInvalidStateExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1KMSInvalidStateException(body, context);
      const exception = new models_0_1.KMSInvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1LimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1LimitExceededException(body, context);
      const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1MalformedPolicyDocumentExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1MalformedPolicyDocumentException(body, context);
      const exception = new models_0_1.MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1NotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1NotFoundException(body, context);
      const exception = new models_0_1.NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1TagExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1TagException(body, context);
      const exception = new models_0_1.TagException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1UnsupportedOperationExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1UnsupportedOperationException(body, context);
      const exception = new models_0_1.UnsupportedOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var serializeAws_json1_1CancelKeyDeletionRequest = (input, context) => {
      return {
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId }
      };
    };
    var serializeAws_json1_1ConnectCustomKeyStoreRequest = (input, context) => {
      return {
        ...input.CustomKeyStoreId !== void 0 && input.CustomKeyStoreId !== null && { CustomKeyStoreId: input.CustomKeyStoreId }
      };
    };
    var serializeAws_json1_1CreateAliasRequest = (input, context) => {
      return {
        ...input.AliasName !== void 0 && input.AliasName !== null && { AliasName: input.AliasName },
        ...input.TargetKeyId !== void 0 && input.TargetKeyId !== null && { TargetKeyId: input.TargetKeyId }
      };
    };
    var serializeAws_json1_1CreateCustomKeyStoreRequest = (input, context) => {
      return {
        ...input.CloudHsmClusterId !== void 0 && input.CloudHsmClusterId !== null && { CloudHsmClusterId: input.CloudHsmClusterId },
        ...input.CustomKeyStoreName !== void 0 && input.CustomKeyStoreName !== null && { CustomKeyStoreName: input.CustomKeyStoreName },
        ...input.KeyStorePassword !== void 0 && input.KeyStorePassword !== null && { KeyStorePassword: input.KeyStorePassword },
        ...input.TrustAnchorCertificate !== void 0 && input.TrustAnchorCertificate !== null && { TrustAnchorCertificate: input.TrustAnchorCertificate }
      };
    };
    var serializeAws_json1_1CreateGrantRequest = (input, context) => {
      return {
        ...input.Constraints !== void 0 && input.Constraints !== null && { Constraints: serializeAws_json1_1GrantConstraints(input.Constraints, context) },
        ...input.GrantTokens !== void 0 && input.GrantTokens !== null && { GrantTokens: serializeAws_json1_1GrantTokenList(input.GrantTokens, context) },
        ...input.GranteePrincipal !== void 0 && input.GranteePrincipal !== null && { GranteePrincipal: input.GranteePrincipal },
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.Operations !== void 0 && input.Operations !== null && { Operations: serializeAws_json1_1GrantOperationList(input.Operations, context) },
        ...input.RetiringPrincipal !== void 0 && input.RetiringPrincipal !== null && { RetiringPrincipal: input.RetiringPrincipal }
      };
    };
    var serializeAws_json1_1CreateKeyRequest = (input, context) => {
      return {
        ...input.BypassPolicyLockoutSafetyCheck !== void 0 && input.BypassPolicyLockoutSafetyCheck !== null && {
          BypassPolicyLockoutSafetyCheck: input.BypassPolicyLockoutSafetyCheck
        },
        ...input.CustomKeyStoreId !== void 0 && input.CustomKeyStoreId !== null && { CustomKeyStoreId: input.CustomKeyStoreId },
        ...input.CustomerMasterKeySpec !== void 0 && input.CustomerMasterKeySpec !== null && { CustomerMasterKeySpec: input.CustomerMasterKeySpec },
        ...input.Description !== void 0 && input.Description !== null && { Description: input.Description },
        ...input.KeySpec !== void 0 && input.KeySpec !== null && { KeySpec: input.KeySpec },
        ...input.KeyUsage !== void 0 && input.KeyUsage !== null && { KeyUsage: input.KeyUsage },
        ...input.MultiRegion !== void 0 && input.MultiRegion !== null && { MultiRegion: input.MultiRegion },
        ...input.Origin !== void 0 && input.Origin !== null && { Origin: input.Origin },
        ...input.Policy !== void 0 && input.Policy !== null && { Policy: input.Policy },
        ...input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }
      };
    };
    var serializeAws_json1_1DecryptRequest = (input, context) => {
      return {
        ...input.CiphertextBlob !== void 0 && input.CiphertextBlob !== null && { CiphertextBlob: context.base64Encoder(input.CiphertextBlob) },
        ...input.EncryptionAlgorithm !== void 0 && input.EncryptionAlgorithm !== null && { EncryptionAlgorithm: input.EncryptionAlgorithm },
        ...input.EncryptionContext !== void 0 && input.EncryptionContext !== null && {
          EncryptionContext: serializeAws_json1_1EncryptionContextType(input.EncryptionContext, context)
        },
        ...input.GrantTokens !== void 0 && input.GrantTokens !== null && { GrantTokens: serializeAws_json1_1GrantTokenList(input.GrantTokens, context) },
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId }
      };
    };
    var serializeAws_json1_1DeleteAliasRequest = (input, context) => {
      return {
        ...input.AliasName !== void 0 && input.AliasName !== null && { AliasName: input.AliasName }
      };
    };
    var serializeAws_json1_1DeleteCustomKeyStoreRequest = (input, context) => {
      return {
        ...input.CustomKeyStoreId !== void 0 && input.CustomKeyStoreId !== null && { CustomKeyStoreId: input.CustomKeyStoreId }
      };
    };
    var serializeAws_json1_1DeleteImportedKeyMaterialRequest = (input, context) => {
      return {
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId }
      };
    };
    var serializeAws_json1_1DescribeCustomKeyStoresRequest = (input, context) => {
      return {
        ...input.CustomKeyStoreId !== void 0 && input.CustomKeyStoreId !== null && { CustomKeyStoreId: input.CustomKeyStoreId },
        ...input.CustomKeyStoreName !== void 0 && input.CustomKeyStoreName !== null && { CustomKeyStoreName: input.CustomKeyStoreName },
        ...input.Limit !== void 0 && input.Limit !== null && { Limit: input.Limit },
        ...input.Marker !== void 0 && input.Marker !== null && { Marker: input.Marker }
      };
    };
    var serializeAws_json1_1DescribeKeyRequest = (input, context) => {
      return {
        ...input.GrantTokens !== void 0 && input.GrantTokens !== null && { GrantTokens: serializeAws_json1_1GrantTokenList(input.GrantTokens, context) },
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId }
      };
    };
    var serializeAws_json1_1DisableKeyRequest = (input, context) => {
      return {
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId }
      };
    };
    var serializeAws_json1_1DisableKeyRotationRequest = (input, context) => {
      return {
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId }
      };
    };
    var serializeAws_json1_1DisconnectCustomKeyStoreRequest = (input, context) => {
      return {
        ...input.CustomKeyStoreId !== void 0 && input.CustomKeyStoreId !== null && { CustomKeyStoreId: input.CustomKeyStoreId }
      };
    };
    var serializeAws_json1_1EnableKeyRequest = (input, context) => {
      return {
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId }
      };
    };
    var serializeAws_json1_1EnableKeyRotationRequest = (input, context) => {
      return {
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId }
      };
    };
    var serializeAws_json1_1EncryptionContextType = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: value
        };
      }, {});
    };
    var serializeAws_json1_1EncryptRequest = (input, context) => {
      return {
        ...input.EncryptionAlgorithm !== void 0 && input.EncryptionAlgorithm !== null && { EncryptionAlgorithm: input.EncryptionAlgorithm },
        ...input.EncryptionContext !== void 0 && input.EncryptionContext !== null && {
          EncryptionContext: serializeAws_json1_1EncryptionContextType(input.EncryptionContext, context)
        },
        ...input.GrantTokens !== void 0 && input.GrantTokens !== null && { GrantTokens: serializeAws_json1_1GrantTokenList(input.GrantTokens, context) },
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.Plaintext !== void 0 && input.Plaintext !== null && { Plaintext: context.base64Encoder(input.Plaintext) }
      };
    };
    var serializeAws_json1_1GenerateDataKeyPairRequest = (input, context) => {
      return {
        ...input.EncryptionContext !== void 0 && input.EncryptionContext !== null && {
          EncryptionContext: serializeAws_json1_1EncryptionContextType(input.EncryptionContext, context)
        },
        ...input.GrantTokens !== void 0 && input.GrantTokens !== null && { GrantTokens: serializeAws_json1_1GrantTokenList(input.GrantTokens, context) },
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.KeyPairSpec !== void 0 && input.KeyPairSpec !== null && { KeyPairSpec: input.KeyPairSpec }
      };
    };
    var serializeAws_json1_1GenerateDataKeyPairWithoutPlaintextRequest = (input, context) => {
      return {
        ...input.EncryptionContext !== void 0 && input.EncryptionContext !== null && {
          EncryptionContext: serializeAws_json1_1EncryptionContextType(input.EncryptionContext, context)
        },
        ...input.GrantTokens !== void 0 && input.GrantTokens !== null && { GrantTokens: serializeAws_json1_1GrantTokenList(input.GrantTokens, context) },
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.KeyPairSpec !== void 0 && input.KeyPairSpec !== null && { KeyPairSpec: input.KeyPairSpec }
      };
    };
    var serializeAws_json1_1GenerateDataKeyRequest = (input, context) => {
      return {
        ...input.EncryptionContext !== void 0 && input.EncryptionContext !== null && {
          EncryptionContext: serializeAws_json1_1EncryptionContextType(input.EncryptionContext, context)
        },
        ...input.GrantTokens !== void 0 && input.GrantTokens !== null && { GrantTokens: serializeAws_json1_1GrantTokenList(input.GrantTokens, context) },
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.KeySpec !== void 0 && input.KeySpec !== null && { KeySpec: input.KeySpec },
        ...input.NumberOfBytes !== void 0 && input.NumberOfBytes !== null && { NumberOfBytes: input.NumberOfBytes }
      };
    };
    var serializeAws_json1_1GenerateDataKeyWithoutPlaintextRequest = (input, context) => {
      return {
        ...input.EncryptionContext !== void 0 && input.EncryptionContext !== null && {
          EncryptionContext: serializeAws_json1_1EncryptionContextType(input.EncryptionContext, context)
        },
        ...input.GrantTokens !== void 0 && input.GrantTokens !== null && { GrantTokens: serializeAws_json1_1GrantTokenList(input.GrantTokens, context) },
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.KeySpec !== void 0 && input.KeySpec !== null && { KeySpec: input.KeySpec },
        ...input.NumberOfBytes !== void 0 && input.NumberOfBytes !== null && { NumberOfBytes: input.NumberOfBytes }
      };
    };
    var serializeAws_json1_1GenerateMacRequest = (input, context) => {
      return {
        ...input.GrantTokens !== void 0 && input.GrantTokens !== null && { GrantTokens: serializeAws_json1_1GrantTokenList(input.GrantTokens, context) },
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.MacAlgorithm !== void 0 && input.MacAlgorithm !== null && { MacAlgorithm: input.MacAlgorithm },
        ...input.Message !== void 0 && input.Message !== null && { Message: context.base64Encoder(input.Message) }
      };
    };
    var serializeAws_json1_1GenerateRandomRequest = (input, context) => {
      return {
        ...input.CustomKeyStoreId !== void 0 && input.CustomKeyStoreId !== null && { CustomKeyStoreId: input.CustomKeyStoreId },
        ...input.NumberOfBytes !== void 0 && input.NumberOfBytes !== null && { NumberOfBytes: input.NumberOfBytes }
      };
    };
    var serializeAws_json1_1GetKeyPolicyRequest = (input, context) => {
      return {
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.PolicyName !== void 0 && input.PolicyName !== null && { PolicyName: input.PolicyName }
      };
    };
    var serializeAws_json1_1GetKeyRotationStatusRequest = (input, context) => {
      return {
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId }
      };
    };
    var serializeAws_json1_1GetParametersForImportRequest = (input, context) => {
      return {
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.WrappingAlgorithm !== void 0 && input.WrappingAlgorithm !== null && { WrappingAlgorithm: input.WrappingAlgorithm },
        ...input.WrappingKeySpec !== void 0 && input.WrappingKeySpec !== null && { WrappingKeySpec: input.WrappingKeySpec }
      };
    };
    var serializeAws_json1_1GetPublicKeyRequest = (input, context) => {
      return {
        ...input.GrantTokens !== void 0 && input.GrantTokens !== null && { GrantTokens: serializeAws_json1_1GrantTokenList(input.GrantTokens, context) },
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId }
      };
    };
    var serializeAws_json1_1GrantConstraints = (input, context) => {
      return {
        ...input.EncryptionContextEquals !== void 0 && input.EncryptionContextEquals !== null && {
          EncryptionContextEquals: serializeAws_json1_1EncryptionContextType(input.EncryptionContextEquals, context)
        },
        ...input.EncryptionContextSubset !== void 0 && input.EncryptionContextSubset !== null && {
          EncryptionContextSubset: serializeAws_json1_1EncryptionContextType(input.EncryptionContextSubset, context)
        }
      };
    };
    var serializeAws_json1_1GrantOperationList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1GrantTokenList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1ImportKeyMaterialRequest = (input, context) => {
      return {
        ...input.EncryptedKeyMaterial !== void 0 && input.EncryptedKeyMaterial !== null && {
          EncryptedKeyMaterial: context.base64Encoder(input.EncryptedKeyMaterial)
        },
        ...input.ExpirationModel !== void 0 && input.ExpirationModel !== null && { ExpirationModel: input.ExpirationModel },
        ...input.ImportToken !== void 0 && input.ImportToken !== null && { ImportToken: context.base64Encoder(input.ImportToken) },
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.ValidTo !== void 0 && input.ValidTo !== null && { ValidTo: Math.round(input.ValidTo.getTime() / 1e3) }
      };
    };
    var serializeAws_json1_1ListAliasesRequest = (input, context) => {
      return {
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.Limit !== void 0 && input.Limit !== null && { Limit: input.Limit },
        ...input.Marker !== void 0 && input.Marker !== null && { Marker: input.Marker }
      };
    };
    var serializeAws_json1_1ListGrantsRequest = (input, context) => {
      return {
        ...input.GrantId !== void 0 && input.GrantId !== null && { GrantId: input.GrantId },
        ...input.GranteePrincipal !== void 0 && input.GranteePrincipal !== null && { GranteePrincipal: input.GranteePrincipal },
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.Limit !== void 0 && input.Limit !== null && { Limit: input.Limit },
        ...input.Marker !== void 0 && input.Marker !== null && { Marker: input.Marker }
      };
    };
    var serializeAws_json1_1ListKeyPoliciesRequest = (input, context) => {
      return {
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.Limit !== void 0 && input.Limit !== null && { Limit: input.Limit },
        ...input.Marker !== void 0 && input.Marker !== null && { Marker: input.Marker }
      };
    };
    var serializeAws_json1_1ListKeysRequest = (input, context) => {
      return {
        ...input.Limit !== void 0 && input.Limit !== null && { Limit: input.Limit },
        ...input.Marker !== void 0 && input.Marker !== null && { Marker: input.Marker }
      };
    };
    var serializeAws_json1_1ListResourceTagsRequest = (input, context) => {
      return {
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.Limit !== void 0 && input.Limit !== null && { Limit: input.Limit },
        ...input.Marker !== void 0 && input.Marker !== null && { Marker: input.Marker }
      };
    };
    var serializeAws_json1_1ListRetirableGrantsRequest = (input, context) => {
      return {
        ...input.Limit !== void 0 && input.Limit !== null && { Limit: input.Limit },
        ...input.Marker !== void 0 && input.Marker !== null && { Marker: input.Marker },
        ...input.RetiringPrincipal !== void 0 && input.RetiringPrincipal !== null && { RetiringPrincipal: input.RetiringPrincipal }
      };
    };
    var serializeAws_json1_1PutKeyPolicyRequest = (input, context) => {
      return {
        ...input.BypassPolicyLockoutSafetyCheck !== void 0 && input.BypassPolicyLockoutSafetyCheck !== null && {
          BypassPolicyLockoutSafetyCheck: input.BypassPolicyLockoutSafetyCheck
        },
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.Policy !== void 0 && input.Policy !== null && { Policy: input.Policy },
        ...input.PolicyName !== void 0 && input.PolicyName !== null && { PolicyName: input.PolicyName }
      };
    };
    var serializeAws_json1_1ReEncryptRequest = (input, context) => {
      return {
        ...input.CiphertextBlob !== void 0 && input.CiphertextBlob !== null && { CiphertextBlob: context.base64Encoder(input.CiphertextBlob) },
        ...input.DestinationEncryptionAlgorithm !== void 0 && input.DestinationEncryptionAlgorithm !== null && {
          DestinationEncryptionAlgorithm: input.DestinationEncryptionAlgorithm
        },
        ...input.DestinationEncryptionContext !== void 0 && input.DestinationEncryptionContext !== null && {
          DestinationEncryptionContext: serializeAws_json1_1EncryptionContextType(input.DestinationEncryptionContext, context)
        },
        ...input.DestinationKeyId !== void 0 && input.DestinationKeyId !== null && { DestinationKeyId: input.DestinationKeyId },
        ...input.GrantTokens !== void 0 && input.GrantTokens !== null && { GrantTokens: serializeAws_json1_1GrantTokenList(input.GrantTokens, context) },
        ...input.SourceEncryptionAlgorithm !== void 0 && input.SourceEncryptionAlgorithm !== null && { SourceEncryptionAlgorithm: input.SourceEncryptionAlgorithm },
        ...input.SourceEncryptionContext !== void 0 && input.SourceEncryptionContext !== null && {
          SourceEncryptionContext: serializeAws_json1_1EncryptionContextType(input.SourceEncryptionContext, context)
        },
        ...input.SourceKeyId !== void 0 && input.SourceKeyId !== null && { SourceKeyId: input.SourceKeyId }
      };
    };
    var serializeAws_json1_1ReplicateKeyRequest = (input, context) => {
      return {
        ...input.BypassPolicyLockoutSafetyCheck !== void 0 && input.BypassPolicyLockoutSafetyCheck !== null && {
          BypassPolicyLockoutSafetyCheck: input.BypassPolicyLockoutSafetyCheck
        },
        ...input.Description !== void 0 && input.Description !== null && { Description: input.Description },
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.Policy !== void 0 && input.Policy !== null && { Policy: input.Policy },
        ...input.ReplicaRegion !== void 0 && input.ReplicaRegion !== null && { ReplicaRegion: input.ReplicaRegion },
        ...input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }
      };
    };
    var serializeAws_json1_1RetireGrantRequest = (input, context) => {
      return {
        ...input.GrantId !== void 0 && input.GrantId !== null && { GrantId: input.GrantId },
        ...input.GrantToken !== void 0 && input.GrantToken !== null && { GrantToken: input.GrantToken },
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId }
      };
    };
    var serializeAws_json1_1RevokeGrantRequest = (input, context) => {
      return {
        ...input.GrantId !== void 0 && input.GrantId !== null && { GrantId: input.GrantId },
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId }
      };
    };
    var serializeAws_json1_1ScheduleKeyDeletionRequest = (input, context) => {
      return {
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.PendingWindowInDays !== void 0 && input.PendingWindowInDays !== null && { PendingWindowInDays: input.PendingWindowInDays }
      };
    };
    var serializeAws_json1_1SignRequest = (input, context) => {
      return {
        ...input.GrantTokens !== void 0 && input.GrantTokens !== null && { GrantTokens: serializeAws_json1_1GrantTokenList(input.GrantTokens, context) },
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.Message !== void 0 && input.Message !== null && { Message: context.base64Encoder(input.Message) },
        ...input.MessageType !== void 0 && input.MessageType !== null && { MessageType: input.MessageType },
        ...input.SigningAlgorithm !== void 0 && input.SigningAlgorithm !== null && { SigningAlgorithm: input.SigningAlgorithm }
      };
    };
    var serializeAws_json1_1Tag = (input, context) => {
      return {
        ...input.TagKey !== void 0 && input.TagKey !== null && { TagKey: input.TagKey },
        ...input.TagValue !== void 0 && input.TagValue !== null && { TagValue: input.TagValue }
      };
    };
    var serializeAws_json1_1TagKeyList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1TagList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1Tag(entry, context);
      });
    };
    var serializeAws_json1_1TagResourceRequest = (input, context) => {
      return {
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }
      };
    };
    var serializeAws_json1_1UntagResourceRequest = (input, context) => {
      return {
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.TagKeys !== void 0 && input.TagKeys !== null && { TagKeys: serializeAws_json1_1TagKeyList(input.TagKeys, context) }
      };
    };
    var serializeAws_json1_1UpdateAliasRequest = (input, context) => {
      return {
        ...input.AliasName !== void 0 && input.AliasName !== null && { AliasName: input.AliasName },
        ...input.TargetKeyId !== void 0 && input.TargetKeyId !== null && { TargetKeyId: input.TargetKeyId }
      };
    };
    var serializeAws_json1_1UpdateCustomKeyStoreRequest = (input, context) => {
      return {
        ...input.CloudHsmClusterId !== void 0 && input.CloudHsmClusterId !== null && { CloudHsmClusterId: input.CloudHsmClusterId },
        ...input.CustomKeyStoreId !== void 0 && input.CustomKeyStoreId !== null && { CustomKeyStoreId: input.CustomKeyStoreId },
        ...input.KeyStorePassword !== void 0 && input.KeyStorePassword !== null && { KeyStorePassword: input.KeyStorePassword },
        ...input.NewCustomKeyStoreName !== void 0 && input.NewCustomKeyStoreName !== null && { NewCustomKeyStoreName: input.NewCustomKeyStoreName }
      };
    };
    var serializeAws_json1_1UpdateKeyDescriptionRequest = (input, context) => {
      return {
        ...input.Description !== void 0 && input.Description !== null && { Description: input.Description },
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId }
      };
    };
    var serializeAws_json1_1UpdatePrimaryRegionRequest = (input, context) => {
      return {
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.PrimaryRegion !== void 0 && input.PrimaryRegion !== null && { PrimaryRegion: input.PrimaryRegion }
      };
    };
    var serializeAws_json1_1VerifyMacRequest = (input, context) => {
      return {
        ...input.GrantTokens !== void 0 && input.GrantTokens !== null && { GrantTokens: serializeAws_json1_1GrantTokenList(input.GrantTokens, context) },
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.Mac !== void 0 && input.Mac !== null && { Mac: context.base64Encoder(input.Mac) },
        ...input.MacAlgorithm !== void 0 && input.MacAlgorithm !== null && { MacAlgorithm: input.MacAlgorithm },
        ...input.Message !== void 0 && input.Message !== null && { Message: context.base64Encoder(input.Message) }
      };
    };
    var serializeAws_json1_1VerifyRequest = (input, context) => {
      return {
        ...input.GrantTokens !== void 0 && input.GrantTokens !== null && { GrantTokens: serializeAws_json1_1GrantTokenList(input.GrantTokens, context) },
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.Message !== void 0 && input.Message !== null && { Message: context.base64Encoder(input.Message) },
        ...input.MessageType !== void 0 && input.MessageType !== null && { MessageType: input.MessageType },
        ...input.Signature !== void 0 && input.Signature !== null && { Signature: context.base64Encoder(input.Signature) },
        ...input.SigningAlgorithm !== void 0 && input.SigningAlgorithm !== null && { SigningAlgorithm: input.SigningAlgorithm }
      };
    };
    var deserializeAws_json1_1AliasList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AliasListEntry(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1AliasListEntry = (output, context) => {
      return {
        AliasArn: (0, smithy_client_1.expectString)(output.AliasArn),
        AliasName: (0, smithy_client_1.expectString)(output.AliasName),
        CreationDate: output.CreationDate !== void 0 && output.CreationDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreationDate))) : void 0,
        LastUpdatedDate: output.LastUpdatedDate !== void 0 && output.LastUpdatedDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdatedDate))) : void 0,
        TargetKeyId: (0, smithy_client_1.expectString)(output.TargetKeyId)
      };
    };
    var deserializeAws_json1_1AlreadyExistsException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1CancelKeyDeletionResponse = (output, context) => {
      return {
        KeyId: (0, smithy_client_1.expectString)(output.KeyId)
      };
    };
    var deserializeAws_json1_1CloudHsmClusterInUseException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1CloudHsmClusterInvalidConfigurationException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1CloudHsmClusterNotActiveException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1CloudHsmClusterNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1CloudHsmClusterNotRelatedException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ConnectCustomKeyStoreResponse = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1CreateCustomKeyStoreResponse = (output, context) => {
      return {
        CustomKeyStoreId: (0, smithy_client_1.expectString)(output.CustomKeyStoreId)
      };
    };
    var deserializeAws_json1_1CreateGrantResponse = (output, context) => {
      return {
        GrantId: (0, smithy_client_1.expectString)(output.GrantId),
        GrantToken: (0, smithy_client_1.expectString)(output.GrantToken)
      };
    };
    var deserializeAws_json1_1CreateKeyResponse = (output, context) => {
      return {
        KeyMetadata: output.KeyMetadata !== void 0 && output.KeyMetadata !== null ? deserializeAws_json1_1KeyMetadata(output.KeyMetadata, context) : void 0
      };
    };
    var deserializeAws_json1_1CustomKeyStoreHasCMKsException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1CustomKeyStoreInvalidStateException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1CustomKeyStoreNameInUseException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1CustomKeyStoreNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1CustomKeyStoresList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1CustomKeyStoresListEntry(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1CustomKeyStoresListEntry = (output, context) => {
      return {
        CloudHsmClusterId: (0, smithy_client_1.expectString)(output.CloudHsmClusterId),
        ConnectionErrorCode: (0, smithy_client_1.expectString)(output.ConnectionErrorCode),
        ConnectionState: (0, smithy_client_1.expectString)(output.ConnectionState),
        CreationDate: output.CreationDate !== void 0 && output.CreationDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreationDate))) : void 0,
        CustomKeyStoreId: (0, smithy_client_1.expectString)(output.CustomKeyStoreId),
        CustomKeyStoreName: (0, smithy_client_1.expectString)(output.CustomKeyStoreName),
        TrustAnchorCertificate: (0, smithy_client_1.expectString)(output.TrustAnchorCertificate)
      };
    };
    var deserializeAws_json1_1DecryptResponse = (output, context) => {
      return {
        EncryptionAlgorithm: (0, smithy_client_1.expectString)(output.EncryptionAlgorithm),
        KeyId: (0, smithy_client_1.expectString)(output.KeyId),
        Plaintext: output.Plaintext !== void 0 && output.Plaintext !== null ? context.base64Decoder(output.Plaintext) : void 0
      };
    };
    var deserializeAws_json1_1DeleteCustomKeyStoreResponse = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1DependencyTimeoutException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1DescribeCustomKeyStoresResponse = (output, context) => {
      return {
        CustomKeyStores: output.CustomKeyStores !== void 0 && output.CustomKeyStores !== null ? deserializeAws_json1_1CustomKeyStoresList(output.CustomKeyStores, context) : void 0,
        NextMarker: (0, smithy_client_1.expectString)(output.NextMarker),
        Truncated: (0, smithy_client_1.expectBoolean)(output.Truncated)
      };
    };
    var deserializeAws_json1_1DescribeKeyResponse = (output, context) => {
      return {
        KeyMetadata: output.KeyMetadata !== void 0 && output.KeyMetadata !== null ? deserializeAws_json1_1KeyMetadata(output.KeyMetadata, context) : void 0
      };
    };
    var deserializeAws_json1_1DisabledException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1DisconnectCustomKeyStoreResponse = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1EncryptionAlgorithmSpecList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1EncryptionContextType = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: (0, smithy_client_1.expectString)(value)
        };
      }, {});
    };
    var deserializeAws_json1_1EncryptResponse = (output, context) => {
      return {
        CiphertextBlob: output.CiphertextBlob !== void 0 && output.CiphertextBlob !== null ? context.base64Decoder(output.CiphertextBlob) : void 0,
        EncryptionAlgorithm: (0, smithy_client_1.expectString)(output.EncryptionAlgorithm),
        KeyId: (0, smithy_client_1.expectString)(output.KeyId)
      };
    };
    var deserializeAws_json1_1ExpiredImportTokenException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1GenerateDataKeyPairResponse = (output, context) => {
      return {
        KeyId: (0, smithy_client_1.expectString)(output.KeyId),
        KeyPairSpec: (0, smithy_client_1.expectString)(output.KeyPairSpec),
        PrivateKeyCiphertextBlob: output.PrivateKeyCiphertextBlob !== void 0 && output.PrivateKeyCiphertextBlob !== null ? context.base64Decoder(output.PrivateKeyCiphertextBlob) : void 0,
        PrivateKeyPlaintext: output.PrivateKeyPlaintext !== void 0 && output.PrivateKeyPlaintext !== null ? context.base64Decoder(output.PrivateKeyPlaintext) : void 0,
        PublicKey: output.PublicKey !== void 0 && output.PublicKey !== null ? context.base64Decoder(output.PublicKey) : void 0
      };
    };
    var deserializeAws_json1_1GenerateDataKeyPairWithoutPlaintextResponse = (output, context) => {
      return {
        KeyId: (0, smithy_client_1.expectString)(output.KeyId),
        KeyPairSpec: (0, smithy_client_1.expectString)(output.KeyPairSpec),
        PrivateKeyCiphertextBlob: output.PrivateKeyCiphertextBlob !== void 0 && output.PrivateKeyCiphertextBlob !== null ? context.base64Decoder(output.PrivateKeyCiphertextBlob) : void 0,
        PublicKey: output.PublicKey !== void 0 && output.PublicKey !== null ? context.base64Decoder(output.PublicKey) : void 0
      };
    };
    var deserializeAws_json1_1GenerateDataKeyResponse = (output, context) => {
      return {
        CiphertextBlob: output.CiphertextBlob !== void 0 && output.CiphertextBlob !== null ? context.base64Decoder(output.CiphertextBlob) : void 0,
        KeyId: (0, smithy_client_1.expectString)(output.KeyId),
        Plaintext: output.Plaintext !== void 0 && output.Plaintext !== null ? context.base64Decoder(output.Plaintext) : void 0
      };
    };
    var deserializeAws_json1_1GenerateDataKeyWithoutPlaintextResponse = (output, context) => {
      return {
        CiphertextBlob: output.CiphertextBlob !== void 0 && output.CiphertextBlob !== null ? context.base64Decoder(output.CiphertextBlob) : void 0,
        KeyId: (0, smithy_client_1.expectString)(output.KeyId)
      };
    };
    var deserializeAws_json1_1GenerateMacResponse = (output, context) => {
      return {
        KeyId: (0, smithy_client_1.expectString)(output.KeyId),
        Mac: output.Mac !== void 0 && output.Mac !== null ? context.base64Decoder(output.Mac) : void 0,
        MacAlgorithm: (0, smithy_client_1.expectString)(output.MacAlgorithm)
      };
    };
    var deserializeAws_json1_1GenerateRandomResponse = (output, context) => {
      return {
        Plaintext: output.Plaintext !== void 0 && output.Plaintext !== null ? context.base64Decoder(output.Plaintext) : void 0
      };
    };
    var deserializeAws_json1_1GetKeyPolicyResponse = (output, context) => {
      return {
        Policy: (0, smithy_client_1.expectString)(output.Policy)
      };
    };
    var deserializeAws_json1_1GetKeyRotationStatusResponse = (output, context) => {
      return {
        KeyRotationEnabled: (0, smithy_client_1.expectBoolean)(output.KeyRotationEnabled)
      };
    };
    var deserializeAws_json1_1GetParametersForImportResponse = (output, context) => {
      return {
        ImportToken: output.ImportToken !== void 0 && output.ImportToken !== null ? context.base64Decoder(output.ImportToken) : void 0,
        KeyId: (0, smithy_client_1.expectString)(output.KeyId),
        ParametersValidTo: output.ParametersValidTo !== void 0 && output.ParametersValidTo !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ParametersValidTo))) : void 0,
        PublicKey: output.PublicKey !== void 0 && output.PublicKey !== null ? context.base64Decoder(output.PublicKey) : void 0
      };
    };
    var deserializeAws_json1_1GetPublicKeyResponse = (output, context) => {
      return {
        CustomerMasterKeySpec: (0, smithy_client_1.expectString)(output.CustomerMasterKeySpec),
        EncryptionAlgorithms: output.EncryptionAlgorithms !== void 0 && output.EncryptionAlgorithms !== null ? deserializeAws_json1_1EncryptionAlgorithmSpecList(output.EncryptionAlgorithms, context) : void 0,
        KeyId: (0, smithy_client_1.expectString)(output.KeyId),
        KeySpec: (0, smithy_client_1.expectString)(output.KeySpec),
        KeyUsage: (0, smithy_client_1.expectString)(output.KeyUsage),
        PublicKey: output.PublicKey !== void 0 && output.PublicKey !== null ? context.base64Decoder(output.PublicKey) : void 0,
        SigningAlgorithms: output.SigningAlgorithms !== void 0 && output.SigningAlgorithms !== null ? deserializeAws_json1_1SigningAlgorithmSpecList(output.SigningAlgorithms, context) : void 0
      };
    };
    var deserializeAws_json1_1GrantConstraints = (output, context) => {
      return {
        EncryptionContextEquals: output.EncryptionContextEquals !== void 0 && output.EncryptionContextEquals !== null ? deserializeAws_json1_1EncryptionContextType(output.EncryptionContextEquals, context) : void 0,
        EncryptionContextSubset: output.EncryptionContextSubset !== void 0 && output.EncryptionContextSubset !== null ? deserializeAws_json1_1EncryptionContextType(output.EncryptionContextSubset, context) : void 0
      };
    };
    var deserializeAws_json1_1GrantList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1GrantListEntry(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1GrantListEntry = (output, context) => {
      return {
        Constraints: output.Constraints !== void 0 && output.Constraints !== null ? deserializeAws_json1_1GrantConstraints(output.Constraints, context) : void 0,
        CreationDate: output.CreationDate !== void 0 && output.CreationDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreationDate))) : void 0,
        GrantId: (0, smithy_client_1.expectString)(output.GrantId),
        GranteePrincipal: (0, smithy_client_1.expectString)(output.GranteePrincipal),
        IssuingAccount: (0, smithy_client_1.expectString)(output.IssuingAccount),
        KeyId: (0, smithy_client_1.expectString)(output.KeyId),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Operations: output.Operations !== void 0 && output.Operations !== null ? deserializeAws_json1_1GrantOperationList(output.Operations, context) : void 0,
        RetiringPrincipal: (0, smithy_client_1.expectString)(output.RetiringPrincipal)
      };
    };
    var deserializeAws_json1_1GrantOperationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1ImportKeyMaterialResponse = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1IncorrectKeyException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1IncorrectKeyMaterialException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1IncorrectTrustAnchorException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidAliasNameException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidArnException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidCiphertextException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidGrantIdException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidGrantTokenException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidImportTokenException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidKeyUsageException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidMarkerException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1KeyList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1KeyListEntry(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1KeyListEntry = (output, context) => {
      return {
        KeyArn: (0, smithy_client_1.expectString)(output.KeyArn),
        KeyId: (0, smithy_client_1.expectString)(output.KeyId)
      };
    };
    var deserializeAws_json1_1KeyMetadata = (output, context) => {
      return {
        AWSAccountId: (0, smithy_client_1.expectString)(output.AWSAccountId),
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        CloudHsmClusterId: (0, smithy_client_1.expectString)(output.CloudHsmClusterId),
        CreationDate: output.CreationDate !== void 0 && output.CreationDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreationDate))) : void 0,
        CustomKeyStoreId: (0, smithy_client_1.expectString)(output.CustomKeyStoreId),
        CustomerMasterKeySpec: (0, smithy_client_1.expectString)(output.CustomerMasterKeySpec),
        DeletionDate: output.DeletionDate !== void 0 && output.DeletionDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.DeletionDate))) : void 0,
        Description: (0, smithy_client_1.expectString)(output.Description),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled),
        EncryptionAlgorithms: output.EncryptionAlgorithms !== void 0 && output.EncryptionAlgorithms !== null ? deserializeAws_json1_1EncryptionAlgorithmSpecList(output.EncryptionAlgorithms, context) : void 0,
        ExpirationModel: (0, smithy_client_1.expectString)(output.ExpirationModel),
        KeyId: (0, smithy_client_1.expectString)(output.KeyId),
        KeyManager: (0, smithy_client_1.expectString)(output.KeyManager),
        KeySpec: (0, smithy_client_1.expectString)(output.KeySpec),
        KeyState: (0, smithy_client_1.expectString)(output.KeyState),
        KeyUsage: (0, smithy_client_1.expectString)(output.KeyUsage),
        MacAlgorithms: output.MacAlgorithms !== void 0 && output.MacAlgorithms !== null ? deserializeAws_json1_1MacAlgorithmSpecList(output.MacAlgorithms, context) : void 0,
        MultiRegion: (0, smithy_client_1.expectBoolean)(output.MultiRegion),
        MultiRegionConfiguration: output.MultiRegionConfiguration !== void 0 && output.MultiRegionConfiguration !== null ? deserializeAws_json1_1MultiRegionConfiguration(output.MultiRegionConfiguration, context) : void 0,
        Origin: (0, smithy_client_1.expectString)(output.Origin),
        PendingDeletionWindowInDays: (0, smithy_client_1.expectInt32)(output.PendingDeletionWindowInDays),
        SigningAlgorithms: output.SigningAlgorithms !== void 0 && output.SigningAlgorithms !== null ? deserializeAws_json1_1SigningAlgorithmSpecList(output.SigningAlgorithms, context) : void 0,
        ValidTo: output.ValidTo !== void 0 && output.ValidTo !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ValidTo))) : void 0
      };
    };
    var deserializeAws_json1_1KeyUnavailableException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1KMSInternalException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1KMSInvalidMacException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1KMSInvalidSignatureException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1KMSInvalidStateException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1LimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ListAliasesResponse = (output, context) => {
      return {
        Aliases: output.Aliases !== void 0 && output.Aliases !== null ? deserializeAws_json1_1AliasList(output.Aliases, context) : void 0,
        NextMarker: (0, smithy_client_1.expectString)(output.NextMarker),
        Truncated: (0, smithy_client_1.expectBoolean)(output.Truncated)
      };
    };
    var deserializeAws_json1_1ListGrantsResponse = (output, context) => {
      return {
        Grants: output.Grants !== void 0 && output.Grants !== null ? deserializeAws_json1_1GrantList(output.Grants, context) : void 0,
        NextMarker: (0, smithy_client_1.expectString)(output.NextMarker),
        Truncated: (0, smithy_client_1.expectBoolean)(output.Truncated)
      };
    };
    var deserializeAws_json1_1ListKeyPoliciesResponse = (output, context) => {
      return {
        NextMarker: (0, smithy_client_1.expectString)(output.NextMarker),
        PolicyNames: output.PolicyNames !== void 0 && output.PolicyNames !== null ? deserializeAws_json1_1PolicyNameList(output.PolicyNames, context) : void 0,
        Truncated: (0, smithy_client_1.expectBoolean)(output.Truncated)
      };
    };
    var deserializeAws_json1_1ListKeysResponse = (output, context) => {
      return {
        Keys: output.Keys !== void 0 && output.Keys !== null ? deserializeAws_json1_1KeyList(output.Keys, context) : void 0,
        NextMarker: (0, smithy_client_1.expectString)(output.NextMarker),
        Truncated: (0, smithy_client_1.expectBoolean)(output.Truncated)
      };
    };
    var deserializeAws_json1_1ListResourceTagsResponse = (output, context) => {
      return {
        NextMarker: (0, smithy_client_1.expectString)(output.NextMarker),
        Tags: output.Tags !== void 0 && output.Tags !== null ? deserializeAws_json1_1TagList(output.Tags, context) : void 0,
        Truncated: (0, smithy_client_1.expectBoolean)(output.Truncated)
      };
    };
    var deserializeAws_json1_1MacAlgorithmSpecList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1MalformedPolicyDocumentException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1MultiRegionConfiguration = (output, context) => {
      return {
        MultiRegionKeyType: (0, smithy_client_1.expectString)(output.MultiRegionKeyType),
        PrimaryKey: output.PrimaryKey !== void 0 && output.PrimaryKey !== null ? deserializeAws_json1_1MultiRegionKey(output.PrimaryKey, context) : void 0,
        ReplicaKeys: output.ReplicaKeys !== void 0 && output.ReplicaKeys !== null ? deserializeAws_json1_1MultiRegionKeyList(output.ReplicaKeys, context) : void 0
      };
    };
    var deserializeAws_json1_1MultiRegionKey = (output, context) => {
      return {
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        Region: (0, smithy_client_1.expectString)(output.Region)
      };
    };
    var deserializeAws_json1_1MultiRegionKeyList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MultiRegionKey(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1NotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1PolicyNameList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1ReEncryptResponse = (output, context) => {
      return {
        CiphertextBlob: output.CiphertextBlob !== void 0 && output.CiphertextBlob !== null ? context.base64Decoder(output.CiphertextBlob) : void 0,
        DestinationEncryptionAlgorithm: (0, smithy_client_1.expectString)(output.DestinationEncryptionAlgorithm),
        KeyId: (0, smithy_client_1.expectString)(output.KeyId),
        SourceEncryptionAlgorithm: (0, smithy_client_1.expectString)(output.SourceEncryptionAlgorithm),
        SourceKeyId: (0, smithy_client_1.expectString)(output.SourceKeyId)
      };
    };
    var deserializeAws_json1_1ReplicateKeyResponse = (output, context) => {
      return {
        ReplicaKeyMetadata: output.ReplicaKeyMetadata !== void 0 && output.ReplicaKeyMetadata !== null ? deserializeAws_json1_1KeyMetadata(output.ReplicaKeyMetadata, context) : void 0,
        ReplicaPolicy: (0, smithy_client_1.expectString)(output.ReplicaPolicy),
        ReplicaTags: output.ReplicaTags !== void 0 && output.ReplicaTags !== null ? deserializeAws_json1_1TagList(output.ReplicaTags, context) : void 0
      };
    };
    var deserializeAws_json1_1ScheduleKeyDeletionResponse = (output, context) => {
      return {
        DeletionDate: output.DeletionDate !== void 0 && output.DeletionDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.DeletionDate))) : void 0,
        KeyId: (0, smithy_client_1.expectString)(output.KeyId),
        KeyState: (0, smithy_client_1.expectString)(output.KeyState),
        PendingWindowInDays: (0, smithy_client_1.expectInt32)(output.PendingWindowInDays)
      };
    };
    var deserializeAws_json1_1SigningAlgorithmSpecList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1SignResponse = (output, context) => {
      return {
        KeyId: (0, smithy_client_1.expectString)(output.KeyId),
        Signature: output.Signature !== void 0 && output.Signature !== null ? context.base64Decoder(output.Signature) : void 0,
        SigningAlgorithm: (0, smithy_client_1.expectString)(output.SigningAlgorithm)
      };
    };
    var deserializeAws_json1_1Tag = (output, context) => {
      return {
        TagKey: (0, smithy_client_1.expectString)(output.TagKey),
        TagValue: (0, smithy_client_1.expectString)(output.TagValue)
      };
    };
    var deserializeAws_json1_1TagException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1TagList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Tag(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1UnsupportedOperationException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1UpdateCustomKeyStoreResponse = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1VerifyMacResponse = (output, context) => {
      return {
        KeyId: (0, smithy_client_1.expectString)(output.KeyId),
        MacAlgorithm: (0, smithy_client_1.expectString)(output.MacAlgorithm),
        MacValid: (0, smithy_client_1.expectBoolean)(output.MacValid)
      };
    };
    var deserializeAws_json1_1VerifyResponse = (output, context) => {
      return {
        KeyId: (0, smithy_client_1.expectString)(output.KeyId),
        SignatureValid: (0, smithy_client_1.expectBoolean)(output.SignatureValid),
        SigningAlgorithm: (0, smithy_client_1.expectString)(output.SigningAlgorithm)
      };
    };
    var deserializeMetadata = (output) => {
      var _a;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/CancelKeyDeletionCommand.js
var require_CancelKeyDeletionCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/CancelKeyDeletionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CancelKeyDeletionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CancelKeyDeletionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "CancelKeyDeletionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CancelKeyDeletionRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CancelKeyDeletionResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CancelKeyDeletionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CancelKeyDeletionCommand)(output, context);
      }
    };
    exports.CancelKeyDeletionCommand = CancelKeyDeletionCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/ConnectCustomKeyStoreCommand.js
var require_ConnectCustomKeyStoreCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/ConnectCustomKeyStoreCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConnectCustomKeyStoreCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ConnectCustomKeyStoreCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "ConnectCustomKeyStoreCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ConnectCustomKeyStoreRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ConnectCustomKeyStoreResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ConnectCustomKeyStoreCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ConnectCustomKeyStoreCommand)(output, context);
      }
    };
    exports.ConnectCustomKeyStoreCommand = ConnectCustomKeyStoreCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/CreateAliasCommand.js
var require_CreateAliasCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/CreateAliasCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateAliasCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateAliasCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "CreateAliasCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateAliasRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateAliasCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateAliasCommand)(output, context);
      }
    };
    exports.CreateAliasCommand = CreateAliasCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/CreateCustomKeyStoreCommand.js
var require_CreateCustomKeyStoreCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/CreateCustomKeyStoreCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateCustomKeyStoreCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateCustomKeyStoreCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "CreateCustomKeyStoreCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateCustomKeyStoreRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateCustomKeyStoreResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateCustomKeyStoreCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateCustomKeyStoreCommand)(output, context);
      }
    };
    exports.CreateCustomKeyStoreCommand = CreateCustomKeyStoreCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/CreateGrantCommand.js
var require_CreateGrantCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/CreateGrantCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateGrantCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateGrantCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "CreateGrantCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateGrantRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateGrantResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateGrantCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateGrantCommand)(output, context);
      }
    };
    exports.CreateGrantCommand = CreateGrantCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/CreateKeyCommand.js
var require_CreateKeyCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/CreateKeyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateKeyCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateKeyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "CreateKeyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateKeyRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateKeyResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateKeyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateKeyCommand)(output, context);
      }
    };
    exports.CreateKeyCommand = CreateKeyCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/DecryptCommand.js
var require_DecryptCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/DecryptCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DecryptCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DecryptCommand2 = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "DecryptCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DecryptRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DecryptResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DecryptCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DecryptCommand)(output, context);
      }
    };
    exports.DecryptCommand = DecryptCommand2;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/DeleteAliasCommand.js
var require_DeleteAliasCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/DeleteAliasCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteAliasCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteAliasCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "DeleteAliasCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteAliasRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteAliasCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteAliasCommand)(output, context);
      }
    };
    exports.DeleteAliasCommand = DeleteAliasCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/DeleteCustomKeyStoreCommand.js
var require_DeleteCustomKeyStoreCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/DeleteCustomKeyStoreCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteCustomKeyStoreCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteCustomKeyStoreCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "DeleteCustomKeyStoreCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteCustomKeyStoreRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteCustomKeyStoreResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteCustomKeyStoreCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteCustomKeyStoreCommand)(output, context);
      }
    };
    exports.DeleteCustomKeyStoreCommand = DeleteCustomKeyStoreCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/DeleteImportedKeyMaterialCommand.js
var require_DeleteImportedKeyMaterialCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/DeleteImportedKeyMaterialCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteImportedKeyMaterialCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteImportedKeyMaterialCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "DeleteImportedKeyMaterialCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteImportedKeyMaterialRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteImportedKeyMaterialCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteImportedKeyMaterialCommand)(output, context);
      }
    };
    exports.DeleteImportedKeyMaterialCommand = DeleteImportedKeyMaterialCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/DescribeCustomKeyStoresCommand.js
var require_DescribeCustomKeyStoresCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/DescribeCustomKeyStoresCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeCustomKeyStoresCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeCustomKeyStoresCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "DescribeCustomKeyStoresCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeCustomKeyStoresRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeCustomKeyStoresResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeCustomKeyStoresCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeCustomKeyStoresCommand)(output, context);
      }
    };
    exports.DescribeCustomKeyStoresCommand = DescribeCustomKeyStoresCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/DescribeKeyCommand.js
var require_DescribeKeyCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/DescribeKeyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeKeyCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeKeyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "DescribeKeyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeKeyRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeKeyResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeKeyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeKeyCommand)(output, context);
      }
    };
    exports.DescribeKeyCommand = DescribeKeyCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/DisableKeyCommand.js
var require_DisableKeyCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/DisableKeyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DisableKeyCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DisableKeyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "DisableKeyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DisableKeyRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DisableKeyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DisableKeyCommand)(output, context);
      }
    };
    exports.DisableKeyCommand = DisableKeyCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/DisableKeyRotationCommand.js
var require_DisableKeyRotationCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/DisableKeyRotationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DisableKeyRotationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DisableKeyRotationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "DisableKeyRotationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DisableKeyRotationRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DisableKeyRotationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DisableKeyRotationCommand)(output, context);
      }
    };
    exports.DisableKeyRotationCommand = DisableKeyRotationCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/DisconnectCustomKeyStoreCommand.js
var require_DisconnectCustomKeyStoreCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/DisconnectCustomKeyStoreCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DisconnectCustomKeyStoreCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DisconnectCustomKeyStoreCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "DisconnectCustomKeyStoreCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DisconnectCustomKeyStoreRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DisconnectCustomKeyStoreResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DisconnectCustomKeyStoreCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DisconnectCustomKeyStoreCommand)(output, context);
      }
    };
    exports.DisconnectCustomKeyStoreCommand = DisconnectCustomKeyStoreCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/EnableKeyCommand.js
var require_EnableKeyCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/EnableKeyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EnableKeyCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var EnableKeyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "EnableKeyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.EnableKeyRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1EnableKeyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1EnableKeyCommand)(output, context);
      }
    };
    exports.EnableKeyCommand = EnableKeyCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/EnableKeyRotationCommand.js
var require_EnableKeyRotationCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/EnableKeyRotationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EnableKeyRotationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var EnableKeyRotationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "EnableKeyRotationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.EnableKeyRotationRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1EnableKeyRotationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1EnableKeyRotationCommand)(output, context);
      }
    };
    exports.EnableKeyRotationCommand = EnableKeyRotationCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/EncryptCommand.js
var require_EncryptCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/EncryptCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EncryptCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var EncryptCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "EncryptCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.EncryptRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.EncryptResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1EncryptCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1EncryptCommand)(output, context);
      }
    };
    exports.EncryptCommand = EncryptCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/GenerateDataKeyCommand.js
var require_GenerateDataKeyCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/GenerateDataKeyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenerateDataKeyCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GenerateDataKeyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "GenerateDataKeyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GenerateDataKeyRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GenerateDataKeyResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GenerateDataKeyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GenerateDataKeyCommand)(output, context);
      }
    };
    exports.GenerateDataKeyCommand = GenerateDataKeyCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/GenerateDataKeyPairCommand.js
var require_GenerateDataKeyPairCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/GenerateDataKeyPairCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenerateDataKeyPairCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GenerateDataKeyPairCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "GenerateDataKeyPairCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GenerateDataKeyPairRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GenerateDataKeyPairResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GenerateDataKeyPairCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GenerateDataKeyPairCommand)(output, context);
      }
    };
    exports.GenerateDataKeyPairCommand = GenerateDataKeyPairCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/GenerateDataKeyPairWithoutPlaintextCommand.js
var require_GenerateDataKeyPairWithoutPlaintextCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/GenerateDataKeyPairWithoutPlaintextCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenerateDataKeyPairWithoutPlaintextCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GenerateDataKeyPairWithoutPlaintextCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "GenerateDataKeyPairWithoutPlaintextCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GenerateDataKeyPairWithoutPlaintextRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GenerateDataKeyPairWithoutPlaintextResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GenerateDataKeyPairWithoutPlaintextCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GenerateDataKeyPairWithoutPlaintextCommand)(output, context);
      }
    };
    exports.GenerateDataKeyPairWithoutPlaintextCommand = GenerateDataKeyPairWithoutPlaintextCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/GenerateDataKeyWithoutPlaintextCommand.js
var require_GenerateDataKeyWithoutPlaintextCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/GenerateDataKeyWithoutPlaintextCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenerateDataKeyWithoutPlaintextCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GenerateDataKeyWithoutPlaintextCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "GenerateDataKeyWithoutPlaintextCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GenerateDataKeyWithoutPlaintextRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GenerateDataKeyWithoutPlaintextResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GenerateDataKeyWithoutPlaintextCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GenerateDataKeyWithoutPlaintextCommand)(output, context);
      }
    };
    exports.GenerateDataKeyWithoutPlaintextCommand = GenerateDataKeyWithoutPlaintextCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/GenerateMacCommand.js
var require_GenerateMacCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/GenerateMacCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenerateMacCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GenerateMacCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "GenerateMacCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GenerateMacRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GenerateMacResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GenerateMacCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GenerateMacCommand)(output, context);
      }
    };
    exports.GenerateMacCommand = GenerateMacCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/GenerateRandomCommand.js
var require_GenerateRandomCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/GenerateRandomCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenerateRandomCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GenerateRandomCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "GenerateRandomCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GenerateRandomRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GenerateRandomResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GenerateRandomCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GenerateRandomCommand)(output, context);
      }
    };
    exports.GenerateRandomCommand = GenerateRandomCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/GetKeyPolicyCommand.js
var require_GetKeyPolicyCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/GetKeyPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetKeyPolicyCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetKeyPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "GetKeyPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetKeyPolicyRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetKeyPolicyResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetKeyPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetKeyPolicyCommand)(output, context);
      }
    };
    exports.GetKeyPolicyCommand = GetKeyPolicyCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/GetKeyRotationStatusCommand.js
var require_GetKeyRotationStatusCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/GetKeyRotationStatusCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetKeyRotationStatusCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetKeyRotationStatusCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "GetKeyRotationStatusCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetKeyRotationStatusRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetKeyRotationStatusResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetKeyRotationStatusCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetKeyRotationStatusCommand)(output, context);
      }
    };
    exports.GetKeyRotationStatusCommand = GetKeyRotationStatusCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/GetParametersForImportCommand.js
var require_GetParametersForImportCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/GetParametersForImportCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetParametersForImportCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetParametersForImportCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "GetParametersForImportCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetParametersForImportRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetParametersForImportResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetParametersForImportCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetParametersForImportCommand)(output, context);
      }
    };
    exports.GetParametersForImportCommand = GetParametersForImportCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/GetPublicKeyCommand.js
var require_GetPublicKeyCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/GetPublicKeyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetPublicKeyCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetPublicKeyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "GetPublicKeyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetPublicKeyRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetPublicKeyResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetPublicKeyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetPublicKeyCommand)(output, context);
      }
    };
    exports.GetPublicKeyCommand = GetPublicKeyCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/ImportKeyMaterialCommand.js
var require_ImportKeyMaterialCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/ImportKeyMaterialCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ImportKeyMaterialCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ImportKeyMaterialCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "ImportKeyMaterialCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ImportKeyMaterialRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ImportKeyMaterialResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ImportKeyMaterialCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ImportKeyMaterialCommand)(output, context);
      }
    };
    exports.ImportKeyMaterialCommand = ImportKeyMaterialCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/ListAliasesCommand.js
var require_ListAliasesCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/ListAliasesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAliasesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListAliasesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "ListAliasesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAliasesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAliasesResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListAliasesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListAliasesCommand)(output, context);
      }
    };
    exports.ListAliasesCommand = ListAliasesCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/ListGrantsCommand.js
var require_ListGrantsCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/ListGrantsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListGrantsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListGrantsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "ListGrantsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListGrantsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListGrantsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListGrantsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListGrantsCommand)(output, context);
      }
    };
    exports.ListGrantsCommand = ListGrantsCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/ListKeyPoliciesCommand.js
var require_ListKeyPoliciesCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/ListKeyPoliciesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListKeyPoliciesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListKeyPoliciesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "ListKeyPoliciesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListKeyPoliciesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListKeyPoliciesResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListKeyPoliciesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListKeyPoliciesCommand)(output, context);
      }
    };
    exports.ListKeyPoliciesCommand = ListKeyPoliciesCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/ListKeysCommand.js
var require_ListKeysCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/ListKeysCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListKeysCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListKeysCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "ListKeysCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListKeysRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListKeysResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListKeysCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListKeysCommand)(output, context);
      }
    };
    exports.ListKeysCommand = ListKeysCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/ListResourceTagsCommand.js
var require_ListResourceTagsCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/ListResourceTagsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListResourceTagsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListResourceTagsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "ListResourceTagsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListResourceTagsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListResourceTagsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListResourceTagsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListResourceTagsCommand)(output, context);
      }
    };
    exports.ListResourceTagsCommand = ListResourceTagsCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/ListRetirableGrantsCommand.js
var require_ListRetirableGrantsCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/ListRetirableGrantsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListRetirableGrantsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListRetirableGrantsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "ListRetirableGrantsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListRetirableGrantsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListGrantsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListRetirableGrantsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListRetirableGrantsCommand)(output, context);
      }
    };
    exports.ListRetirableGrantsCommand = ListRetirableGrantsCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/PutKeyPolicyCommand.js
var require_PutKeyPolicyCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/PutKeyPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutKeyPolicyCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var PutKeyPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "PutKeyPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutKeyPolicyRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1PutKeyPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1PutKeyPolicyCommand)(output, context);
      }
    };
    exports.PutKeyPolicyCommand = PutKeyPolicyCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/ReEncryptCommand.js
var require_ReEncryptCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/ReEncryptCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReEncryptCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ReEncryptCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "ReEncryptCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ReEncryptRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ReEncryptResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ReEncryptCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ReEncryptCommand)(output, context);
      }
    };
    exports.ReEncryptCommand = ReEncryptCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/ReplicateKeyCommand.js
var require_ReplicateKeyCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/ReplicateKeyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReplicateKeyCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ReplicateKeyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "ReplicateKeyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ReplicateKeyRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ReplicateKeyResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ReplicateKeyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ReplicateKeyCommand)(output, context);
      }
    };
    exports.ReplicateKeyCommand = ReplicateKeyCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/RetireGrantCommand.js
var require_RetireGrantCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/RetireGrantCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RetireGrantCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var RetireGrantCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "RetireGrantCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RetireGrantRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1RetireGrantCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1RetireGrantCommand)(output, context);
      }
    };
    exports.RetireGrantCommand = RetireGrantCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/RevokeGrantCommand.js
var require_RevokeGrantCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/RevokeGrantCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RevokeGrantCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var RevokeGrantCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "RevokeGrantCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RevokeGrantRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1RevokeGrantCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1RevokeGrantCommand)(output, context);
      }
    };
    exports.RevokeGrantCommand = RevokeGrantCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/ScheduleKeyDeletionCommand.js
var require_ScheduleKeyDeletionCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/ScheduleKeyDeletionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ScheduleKeyDeletionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ScheduleKeyDeletionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "ScheduleKeyDeletionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ScheduleKeyDeletionRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ScheduleKeyDeletionResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ScheduleKeyDeletionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ScheduleKeyDeletionCommand)(output, context);
      }
    };
    exports.ScheduleKeyDeletionCommand = ScheduleKeyDeletionCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/SignCommand.js
var require_SignCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/SignCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SignCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var SignCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "SignCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SignRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.SignResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1SignCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1SignCommand)(output, context);
      }
    };
    exports.SignCommand = SignCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/TagResourceCommand.js
var require_TagResourceCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/TagResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TagResourceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var TagResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "TagResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TagResourceRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1TagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1TagResourceCommand)(output, context);
      }
    };
    exports.TagResourceCommand = TagResourceCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/UntagResourceCommand.js
var require_UntagResourceCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/UntagResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UntagResourceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UntagResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "UntagResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UntagResourceRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UntagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UntagResourceCommand)(output, context);
      }
    };
    exports.UntagResourceCommand = UntagResourceCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/UpdateAliasCommand.js
var require_UpdateAliasCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/UpdateAliasCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateAliasCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateAliasCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "UpdateAliasCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateAliasRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateAliasCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateAliasCommand)(output, context);
      }
    };
    exports.UpdateAliasCommand = UpdateAliasCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/UpdateCustomKeyStoreCommand.js
var require_UpdateCustomKeyStoreCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/UpdateCustomKeyStoreCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateCustomKeyStoreCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateCustomKeyStoreCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "UpdateCustomKeyStoreCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateCustomKeyStoreRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateCustomKeyStoreResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateCustomKeyStoreCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateCustomKeyStoreCommand)(output, context);
      }
    };
    exports.UpdateCustomKeyStoreCommand = UpdateCustomKeyStoreCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/UpdateKeyDescriptionCommand.js
var require_UpdateKeyDescriptionCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/UpdateKeyDescriptionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateKeyDescriptionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateKeyDescriptionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "UpdateKeyDescriptionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateKeyDescriptionRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateKeyDescriptionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateKeyDescriptionCommand)(output, context);
      }
    };
    exports.UpdateKeyDescriptionCommand = UpdateKeyDescriptionCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/UpdatePrimaryRegionCommand.js
var require_UpdatePrimaryRegionCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/UpdatePrimaryRegionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdatePrimaryRegionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdatePrimaryRegionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "UpdatePrimaryRegionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdatePrimaryRegionRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdatePrimaryRegionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdatePrimaryRegionCommand)(output, context);
      }
    };
    exports.UpdatePrimaryRegionCommand = UpdatePrimaryRegionCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/VerifyCommand.js
var require_VerifyCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/VerifyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VerifyCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var VerifyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "VerifyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.VerifyRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.VerifyResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1VerifyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1VerifyCommand)(output, context);
      }
    };
    exports.VerifyCommand = VerifyCommand;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/VerifyMacCommand.js
var require_VerifyMacCommand = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/VerifyMacCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VerifyMacCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var VerifyMacCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "VerifyMacCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.VerifyMacRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.VerifyMacResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1VerifyMacCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1VerifyMacCommand)(output, context);
      }
    };
    exports.VerifyMacCommand = VerifyMacCommand;
  }
});

// node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js
var require_booleanSelector = __commonJS({
  "node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.booleanSelector = exports.SelectorType = void 0;
    var SelectorType;
    (function(SelectorType2) {
      SelectorType2["ENV"] = "env";
      SelectorType2["CONFIG"] = "shared config entry";
    })(SelectorType = exports.SelectorType || (exports.SelectorType = {}));
    var booleanSelector = (obj, key, type) => {
      if (!(key in obj))
        return void 0;
      if (obj[key] === "true")
        return true;
      if (obj[key] === "false")
        return false;
      throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
    };
    exports.booleanSelector = booleanSelector;
  }
});

// node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js
var require_dist_cjs5 = __commonJS({
  "node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_booleanSelector(), exports);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js
var require_NodeUseDualstackEndpointConfigOptions = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = exports.DEFAULT_USE_DUALSTACK_ENDPOINT = exports.CONFIG_USE_DUALSTACK_ENDPOINT = exports.ENV_USE_DUALSTACK_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs5();
    exports.ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
    exports.CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
    exports.DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports.ENV_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports.CONFIG_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js
var require_NodeUseFipsEndpointConfigOptions = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = exports.DEFAULT_USE_FIPS_ENDPOINT = exports.CONFIG_USE_FIPS_ENDPOINT = exports.ENV_USE_FIPS_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs5();
    exports.ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
    exports.CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
    exports.DEFAULT_USE_FIPS_ENDPOINT = false;
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports.ENV_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports.CONFIG_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

// node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js
var require_normalizeProvider = __commonJS({
  "node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.normalizeProvider = void 0;
    var normalizeProvider = (input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
    exports.normalizeProvider = normalizeProvider;
  }
});

// node_modules/@aws-sdk/util-middleware/dist-cjs/index.js
var require_dist_cjs6 = __commonJS({
  "node_modules/@aws-sdk/util-middleware/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_normalizeProvider(), exports);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js
var require_resolveCustomEndpointsConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveCustomEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var resolveCustomEndpointsConfig = (input) => {
      var _a;
      const { endpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)(input.useDualstackEndpoint)
      };
    };
    exports.resolveCustomEndpointsConfig = resolveCustomEndpointsConfig;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js
var require_getEndpointFromRegion = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointFromRegion = void 0;
    var getEndpointFromRegion = async (input) => {
      var _a;
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
      if (!dnsHostRegex.test(region)) {
        throw new Error("Invalid region in client config");
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } = (_a = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) !== null && _a !== void 0 ? _a : {};
      if (!hostname) {
        throw new Error("Cannot resolve hostname from client config");
      }
      return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
    };
    exports.getEndpointFromRegion = getEndpointFromRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js
var require_resolveEndpointsConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var getEndpointFromRegion_1 = require_getEndpointFromRegion();
    var resolveEndpointsConfig = (input) => {
      var _a;
      const useDualstackEndpoint = (0, util_middleware_1.normalizeProvider)(input.useDualstackEndpoint);
      const { endpoint, useFipsEndpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: endpoint ? (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint) : () => (0, getEndpointFromRegion_1.getEndpointFromRegion)({ ...input, useDualstackEndpoint, useFipsEndpoint }),
        isCustomEndpoint: endpoint ? true : false,
        useDualstackEndpoint
      };
    };
    exports.resolveEndpointsConfig = resolveEndpointsConfig;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js
var require_endpointsConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_NodeUseDualstackEndpointConfigOptions(), exports);
    tslib_1.__exportStar(require_NodeUseFipsEndpointConfigOptions(), exports);
    tslib_1.__exportStar(require_resolveCustomEndpointsConfig(), exports);
    tslib_1.__exportStar(require_resolveEndpointsConfig(), exports);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js
var require_config = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = exports.NODE_REGION_CONFIG_OPTIONS = exports.REGION_INI_NAME = exports.REGION_ENV_NAME = void 0;
    exports.REGION_ENV_NAME = "AWS_REGION";
    exports.REGION_INI_NAME = "region";
    exports.NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.REGION_ENV_NAME],
      configFileSelector: (profile) => profile[exports.REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js
var require_isFipsRegion = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isFipsRegion = void 0;
    var isFipsRegion = (region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));
    exports.isFipsRegion = isFipsRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js
var require_getRealRegion = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRealRegion = void 0;
    var isFipsRegion_1 = require_isFipsRegion();
    var getRealRegion = (region) => (0, isFipsRegion_1.isFipsRegion)(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region;
    exports.getRealRegion = getRealRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js
var require_resolveRegionConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveRegionConfig = void 0;
    var getRealRegion_1 = require_getRealRegion();
    var isFipsRegion_1 = require_isFipsRegion();
    var resolveRegionConfig = (input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === "string") {
            return (0, getRealRegion_1.getRealRegion)(region);
          }
          const providedRegion = await region();
          return (0, getRealRegion_1.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if ((0, isFipsRegion_1.isFipsRegion)(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint === "boolean" ? Promise.resolve(useFipsEndpoint) : useFipsEndpoint();
        }
      };
    };
    exports.resolveRegionConfig = resolveRegionConfig;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js
var require_regionConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_config(), exports);
    tslib_1.__exportStar(require_resolveRegionConfig(), exports);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js
var require_PartitionHash = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js
var require_RegionHash = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js
var require_getHostnameFromVariants = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHostnameFromVariants = void 0;
    var getHostnameFromVariants = (variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
      var _a;
      return (_a = variants.find(({ tags }) => useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack"))) === null || _a === void 0 ? void 0 : _a.hostname;
    };
    exports.getHostnameFromVariants = getHostnameFromVariants;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js
var require_getResolvedHostname = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedHostname = void 0;
    var getResolvedHostname = (resolvedRegion, { regionHostname, partitionHostname }) => regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : void 0;
    exports.getResolvedHostname = getResolvedHostname;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js
var require_getResolvedPartition = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedPartition = void 0;
    var getResolvedPartition = (region, { partitionHash }) => {
      var _a;
      return (_a = Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region))) !== null && _a !== void 0 ? _a : "aws";
    };
    exports.getResolvedPartition = getResolvedPartition;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js
var require_getResolvedSigningRegion = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedSigningRegion = void 0;
    var getResolvedSigningRegion = (hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    };
    exports.getResolvedSigningRegion = getResolvedSigningRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js
var require_getRegionInfo = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRegionInfo = void 0;
    var getHostnameFromVariants_1 = require_getHostnameFromVariants();
    var getResolvedHostname_1 = require_getResolvedHostname();
    var getResolvedPartition_1 = require_getResolvedPartition();
    var getResolvedSigningRegion_1 = require_getResolvedSigningRegion();
    var getRegionInfo = (region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash }) => {
      var _a, _b, _c, _d, _e, _f;
      const partition = (0, getResolvedPartition_1.getResolvedPartition)(region, { partitionHash });
      const resolvedRegion = region in regionHash ? region : (_b = (_a = partitionHash[partition]) === null || _a === void 0 ? void 0 : _a.endpoint) !== null && _b !== void 0 ? _b : region;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_c = regionHash[resolvedRegion]) === null || _c === void 0 ? void 0 : _c.variants, hostnameOptions);
      const partitionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_d = partitionHash[partition]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);
      const hostname = (0, getResolvedHostname_1.getResolvedHostname)(resolvedRegion, { regionHostname, partitionHostname });
      if (hostname === void 0) {
        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
      }
      const signingRegion = (0, getResolvedSigningRegion_1.getResolvedSigningRegion)(hostname, {
        signingRegion: (_e = regionHash[resolvedRegion]) === null || _e === void 0 ? void 0 : _e.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint
      });
      return {
        partition,
        signingService,
        hostname,
        ...signingRegion && { signingRegion },
        ...((_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingService) && {
          signingService: regionHash[resolvedRegion].signingService
        }
      };
    };
    exports.getRegionInfo = getRegionInfo;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js
var require_regionInfo = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_PartitionHash(), exports);
    tslib_1.__exportStar(require_RegionHash(), exports);
    tslib_1.__exportStar(require_getRegionInfo(), exports);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/index.js
var require_dist_cjs7 = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_endpointsConfig(), exports);
    tslib_1.__exportStar(require_regionConfig(), exports);
    tslib_1.__exportStar(require_regionInfo(), exports);
  }
});

// node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js
var require_dist_cjs8 = __commonJS({
  "node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getContentLengthPlugin = exports.contentLengthMiddlewareOptions = exports.contentLengthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var CONTENT_LENGTH_HEADER = "content-length";
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = {
                ...request.headers,
                [CONTENT_LENGTH_HEADER]: String(length)
              };
            } catch (error) {
            }
          }
        }
        return next({
          ...args,
          request
        });
      };
    }
    exports.contentLengthMiddleware = contentLengthMiddleware;
    exports.contentLengthMiddlewareOptions = {
      step: "build",
      tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
      name: "contentLengthMiddleware",
      override: true
    };
    var getContentLengthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), exports.contentLengthMiddlewareOptions);
      }
    });
    exports.getContentLengthPlugin = getContentLengthPlugin;
  }
});

// node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs9 = __commonJS({
  "node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHostHeaderPlugin = exports.hostHeaderMiddlewareOptions = exports.hostHeaderMiddleware = exports.resolveHostHeaderConfig = void 0;
    var protocol_http_1 = require_dist_cjs4();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    exports.resolveHostHeaderConfig = resolveHostHeaderConfig;
    var hostHeaderMiddleware = (options) => (next) => async (args) => {
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const { request } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
        delete request.headers["host"];
        request.headers[":authority"] = "";
      } else if (!request.headers["host"]) {
        request.headers["host"] = request.hostname;
      }
      return next(args);
    };
    exports.hostHeaderMiddleware = hostHeaderMiddleware;
    exports.hostHeaderMiddlewareOptions = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    var getHostHeaderPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.hostHeaderMiddleware)(options), exports.hostHeaderMiddlewareOptions);
      }
    });
    exports.getHostHeaderPlugin = getHostHeaderPlugin;
  }
});

// node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js
var require_loggerMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLoggerPlugin = exports.loggerMiddlewareOptions = exports.loggerMiddleware = void 0;
    var loggerMiddleware = () => (next, context) => async (args) => {
      const { clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog } = context;
      const response = await next(args);
      if (!logger) {
        return response;
      }
      if (typeof logger.info === "function") {
        const { $metadata, ...outputWithoutMetadata } = response.output;
        logger.info({
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata
        });
      }
      return response;
    };
    exports.loggerMiddleware = loggerMiddleware;
    exports.loggerMiddlewareOptions = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    var getLoggerPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.loggerMiddleware)(), exports.loggerMiddlewareOptions);
      }
    });
    exports.getLoggerPlugin = getLoggerPlugin;
  }
});

// node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs10 = __commonJS({
  "node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_loggerMiddleware(), exports);
  }
});

// node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js
var require_dist_cjs11 = __commonJS({
  "node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRecursionDetectionPlugin = exports.addRecursionDetectionMiddlewareOptions = exports.recursionDetectionMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
    var ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
    var ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
    var recursionDetectionMiddleware = (options) => (next) => async (args) => {
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request) || options.runtime !== "node" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceId = process.env[ENV_TRACE_ID];
      const nonEmptyString = (str) => typeof str === "string" && str.length > 0;
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next({
        ...args,
        request
      });
    };
    exports.recursionDetectionMiddleware = recursionDetectionMiddleware;
    exports.addRecursionDetectionMiddlewareOptions = {
      step: "build",
      tags: ["RECURSION_DETECTION"],
      name: "recursionDetectionMiddleware",
      override: true,
      priority: "low"
    };
    var getRecursionDetectionPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.recursionDetectionMiddleware)(options), exports.addRecursionDetectionMiddlewareOptions);
      }
    });
    exports.getRecursionDetectionPlugin = getRecursionDetectionPlugin;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/config.js
var require_config2 = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_RETRY_MODE = exports.DEFAULT_MAX_ATTEMPTS = exports.RETRY_MODES = void 0;
    var RETRY_MODES;
    (function(RETRY_MODES2) {
      RETRY_MODES2["STANDARD"] = "standard";
      RETRY_MODES2["ADAPTIVE"] = "adaptive";
    })(RETRY_MODES = exports.RETRY_MODES || (exports.RETRY_MODES = {}));
    exports.DEFAULT_MAX_ATTEMPTS = 3;
    exports.DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;
  }
});

// node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js
var require_constants2 = __commonJS({
  "node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TRANSIENT_ERROR_STATUS_CODES = exports.TRANSIENT_ERROR_CODES = exports.THROTTLING_ERROR_CODES = exports.CLOCK_SKEW_ERROR_CODES = void 0;
    exports.CLOCK_SKEW_ERROR_CODES = [
      "AuthFailure",
      "InvalidSignatureException",
      "RequestExpired",
      "RequestInTheFuture",
      "RequestTimeTooSkewed",
      "SignatureDoesNotMatch"
    ];
    exports.THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
    ];
    exports.TRANSIENT_ERROR_CODES = ["AbortError", "TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    exports.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
  }
});

// node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js
var require_dist_cjs12 = __commonJS({
  "node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isTransientError = exports.isThrottlingError = exports.isClockSkewError = exports.isRetryableByTrait = void 0;
    var constants_1 = require_constants2();
    var isRetryableByTrait = (error) => error.$retryable !== void 0;
    exports.isRetryableByTrait = isRetryableByTrait;
    var isClockSkewError = (error) => constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name);
    exports.isClockSkewError = isClockSkewError;
    var isThrottlingError = (error) => {
      var _a, _b;
      return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || constants_1.THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
    };
    exports.isThrottlingError = isThrottlingError;
    var isTransientError = (error) => {
      var _a;
      return constants_1.TRANSIENT_ERROR_CODES.includes(error.name) || constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
    };
    exports.isTransientError = isTransientError;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/DefaultRateLimiter.js
var require_DefaultRateLimiter = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/DefaultRateLimiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DefaultRateLimiter = void 0;
    var service_error_classification_1 = require_dist_cjs12();
    var DefaultRateLimiter = class {
      constructor(options) {
        var _a, _b, _c, _d, _e;
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;
        this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;
        this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;
        this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;
        this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, service_error_classification_1.isThrottlingError)(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    exports.DefaultRateLimiter = DefaultRateLimiter;
  }
});

// node_modules/uuid/dist/rng.js
var require_rng = __commonJS({
  "node_modules/uuid/dist/rng.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = rng;
    var _crypto = _interopRequireDefault(require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var rnds8Pool = new Uint8Array(256);
    var poolPtr = rnds8Pool.length;
    function rng() {
      if (poolPtr > rnds8Pool.length - 16) {
        _crypto.default.randomFillSync(rnds8Pool);
        poolPtr = 0;
      }
      return rnds8Pool.slice(poolPtr, poolPtr += 16);
    }
  }
});

// node_modules/uuid/dist/regex.js
var require_regex = __commonJS({
  "node_modules/uuid/dist/regex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/validate.js
var require_validate = __commonJS({
  "node_modules/uuid/dist/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regex = _interopRequireDefault(require_regex());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function validate(uuid) {
      return typeof uuid === "string" && _regex.default.test(uuid);
    }
    var _default = validate;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/stringify.js
var require_stringify = __commonJS({
  "node_modules/uuid/dist/stringify.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    function stringify(arr, offset = 0) {
      const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Stringified UUID is invalid");
      }
      return uuid;
    }
    var _default = stringify;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/v1.js
var require_v1 = __commonJS({
  "node_modules/uuid/dist/v1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = _interopRequireDefault(require_stringify());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _nodeId;
    var _clockseq;
    var _lastMSecs = 0;
    var _lastNSecs = 0;
    function v1(options, buf, offset) {
      let i = buf && offset || 0;
      const b = buf || new Array(16);
      options = options || {};
      let node = options.node || _nodeId;
      let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
      if (node == null || clockseq == null) {
        const seedBytes = options.random || (options.rng || _rng.default)();
        if (node == null) {
          node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
        }
        if (clockseq == null) {
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
        }
      }
      let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
      let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
      const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
      if (dt < 0 && options.clockseq === void 0) {
        clockseq = clockseq + 1 & 16383;
      }
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
        nsecs = 0;
      }
      if (nsecs >= 1e4) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
      msecs += 122192928e5;
      const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      b[i++] = tl >>> 24 & 255;
      b[i++] = tl >>> 16 & 255;
      b[i++] = tl >>> 8 & 255;
      b[i++] = tl & 255;
      const tmh = msecs / 4294967296 * 1e4 & 268435455;
      b[i++] = tmh >>> 8 & 255;
      b[i++] = tmh & 255;
      b[i++] = tmh >>> 24 & 15 | 16;
      b[i++] = tmh >>> 16 & 255;
      b[i++] = clockseq >>> 8 | 128;
      b[i++] = clockseq & 255;
      for (let n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }
      return buf || (0, _stringify.default)(b);
    }
    var _default = v1;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/parse.js
var require_parse = __commonJS({
  "node_modules/uuid/dist/parse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function parse(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      let v;
      const arr = new Uint8Array(16);
      arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
      arr[1] = v >>> 16 & 255;
      arr[2] = v >>> 8 & 255;
      arr[3] = v & 255;
      arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
      arr[5] = v & 255;
      arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
      arr[7] = v & 255;
      arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
      arr[9] = v & 255;
      arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
      arr[11] = v / 4294967296 & 255;
      arr[12] = v >>> 24 & 255;
      arr[13] = v >>> 16 & 255;
      arr[14] = v >>> 8 & 255;
      arr[15] = v & 255;
      return arr;
    }
    var _default = parse;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/v35.js
var require_v35 = __commonJS({
  "node_modules/uuid/dist/v35.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _default;
    exports.URL = exports.DNS = void 0;
    var _stringify = _interopRequireDefault(require_stringify());
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function stringToBytes(str) {
      str = unescape(encodeURIComponent(str));
      const bytes = [];
      for (let i = 0; i < str.length; ++i) {
        bytes.push(str.charCodeAt(i));
      }
      return bytes;
    }
    var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    exports.DNS = DNS;
    var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
    exports.URL = URL2;
    function _default(name, version, hashfunc) {
      function generateUUID(value, namespace, buf, offset) {
        if (typeof value === "string") {
          value = stringToBytes(value);
        }
        if (typeof namespace === "string") {
          namespace = (0, _parse.default)(namespace);
        }
        if (namespace.length !== 16) {
          throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
        }
        let bytes = new Uint8Array(16 + value.length);
        bytes.set(namespace);
        bytes.set(value, namespace.length);
        bytes = hashfunc(bytes);
        bytes[6] = bytes[6] & 15 | version;
        bytes[8] = bytes[8] & 63 | 128;
        if (buf) {
          offset = offset || 0;
          for (let i = 0; i < 16; ++i) {
            buf[offset + i] = bytes[i];
          }
          return buf;
        }
        return (0, _stringify.default)(bytes);
      }
      try {
        generateUUID.name = name;
      } catch (err) {
      }
      generateUUID.DNS = DNS;
      generateUUID.URL = URL2;
      return generateUUID;
    }
  }
});

// node_modules/uuid/dist/md5.js
var require_md5 = __commonJS({
  "node_modules/uuid/dist/md5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _crypto = _interopRequireDefault(require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function md5(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
      } else if (typeof bytes === "string") {
        bytes = Buffer.from(bytes, "utf8");
      }
      return _crypto.default.createHash("md5").update(bytes).digest();
    }
    var _default = md5;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/v3.js
var require_v3 = __commonJS({
  "node_modules/uuid/dist/v3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _md = _interopRequireDefault(require_md5());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v3 = (0, _v.default)("v3", 48, _md.default);
    var _default = v3;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/v4.js
var require_v4 = __commonJS({
  "node_modules/uuid/dist/v4.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = _interopRequireDefault(require_stringify());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function v4(options, buf, offset) {
      options = options || {};
      const rnds = options.random || (options.rng || _rng.default)();
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        offset = offset || 0;
        for (let i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }
        return buf;
      }
      return (0, _stringify.default)(rnds);
    }
    var _default = v4;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/sha1.js
var require_sha1 = __commonJS({
  "node_modules/uuid/dist/sha1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _crypto = _interopRequireDefault(require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function sha1(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
      } else if (typeof bytes === "string") {
        bytes = Buffer.from(bytes, "utf8");
      }
      return _crypto.default.createHash("sha1").update(bytes).digest();
    }
    var _default = sha1;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/v5.js
var require_v5 = __commonJS({
  "node_modules/uuid/dist/v5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _sha = _interopRequireDefault(require_sha1());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v5 = (0, _v.default)("v5", 80, _sha.default);
    var _default = v5;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/nil.js
var require_nil = __commonJS({
  "node_modules/uuid/dist/nil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = "00000000-0000-0000-0000-000000000000";
    exports.default = _default;
  }
});

// node_modules/uuid/dist/version.js
var require_version = __commonJS({
  "node_modules/uuid/dist/version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function version(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      return parseInt(uuid.substr(14, 1), 16);
    }
    var _default = version;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/index.js
var require_dist = __commonJS({
  "node_modules/uuid/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "v1", {
      enumerable: true,
      get: function() {
        return _v.default;
      }
    });
    Object.defineProperty(exports, "v3", {
      enumerable: true,
      get: function() {
        return _v2.default;
      }
    });
    Object.defineProperty(exports, "v4", {
      enumerable: true,
      get: function() {
        return _v3.default;
      }
    });
    Object.defineProperty(exports, "v5", {
      enumerable: true,
      get: function() {
        return _v4.default;
      }
    });
    Object.defineProperty(exports, "NIL", {
      enumerable: true,
      get: function() {
        return _nil.default;
      }
    });
    Object.defineProperty(exports, "version", {
      enumerable: true,
      get: function() {
        return _version.default;
      }
    });
    Object.defineProperty(exports, "validate", {
      enumerable: true,
      get: function() {
        return _validate.default;
      }
    });
    Object.defineProperty(exports, "stringify", {
      enumerable: true,
      get: function() {
        return _stringify.default;
      }
    });
    Object.defineProperty(exports, "parse", {
      enumerable: true,
      get: function() {
        return _parse.default;
      }
    });
    var _v = _interopRequireDefault(require_v1());
    var _v2 = _interopRequireDefault(require_v3());
    var _v3 = _interopRequireDefault(require_v4());
    var _v4 = _interopRequireDefault(require_v5());
    var _nil = _interopRequireDefault(require_nil());
    var _version = _interopRequireDefault(require_version());
    var _validate = _interopRequireDefault(require_validate());
    var _stringify = _interopRequireDefault(require_stringify());
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/constants.js
var require_constants3 = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.REQUEST_HEADER = exports.INVOCATION_ID_HEADER = exports.NO_RETRY_INCREMENT = exports.TIMEOUT_RETRY_COST = exports.RETRY_COST = exports.INITIAL_RETRY_TOKENS = exports.THROTTLING_RETRY_DELAY_BASE = exports.MAXIMUM_RETRY_DELAY = exports.DEFAULT_RETRY_DELAY_BASE = void 0;
    exports.DEFAULT_RETRY_DELAY_BASE = 100;
    exports.MAXIMUM_RETRY_DELAY = 20 * 1e3;
    exports.THROTTLING_RETRY_DELAY_BASE = 500;
    exports.INITIAL_RETRY_TOKENS = 500;
    exports.RETRY_COST = 5;
    exports.TIMEOUT_RETRY_COST = 10;
    exports.NO_RETRY_INCREMENT = 1;
    exports.INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
    exports.REQUEST_HEADER = "amz-sdk-request";
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js
var require_defaultRetryQuota = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultRetryQuota = void 0;
    var constants_1 = require_constants3();
    var getDefaultRetryQuota = (initialRetryTokens, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement = (_a = options === null || options === void 0 ? void 0 : options.noRetryIncrement) !== null && _a !== void 0 ? _a : constants_1.NO_RETRY_INCREMENT;
      const retryCost = (_b = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _b !== void 0 ? _b : constants_1.RETRY_COST;
      const timeoutRetryCost = (_c = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _c !== void 0 ? _c : constants_1.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = (error) => error.name === "TimeoutError" ? timeoutRetryCost : retryCost;
      const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;
      const retrieveRetryTokens = (error) => {
        if (!hasRetryTokens(error)) {
          throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (capacityReleaseAmount) => {
        availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens
      });
    };
    exports.getDefaultRetryQuota = getDefaultRetryQuota;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js
var require_delayDecider = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultDelayDecider = void 0;
    var constants_1 = require_constants3();
    var defaultDelayDecider = (delayBase, attempts) => Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
    exports.defaultDelayDecider = defaultDelayDecider;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js
var require_retryDecider = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultRetryDecider = void 0;
    var service_error_classification_1 = require_dist_cjs12();
    var defaultRetryDecider = (error) => {
      if (!error) {
        return false;
      }
      return (0, service_error_classification_1.isRetryableByTrait)(error) || (0, service_error_classification_1.isClockSkewError)(error) || (0, service_error_classification_1.isThrottlingError)(error) || (0, service_error_classification_1.isTransientError)(error);
    };
    exports.defaultRetryDecider = defaultRetryDecider;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StandardRetryStrategy = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var service_error_classification_1 = require_dist_cjs12();
    var uuid_1 = require_dist();
    var config_1 = require_config2();
    var constants_1 = require_constants3();
    var defaultRetryQuota_1 = require_defaultRetryQuota();
    var delayDecider_1 = require_delayDecider();
    var retryDecider_1 = require_retryDecider();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        var _a, _b, _c;
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.STANDARD;
        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;
        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;
        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(constants_1.INITIAL_RETRY_TOKENS);
      }
      shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
          maxAttempts = config_1.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
      }
      async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[constants_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[constants_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            if (options === null || options === void 0 ? void 0 : options.beforeRequest) {
              await options.beforeRequest();
            }
            const { response, output } = await next(args);
            if (options === null || options === void 0 ? void 0 : options.afterRequest) {
              options.afterRequest(response);
            }
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return { response, output };
          } catch (e) {
            const err = asSdkError(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
              const delay = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? constants_1.THROTTLING_RETRY_DELAY_BASE : constants_1.DEFAULT_RETRY_DELAY_BASE, attempts);
              totalDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
              continue;
            }
            if (!err.$metadata) {
              err.$metadata = {};
            }
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
          }
        }
      }
    };
    exports.StandardRetryStrategy = StandardRetryStrategy;
    var asSdkError = (error) => {
      if (error instanceof Error)
        return error;
      if (error instanceof Object)
        return Object.assign(new Error(), error);
      if (typeof error === "string")
        return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    };
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AdaptiveRetryStrategy = void 0;
    var config_1 = require_config2();
    var DefaultRateLimiter_1 = require_DefaultRateLimiter();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    var AdaptiveRetryStrategy = class extends StandardRetryStrategy_1.StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        const { rateLimiter, ...superOptions } = options !== null && options !== void 0 ? options : {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter_1.DefaultRateLimiter();
        this.mode = config_1.RETRY_MODES.ADAPTIVE;
      }
      async retry(next, args) {
        return super.retry(next, args, {
          beforeRequest: async () => {
            return this.rateLimiter.getSendToken();
          },
          afterRequest: (response) => {
            this.rateLimiter.updateClientSendingRate(response);
          }
        });
      }
    };
    exports.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js
var require_configurations = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS = exports.CONFIG_RETRY_MODE = exports.ENV_RETRY_MODE = exports.resolveRetryConfig = exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = exports.CONFIG_MAX_ATTEMPTS = exports.ENV_MAX_ATTEMPTS = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var AdaptiveRetryStrategy_1 = require_AdaptiveRetryStrategy();
    var config_1 = require_config2();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    exports.ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
    exports.CONFIG_MAX_ATTEMPTS = "max_attempts";
    exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        const value = env[exports.ENV_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${exports.ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[exports.CONFIG_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${exports.CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: config_1.DEFAULT_MAX_ATTEMPTS
    };
    var resolveRetryConfig = (input) => {
      var _a;
      const maxAttempts = (0, util_middleware_1.normalizeProvider)((_a = input.maxAttempts) !== null && _a !== void 0 ? _a : config_1.DEFAULT_MAX_ATTEMPTS);
      return {
        ...input,
        maxAttempts,
        retryStrategy: async () => {
          if (input.retryStrategy) {
            return input.retryStrategy;
          }
          const retryMode = await (0, util_middleware_1.normalizeProvider)(input.retryMode)();
          if (retryMode === config_1.RETRY_MODES.ADAPTIVE) {
            return new AdaptiveRetryStrategy_1.AdaptiveRetryStrategy(maxAttempts);
          }
          return new StandardRetryStrategy_1.StandardRetryStrategy(maxAttempts);
        }
      };
    };
    exports.resolveRetryConfig = resolveRetryConfig;
    exports.ENV_RETRY_MODE = "AWS_RETRY_MODE";
    exports.CONFIG_RETRY_MODE = "retry_mode";
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[exports.CONFIG_RETRY_MODE],
      default: config_1.DEFAULT_RETRY_MODE
    };
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js
var require_omitRetryHeadersMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getOmitRetryHeadersPlugin = exports.omitRetryHeadersMiddlewareOptions = exports.omitRetryHeadersMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var constants_1 = require_constants3();
    var omitRetryHeadersMiddleware = () => (next) => async (args) => {
      const { request } = args;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        delete request.headers[constants_1.INVOCATION_ID_HEADER];
        delete request.headers[constants_1.REQUEST_HEADER];
      }
      return next(args);
    };
    exports.omitRetryHeadersMiddleware = omitRetryHeadersMiddleware;
    exports.omitRetryHeadersMiddlewareOptions = {
      name: "omitRetryHeadersMiddleware",
      tags: ["RETRY", "HEADERS", "OMIT_RETRY_HEADERS"],
      relation: "before",
      toMiddleware: "awsAuthMiddleware",
      override: true
    };
    var getOmitRetryHeadersPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports.omitRetryHeadersMiddleware)(), exports.omitRetryHeadersMiddlewareOptions);
      }
    });
    exports.getOmitRetryHeadersPlugin = getOmitRetryHeadersPlugin;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js
var require_retryMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRetryPlugin = exports.retryMiddlewareOptions = exports.retryMiddleware = void 0;
    var retryMiddleware = (options) => (next, context) => async (args) => {
      const retryStrategy = await options.retryStrategy();
      if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode)
        context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
      return retryStrategy.retry(next, args);
    };
    exports.retryMiddleware = retryMiddleware;
    exports.retryMiddlewareOptions = {
      name: "retryMiddleware",
      tags: ["RETRY"],
      step: "finalizeRequest",
      priority: "high",
      override: true
    };
    var getRetryPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.retryMiddleware)(options), exports.retryMiddlewareOptions);
      }
    });
    exports.getRetryPlugin = getRetryPlugin;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/types.js
var require_types = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js
var require_dist_cjs13 = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_AdaptiveRetryStrategy(), exports);
    tslib_1.__exportStar(require_DefaultRateLimiter(), exports);
    tslib_1.__exportStar(require_StandardRetryStrategy(), exports);
    tslib_1.__exportStar(require_config2(), exports);
    tslib_1.__exportStar(require_configurations(), exports);
    tslib_1.__exportStar(require_delayDecider(), exports);
    tslib_1.__exportStar(require_omitRetryHeadersMiddleware(), exports);
    tslib_1.__exportStar(require_retryDecider(), exports);
    tslib_1.__exportStar(require_retryMiddleware(), exports);
    tslib_1.__exportStar(require_types(), exports);
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js
var require_ProviderError = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProviderError = void 0;
    var ProviderError = class extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = "ProviderError";
        Object.setPrototypeOf(this, ProviderError.prototype);
      }
      static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
      }
    };
    exports.ProviderError = ProviderError;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js
var require_CredentialsProviderError = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CredentialsProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var CredentialsProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
      }
    };
    exports.CredentialsProviderError = CredentialsProviderError;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/chain.js
var require_chain = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/chain.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chain = void 0;
    var ProviderError_1 = require_ProviderError();
    function chain(...providers) {
      return () => {
        let promise = Promise.reject(new ProviderError_1.ProviderError("No providers in chain"));
        for (const provider of providers) {
          promise = promise.catch((err) => {
            if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
              return provider();
            }
            throw err;
          });
        }
        return promise;
      };
    }
    exports.chain = chain;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js
var require_fromStatic = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromStatic = void 0;
    var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
    exports.fromStatic = fromStatic;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js
var require_memoize = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.memoize = void 0;
    var memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
    exports.memoize = memoize;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/index.js
var require_dist_cjs14 = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_CredentialsProviderError(), exports);
    tslib_1.__exportStar(require_ProviderError(), exports);
    tslib_1.__exportStar(require_chain(), exports);
    tslib_1.__exportStar(require_fromStatic(), exports);
    tslib_1.__exportStar(require_memoize(), exports);
  }
});

// node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js
var require_dist_cjs15 = __commonJS({
  "node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toHex = exports.fromHex = void 0;
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i = 0; i < 256; i++) {
      let encodedByte = i.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error("Hex encoded strings must have an even number length");
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
      }
      return out;
    }
    exports.fromHex = fromHex;
    function toHex(bytes) {
      let out = "";
      for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
      }
      return out;
    }
    exports.toHex = toHex;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js
var require_constants4 = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MAX_PRESIGNED_TTL = exports.KEY_TYPE_IDENTIFIER = exports.MAX_CACHE_SIZE = exports.UNSIGNED_PAYLOAD = exports.EVENT_ALGORITHM_IDENTIFIER = exports.ALGORITHM_IDENTIFIER_V4A = exports.ALGORITHM_IDENTIFIER = exports.UNSIGNABLE_PATTERNS = exports.SEC_HEADER_PATTERN = exports.PROXY_HEADER_PATTERN = exports.ALWAYS_UNSIGNABLE_HEADERS = exports.HOST_HEADER = exports.TOKEN_HEADER = exports.SHA256_HEADER = exports.SIGNATURE_HEADER = exports.GENERATED_HEADERS = exports.DATE_HEADER = exports.AMZ_DATE_HEADER = exports.AUTH_HEADER = exports.REGION_SET_PARAM = exports.TOKEN_QUERY_PARAM = exports.SIGNATURE_QUERY_PARAM = exports.EXPIRES_QUERY_PARAM = exports.SIGNED_HEADERS_QUERY_PARAM = exports.AMZ_DATE_QUERY_PARAM = exports.CREDENTIAL_QUERY_PARAM = exports.ALGORITHM_QUERY_PARAM = void 0;
    exports.ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
    exports.CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
    exports.AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
    exports.SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
    exports.EXPIRES_QUERY_PARAM = "X-Amz-Expires";
    exports.SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
    exports.TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
    exports.REGION_SET_PARAM = "X-Amz-Region-Set";
    exports.AUTH_HEADER = "authorization";
    exports.AMZ_DATE_HEADER = exports.AMZ_DATE_QUERY_PARAM.toLowerCase();
    exports.DATE_HEADER = "date";
    exports.GENERATED_HEADERS = [exports.AUTH_HEADER, exports.AMZ_DATE_HEADER, exports.DATE_HEADER];
    exports.SIGNATURE_HEADER = exports.SIGNATURE_QUERY_PARAM.toLowerCase();
    exports.SHA256_HEADER = "x-amz-content-sha256";
    exports.TOKEN_HEADER = exports.TOKEN_QUERY_PARAM.toLowerCase();
    exports.HOST_HEADER = "host";
    exports.ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      "cache-control": true,
      connection: true,
      expect: true,
      from: true,
      "keep-alive": true,
      "max-forwards": true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      "transfer-encoding": true,
      upgrade: true,
      "user-agent": true,
      "x-amzn-trace-id": true
    };
    exports.PROXY_HEADER_PATTERN = /^proxy-/;
    exports.SEC_HEADER_PATTERN = /^sec-/;
    exports.UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
    exports.ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
    exports.ALGORITHM_IDENTIFIER_V4A = "AWS4-ECDSA-P256-SHA256";
    exports.EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
    exports.UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
    exports.MAX_CACHE_SIZE = 50;
    exports.KEY_TYPE_IDENTIFIER = "aws4_request";
    exports.MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js
var require_credentialDerivation = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.clearCredentialCache = exports.getSigningKey = exports.createScope = void 0;
    var util_hex_encoding_1 = require_dist_cjs15();
    var constants_1 = require_constants4();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${constants_1.KEY_TYPE_IDENTIFIER}`;
    exports.createScope = createScope;
    var getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${(0, util_hex_encoding_1.toHex)(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > constants_1.MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, constants_1.KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return signingKeyCache[cacheKey] = key;
    };
    exports.getSigningKey = getSigningKey;
    var clearCredentialCache = () => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    };
    exports.clearCredentialCache = clearCredentialCache;
    var hmac = (ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update(data);
      return hash.digest();
    };
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js
var require_getCanonicalHeaders = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCanonicalHeaders = void 0;
    var constants_1 = require_constants4();
    var getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in constants_1.ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || constants_1.PROXY_HEADER_PATTERN.test(canonicalHeaderName) || constants_1.SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
          if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
      }
      return canonical;
    };
    exports.getCanonicalHeaders = getCanonicalHeaders;
  }
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js
var require_escape_uri = __commonJS({
  "node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeUri = void 0;
    var escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    exports.escapeUri = escapeUri;
    var hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;
  }
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js
var require_escape_uri_path = __commonJS({
  "node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeUriPath = void 0;
    var escape_uri_1 = require_escape_uri();
    var escapeUriPath = (uri) => uri.split("/").map(escape_uri_1.escapeUri).join("/");
    exports.escapeUriPath = escapeUriPath;
  }
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js
var require_dist_cjs16 = __commonJS({
  "node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_escape_uri(), exports);
    tslib_1.__exportStar(require_escape_uri_path(), exports);
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js
var require_getCanonicalQuery = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCanonicalQuery = void 0;
    var util_uri_escape_1 = require_dist_cjs16();
    var constants_1 = require_constants4();
    var getCanonicalQuery = ({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === constants_1.SIGNATURE_HEADER) {
          continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === "string") {
          serialized[key] = `${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value)}`;
        } else if (Array.isArray(value)) {
          serialized[key] = value.slice(0).sort().reduce((encoded, value2) => encoded.concat([`${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value2)}`]), []).join("&");
        }
      }
      return keys.map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
    };
    exports.getCanonicalQuery = getCanonicalQuery;
  }
});

// node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js
var require_dist_cjs17 = __commonJS({
  "node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isArrayBuffer = void 0;
    var isArrayBuffer = (arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
    exports.isArrayBuffer = isArrayBuffer;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js
var require_getPayloadHash = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPayloadHash = void 0;
    var is_array_buffer_1 = require_dist_cjs17();
    var util_hex_encoding_1 = require_dist_cjs15();
    var constants_1 = require_constants4();
    var getPayloadHash = async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === constants_1.SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      } else if (typeof body === "string" || ArrayBuffer.isView(body) || (0, is_array_buffer_1.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update(body);
        return (0, util_hex_encoding_1.toHex)(await hashCtor.digest());
      }
      return constants_1.UNSIGNED_PAYLOAD;
    };
    exports.getPayloadHash = getPayloadHash;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js
var require_headerUtil = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deleteHeader = exports.getHeaderValue = exports.hasHeader = void 0;
    var hasHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
    exports.hasHeader = hasHeader;
    var getHeaderValue = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return headers[headerName];
        }
      }
      return void 0;
    };
    exports.getHeaderValue = getHeaderValue;
    var deleteHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          delete headers[headerName];
        }
      }
    };
    exports.deleteHeader = deleteHeader;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js
var require_cloneRequest = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cloneQuery = exports.cloneRequest = void 0;
    var cloneRequest = ({ headers, query, ...rest }) => ({
      ...rest,
      headers: { ...headers },
      query: query ? (0, exports.cloneQuery)(query) : void 0
    });
    exports.cloneRequest = cloneRequest;
    var cloneQuery = (query) => Object.keys(query).reduce((carry, paramName) => {
      const param = query[paramName];
      return {
        ...carry,
        [paramName]: Array.isArray(param) ? [...param] : param
      };
    }, {});
    exports.cloneQuery = cloneQuery;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js
var require_moveHeadersToQuery = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.moveHeadersToQuery = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var moveHeadersToQuery = (request, options = {}) => {
      var _a;
      const { headers, query = {} } = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !((_a = options.unhoistableHeaders) === null || _a === void 0 ? void 0 : _a.has(lname))) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request,
        headers,
        query
      };
    };
    exports.moveHeadersToQuery = moveHeadersToQuery;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js
var require_prepareRequest = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.prepareRequest = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var constants_1 = require_constants4();
    var prepareRequest = (request) => {
      request = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const headerName of Object.keys(request.headers)) {
        if (constants_1.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request.headers[headerName];
        }
      }
      return request;
    };
    exports.prepareRequest = prepareRequest;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js
var require_utilDate = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toDate = exports.iso8601 = void 0;
    var iso8601 = (time) => (0, exports.toDate)(time).toISOString().replace(/\.\d{3}Z$/, "Z");
    exports.iso8601 = iso8601;
    var toDate = (time) => {
      if (typeof time === "number") {
        return new Date(time * 1e3);
      }
      if (typeof time === "string") {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    };
    exports.toDate = toDate;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js
var require_SignatureV4 = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SignatureV4 = void 0;
    var util_hex_encoding_1 = require_dist_cjs15();
    var util_middleware_1 = require_dist_cjs6();
    var constants_1 = require_constants4();
    var credentialDerivation_1 = require_credentialDerivation();
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    var getPayloadHash_1 = require_getPayloadHash();
    var headerUtil_1 = require_headerUtil();
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    var prepareRequest_1 = require_prepareRequest();
    var utilDate_1 = require_utilDate();
    var SignatureV4 = class {
      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = (0, util_middleware_1.normalizeProvider)(region);
        this.credentialProvider = (0, util_middleware_1.normalizeProvider)(credentials);
      }
      async presign(originalRequest, options = {}) {
        const { signingDate = new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService } = options;
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > constants_1.MAX_PRESIGNED_TTL) {
          return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
        }
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const request = (0, moveHeadersToQuery_1.moveHeadersToQuery)((0, prepareRequest_1.prepareRequest)(originalRequest), { unhoistableHeaders });
        if (credentials.sessionToken) {
          request.query[constants_1.TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[constants_1.ALGORITHM_QUERY_PARAM] = constants_1.ALGORITHM_IDENTIFIER;
        request.query[constants_1.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[constants_1.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[constants_1.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        request.query[constants_1.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[constants_1.SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await (0, getPayloadHash_1.getPayloadHash)(originalRequest, this.sha256)));
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === "string") {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent({ headers, payload }, { signingDate = new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const hashedPayload = await (0, getPayloadHash_1.getPayloadHash)({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, util_hex_encoding_1.toHex)(await hash.digest());
        const stringToSign = [
          constants_1.EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update(stringToSign);
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      async signRequest(requestToSign, { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const request = (0, prepareRequest_1.prepareRequest)(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        request.headers[constants_1.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[constants_1.TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await (0, getPayloadHash_1.getPayloadHash)(request, this.sha256);
        if (!(0, headerUtil_1.hasHeader)(constants_1.SHA256_HEADER, request.headers) && this.applyChecksum) {
          request.headers[constants_1.SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
        request.headers[constants_1.AUTH_HEADER] = `${constants_1.ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
        return request;
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${(0, getCanonicalQuery_1.getCanonicalQuery)(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update(canonicalRequest);
        const hashedRequest = await hash.digest();
        return `${constants_1.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, util_hex_encoding_1.toHex)(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split("/")) {
            if ((pathSegment === null || pathSegment === void 0 ? void 0 : pathSegment.length) === 0)
              continue;
            if (pathSegment === ".")
              continue;
            if (pathSegment === "..") {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${(path === null || path === void 0 ? void 0 : path.startsWith("/")) ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && (path === null || path === void 0 ? void 0 : path.endsWith("/")) ? "/" : ""}`;
          const doubleEncoded = encodeURIComponent(normalizedPath);
          return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update(stringToSign);
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return (0, credentialDerivation_1.getSigningKey)(this.sha256, credentials, shortDate, region, service || this.service);
      }
    };
    exports.SignatureV4 = SignatureV4;
    var formatDate = (now) => {
      const longDate = (0, utilDate_1.iso8601)(now).replace(/[\-:]/g, "");
      return {
        longDate,
        shortDate: longDate.slice(0, 8)
      };
    };
    var getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(";");
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/index.js
var require_dist_cjs18 = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.prepareRequest = exports.moveHeadersToQuery = exports.getPayloadHash = exports.getCanonicalQuery = exports.getCanonicalHeaders = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_SignatureV4(), exports);
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    Object.defineProperty(exports, "getCanonicalHeaders", { enumerable: true, get: function() {
      return getCanonicalHeaders_1.getCanonicalHeaders;
    } });
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    Object.defineProperty(exports, "getCanonicalQuery", { enumerable: true, get: function() {
      return getCanonicalQuery_1.getCanonicalQuery;
    } });
    var getPayloadHash_1 = require_getPayloadHash();
    Object.defineProperty(exports, "getPayloadHash", { enumerable: true, get: function() {
      return getPayloadHash_1.getPayloadHash;
    } });
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    Object.defineProperty(exports, "moveHeadersToQuery", { enumerable: true, get: function() {
      return moveHeadersToQuery_1.moveHeadersToQuery;
    } });
    var prepareRequest_1 = require_prepareRequest();
    Object.defineProperty(exports, "prepareRequest", { enumerable: true, get: function() {
      return prepareRequest_1.prepareRequest;
    } });
    tslib_1.__exportStar(require_credentialDerivation(), exports);
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js
var require_configurations2 = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSigV4AuthConfig = exports.resolveAwsAuthConfig = void 0;
    var property_provider_1 = require_dist_cjs14();
    var signature_v4_1 = require_dist_cjs18();
    var CREDENTIAL_EXPIRE_WINDOW = 3e5;
    var resolveAwsAuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = normalizeProvider(input.signer);
      } else {
        signer = () => normalizeProvider(input.region)().then(async (region) => [
          await input.regionInfoProvider(region, {
            useFipsEndpoint: await input.useFipsEndpoint(),
            useDualstackEndpoint: await input.useDualstackEndpoint()
          }) || {},
          region
        ]).then(([regionInfo, region]) => {
          const { signingRegion, signingService } = regionInfo;
          input.signingRegion = input.signingRegion || signingRegion || region;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const signerConstructor = input.signerConstructor || signature_v4_1.SignatureV4;
          return new signerConstructor(params);
        });
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    };
    exports.resolveAwsAuthConfig = resolveAwsAuthConfig;
    var resolveSigV4AuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = normalizeProvider(input.signer);
      } else {
        signer = normalizeProvider(new signature_v4_1.SignatureV4({
          credentials: normalizedCreds,
          region: input.region,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        }));
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    };
    exports.resolveSigV4AuthConfig = resolveSigV4AuthConfig;
    var normalizeProvider = (input) => {
      if (typeof input === "object") {
        const promisified = Promise.resolve(input);
        return () => promisified;
      }
      return input;
    };
    var normalizeCredentialProvider = (credentials) => {
      if (typeof credentials === "function") {
        return (0, property_provider_1.memoize)(credentials, (credentials2) => credentials2.expiration !== void 0 && credentials2.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials2) => credentials2.expiration !== void 0);
      }
      return normalizeProvider(credentials);
    };
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js
var require_getSkewCorrectedDate = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSkewCorrectedDate = void 0;
    var getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
    exports.getSkewCorrectedDate = getSkewCorrectedDate;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js
var require_isClockSkewed = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isClockSkewed = void 0;
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var isClockSkewed = (clockTime, systemClockOffset) => Math.abs((0, getSkewCorrectedDate_1.getSkewCorrectedDate)(systemClockOffset).getTime() - clockTime) >= 3e5;
    exports.isClockSkewed = isClockSkewed;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js
var require_getUpdatedSystemClockOffset = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUpdatedSystemClockOffset = void 0;
    var isClockSkewed_1 = require_isClockSkewed();
    var getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if ((0, isClockSkewed_1.isClockSkewed)(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
    exports.getUpdatedSystemClockOffset = getUpdatedSystemClockOffset;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js
var require_middleware = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin = exports.awsAuthMiddlewareOptions = exports.awsAuthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var getUpdatedSystemClockOffset_1 = require_getUpdatedSystemClockOffset();
    var awsAuthMiddleware = (options) => (next, context) => async function(args) {
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const signer = await options.signer();
      const output = await next({
        ...args,
        request: await signer.sign(args.request, {
          signingDate: (0, getSkewCorrectedDate_1.getSkewCorrectedDate)(options.systemClockOffset),
          signingRegion: context["signing_region"],
          signingService: context["signing_service"]
        })
      }).catch((error) => {
        var _a;
        const serverTime = (_a = error.ServerTime) !== null && _a !== void 0 ? _a : getDateHeader(error.$response);
        if (serverTime) {
          options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(serverTime, options.systemClockOffset);
        }
        throw error;
      });
      const dateHeader = getDateHeader(output.response);
      if (dateHeader) {
        options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(dateHeader, options.systemClockOffset);
      }
      return output;
    };
    exports.awsAuthMiddleware = awsAuthMiddleware;
    var getDateHeader = (response) => {
      var _a, _b, _c;
      return protocol_http_1.HttpResponse.isInstance(response) ? (_b = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.date) !== null && _b !== void 0 ? _b : (_c = response.headers) === null || _c === void 0 ? void 0 : _c.Date : void 0;
    };
    exports.awsAuthMiddlewareOptions = {
      name: "awsAuthMiddleware",
      tags: ["SIGNATURE", "AWSAUTH"],
      relation: "after",
      toMiddleware: "retryMiddleware",
      override: true
    };
    var getAwsAuthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports.awsAuthMiddleware)(options), exports.awsAuthMiddlewareOptions);
      }
    });
    exports.getAwsAuthPlugin = getAwsAuthPlugin;
    exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js
var require_dist_cjs19 = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_configurations2(), exports);
    tslib_1.__exportStar(require_middleware(), exports);
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js
var require_configurations3 = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveUserAgentConfig = void 0;
    function resolveUserAgentConfig(input) {
      return {
        ...input,
        customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent
      };
    }
    exports.resolveUserAgentConfig = resolveUserAgentConfig;
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js
var require_constants5 = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UA_ESCAPE_REGEX = exports.SPACE = exports.X_AMZ_USER_AGENT = exports.USER_AGENT = void 0;
    exports.USER_AGENT = "user-agent";
    exports.X_AMZ_USER_AGENT = "x-amz-user-agent";
    exports.SPACE = " ";
    exports.UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js
var require_user_agent_middleware = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUserAgentPlugin = exports.getUserAgentMiddlewareOptions = exports.userAgentMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var constants_1 = require_constants5();
    var userAgentMiddleware = (options) => (next, context) => async (args) => {
      var _a, _b;
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request))
        return next(args);
      const { headers } = request;
      const userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      const customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
      const sdkUserAgentValue = [...defaultUserAgent, ...userAgent, ...customUserAgent].join(constants_1.SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(constants_1.SPACE);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[constants_1.X_AMZ_USER_AGENT] = headers[constants_1.X_AMZ_USER_AGENT] ? `${headers[constants_1.USER_AGENT]} ${normalUAValue}` : normalUAValue;
        }
        headers[constants_1.USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[constants_1.X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request
      });
    };
    exports.userAgentMiddleware = userAgentMiddleware;
    var escapeUserAgent = ([name, version]) => {
      const prefixSeparatorIndex = name.indexOf("/");
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version].filter((item) => item && item.length > 0).map((item) => item === null || item === void 0 ? void 0 : item.replace(constants_1.UA_ESCAPE_REGEX, "_")).join("/");
    };
    exports.getUserAgentMiddlewareOptions = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    var getUserAgentPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.userAgentMiddleware)(config), exports.getUserAgentMiddlewareOptions);
      }
    });
    exports.getUserAgentPlugin = getUserAgentPlugin;
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs20 = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_configurations3(), exports);
    tslib_1.__exportStar(require_user_agent_middleware(), exports);
  }
});

// node_modules/@aws-sdk/client-kms/package.json
var require_package = __commonJS({
  "node_modules/@aws-sdk/client-kms/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-kms",
      description: "AWS SDK for JavaScript Kms Client for Node.js, Browser and React Native",
      version: "3.121.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/client-sts": "3.121.0",
        "@aws-sdk/config-resolver": "3.110.0",
        "@aws-sdk/credential-provider-node": "3.121.0",
        "@aws-sdk/fetch-http-handler": "3.110.0",
        "@aws-sdk/hash-node": "3.110.0",
        "@aws-sdk/invalid-dependency": "3.110.0",
        "@aws-sdk/middleware-content-length": "3.110.0",
        "@aws-sdk/middleware-host-header": "3.110.0",
        "@aws-sdk/middleware-logger": "3.110.0",
        "@aws-sdk/middleware-recursion-detection": "3.110.0",
        "@aws-sdk/middleware-retry": "3.118.1",
        "@aws-sdk/middleware-serde": "3.110.0",
        "@aws-sdk/middleware-signing": "3.110.0",
        "@aws-sdk/middleware-stack": "3.110.0",
        "@aws-sdk/middleware-user-agent": "3.110.0",
        "@aws-sdk/node-config-provider": "3.110.0",
        "@aws-sdk/node-http-handler": "3.118.1",
        "@aws-sdk/protocol-http": "3.110.0",
        "@aws-sdk/smithy-client": "3.110.0",
        "@aws-sdk/types": "3.110.0",
        "@aws-sdk/url-parser": "3.110.0",
        "@aws-sdk/util-base64-browser": "3.109.0",
        "@aws-sdk/util-base64-node": "3.55.0",
        "@aws-sdk/util-body-length-browser": "3.55.0",
        "@aws-sdk/util-body-length-node": "3.55.0",
        "@aws-sdk/util-defaults-mode-browser": "3.110.0",
        "@aws-sdk/util-defaults-mode-node": "3.110.0",
        "@aws-sdk/util-user-agent-browser": "3.110.0",
        "@aws-sdk/util-user-agent-node": "3.118.0",
        "@aws-sdk/util-utf8-browser": "3.109.0",
        "@aws-sdk/util-utf8-node": "3.109.0",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.58.0",
        "@tsconfig/recommended": "1.0.1",
        "@types/node": "^12.7.5",
        concurrently: "7.0.0",
        "downlevel-dts": "0.7.0",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      engines: {
        node: ">=12.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-kms",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-kms"
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js
var require_STSServiceException = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSServiceException = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var STSServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, STSServiceException.prototype);
      }
    };
    exports.STSServiceException = STSServiceException;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js
var require_models_02 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetSessionTokenResponse = exports.GetSessionTokenRequest = exports.GetFederationTokenResponse = exports.FederatedUser = exports.GetFederationTokenRequest = exports.GetCallerIdentityResponse = exports.GetCallerIdentityRequest = exports.GetAccessKeyInfoResponse = exports.GetAccessKeyInfoRequest = exports.InvalidAuthorizationMessageException = exports.DecodeAuthorizationMessageResponse = exports.DecodeAuthorizationMessageRequest = exports.IDPCommunicationErrorException = exports.AssumeRoleWithWebIdentityResponse = exports.AssumeRoleWithWebIdentityRequest = exports.InvalidIdentityTokenException = exports.IDPRejectedClaimException = exports.AssumeRoleWithSAMLResponse = exports.AssumeRoleWithSAMLRequest = exports.RegionDisabledException = exports.PackedPolicyTooLargeException = exports.MalformedPolicyDocumentException = exports.ExpiredTokenException = exports.AssumeRoleResponse = exports.Credentials = exports.AssumeRoleRequest = exports.Tag = exports.PolicyDescriptorType = exports.AssumedRoleUser = void 0;
    var STSServiceException_1 = require_STSServiceException();
    var AssumedRoleUser;
    (function(AssumedRoleUser2) {
      AssumedRoleUser2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AssumedRoleUser = exports.AssumedRoleUser || (exports.AssumedRoleUser = {}));
    var PolicyDescriptorType;
    (function(PolicyDescriptorType2) {
      PolicyDescriptorType2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(PolicyDescriptorType = exports.PolicyDescriptorType || (exports.PolicyDescriptorType = {}));
    var Tag;
    (function(Tag2) {
      Tag2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(Tag = exports.Tag || (exports.Tag = {}));
    var AssumeRoleRequest;
    (function(AssumeRoleRequest2) {
      AssumeRoleRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AssumeRoleRequest = exports.AssumeRoleRequest || (exports.AssumeRoleRequest = {}));
    var Credentials;
    (function(Credentials2) {
      Credentials2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(Credentials = exports.Credentials || (exports.Credentials = {}));
    var AssumeRoleResponse;
    (function(AssumeRoleResponse2) {
      AssumeRoleResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AssumeRoleResponse = exports.AssumeRoleResponse || (exports.AssumeRoleResponse = {}));
    var ExpiredTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExpiredTokenException.prototype);
      }
    };
    exports.ExpiredTokenException = ExpiredTokenException;
    var MalformedPolicyDocumentException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "MalformedPolicyDocumentException",
          $fault: "client",
          ...opts
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
      }
    };
    exports.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
    var PackedPolicyTooLargeException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "PackedPolicyTooLargeException",
          $fault: "client",
          ...opts
        });
        this.name = "PackedPolicyTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PackedPolicyTooLargeException.prototype);
      }
    };
    exports.PackedPolicyTooLargeException = PackedPolicyTooLargeException;
    var RegionDisabledException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "RegionDisabledException",
          $fault: "client",
          ...opts
        });
        this.name = "RegionDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RegionDisabledException.prototype);
      }
    };
    exports.RegionDisabledException = RegionDisabledException;
    var AssumeRoleWithSAMLRequest;
    (function(AssumeRoleWithSAMLRequest2) {
      AssumeRoleWithSAMLRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AssumeRoleWithSAMLRequest = exports.AssumeRoleWithSAMLRequest || (exports.AssumeRoleWithSAMLRequest = {}));
    var AssumeRoleWithSAMLResponse;
    (function(AssumeRoleWithSAMLResponse2) {
      AssumeRoleWithSAMLResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AssumeRoleWithSAMLResponse = exports.AssumeRoleWithSAMLResponse || (exports.AssumeRoleWithSAMLResponse = {}));
    var IDPRejectedClaimException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "IDPRejectedClaimException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPRejectedClaimException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IDPRejectedClaimException.prototype);
      }
    };
    exports.IDPRejectedClaimException = IDPRejectedClaimException;
    var InvalidIdentityTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "InvalidIdentityTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidIdentityTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidIdentityTokenException.prototype);
      }
    };
    exports.InvalidIdentityTokenException = InvalidIdentityTokenException;
    var AssumeRoleWithWebIdentityRequest;
    (function(AssumeRoleWithWebIdentityRequest2) {
      AssumeRoleWithWebIdentityRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AssumeRoleWithWebIdentityRequest = exports.AssumeRoleWithWebIdentityRequest || (exports.AssumeRoleWithWebIdentityRequest = {}));
    var AssumeRoleWithWebIdentityResponse;
    (function(AssumeRoleWithWebIdentityResponse2) {
      AssumeRoleWithWebIdentityResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AssumeRoleWithWebIdentityResponse = exports.AssumeRoleWithWebIdentityResponse || (exports.AssumeRoleWithWebIdentityResponse = {}));
    var IDPCommunicationErrorException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "IDPCommunicationErrorException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPCommunicationErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IDPCommunicationErrorException.prototype);
      }
    };
    exports.IDPCommunicationErrorException = IDPCommunicationErrorException;
    var DecodeAuthorizationMessageRequest;
    (function(DecodeAuthorizationMessageRequest2) {
      DecodeAuthorizationMessageRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DecodeAuthorizationMessageRequest = exports.DecodeAuthorizationMessageRequest || (exports.DecodeAuthorizationMessageRequest = {}));
    var DecodeAuthorizationMessageResponse;
    (function(DecodeAuthorizationMessageResponse2) {
      DecodeAuthorizationMessageResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DecodeAuthorizationMessageResponse = exports.DecodeAuthorizationMessageResponse || (exports.DecodeAuthorizationMessageResponse = {}));
    var InvalidAuthorizationMessageException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "InvalidAuthorizationMessageException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAuthorizationMessageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAuthorizationMessageException.prototype);
      }
    };
    exports.InvalidAuthorizationMessageException = InvalidAuthorizationMessageException;
    var GetAccessKeyInfoRequest;
    (function(GetAccessKeyInfoRequest2) {
      GetAccessKeyInfoRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetAccessKeyInfoRequest = exports.GetAccessKeyInfoRequest || (exports.GetAccessKeyInfoRequest = {}));
    var GetAccessKeyInfoResponse;
    (function(GetAccessKeyInfoResponse2) {
      GetAccessKeyInfoResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetAccessKeyInfoResponse = exports.GetAccessKeyInfoResponse || (exports.GetAccessKeyInfoResponse = {}));
    var GetCallerIdentityRequest;
    (function(GetCallerIdentityRequest2) {
      GetCallerIdentityRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetCallerIdentityRequest = exports.GetCallerIdentityRequest || (exports.GetCallerIdentityRequest = {}));
    var GetCallerIdentityResponse;
    (function(GetCallerIdentityResponse2) {
      GetCallerIdentityResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetCallerIdentityResponse = exports.GetCallerIdentityResponse || (exports.GetCallerIdentityResponse = {}));
    var GetFederationTokenRequest;
    (function(GetFederationTokenRequest2) {
      GetFederationTokenRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetFederationTokenRequest = exports.GetFederationTokenRequest || (exports.GetFederationTokenRequest = {}));
    var FederatedUser;
    (function(FederatedUser2) {
      FederatedUser2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(FederatedUser = exports.FederatedUser || (exports.FederatedUser = {}));
    var GetFederationTokenResponse;
    (function(GetFederationTokenResponse2) {
      GetFederationTokenResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetFederationTokenResponse = exports.GetFederationTokenResponse || (exports.GetFederationTokenResponse = {}));
    var GetSessionTokenRequest;
    (function(GetSessionTokenRequest2) {
      GetSessionTokenRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetSessionTokenRequest = exports.GetSessionTokenRequest || (exports.GetSessionTokenRequest = {}));
    var GetSessionTokenResponse;
    (function(GetSessionTokenResponse2) {
      GetSessionTokenResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetSessionTokenResponse = exports.GetSessionTokenResponse || (exports.GetSessionTokenResponse = {}));
  }
});

// node_modules/entities/lib/maps/entities.json
var require_entities = __commonJS({
  "node_modules/entities/lib/maps/entities.json"(exports, module2) {
    module2.exports = { Aacute: "\xC1", aacute: "\xE1", Abreve: "\u0102", abreve: "\u0103", ac: "\u223E", acd: "\u223F", acE: "\u223E\u0333", Acirc: "\xC2", acirc: "\xE2", acute: "\xB4", Acy: "\u0410", acy: "\u0430", AElig: "\xC6", aelig: "\xE6", af: "\u2061", Afr: "\u{1D504}", afr: "\u{1D51E}", Agrave: "\xC0", agrave: "\xE0", alefsym: "\u2135", aleph: "\u2135", Alpha: "\u0391", alpha: "\u03B1", Amacr: "\u0100", amacr: "\u0101", amalg: "\u2A3F", amp: "&", AMP: "&", andand: "\u2A55", And: "\u2A53", and: "\u2227", andd: "\u2A5C", andslope: "\u2A58", andv: "\u2A5A", ang: "\u2220", ange: "\u29A4", angle: "\u2220", angmsdaa: "\u29A8", angmsdab: "\u29A9", angmsdac: "\u29AA", angmsdad: "\u29AB", angmsdae: "\u29AC", angmsdaf: "\u29AD", angmsdag: "\u29AE", angmsdah: "\u29AF", angmsd: "\u2221", angrt: "\u221F", angrtvb: "\u22BE", angrtvbd: "\u299D", angsph: "\u2222", angst: "\xC5", angzarr: "\u237C", Aogon: "\u0104", aogon: "\u0105", Aopf: "\u{1D538}", aopf: "\u{1D552}", apacir: "\u2A6F", ap: "\u2248", apE: "\u2A70", ape: "\u224A", apid: "\u224B", apos: "'", ApplyFunction: "\u2061", approx: "\u2248", approxeq: "\u224A", Aring: "\xC5", aring: "\xE5", Ascr: "\u{1D49C}", ascr: "\u{1D4B6}", Assign: "\u2254", ast: "*", asymp: "\u2248", asympeq: "\u224D", Atilde: "\xC3", atilde: "\xE3", Auml: "\xC4", auml: "\xE4", awconint: "\u2233", awint: "\u2A11", backcong: "\u224C", backepsilon: "\u03F6", backprime: "\u2035", backsim: "\u223D", backsimeq: "\u22CD", Backslash: "\u2216", Barv: "\u2AE7", barvee: "\u22BD", barwed: "\u2305", Barwed: "\u2306", barwedge: "\u2305", bbrk: "\u23B5", bbrktbrk: "\u23B6", bcong: "\u224C", Bcy: "\u0411", bcy: "\u0431", bdquo: "\u201E", becaus: "\u2235", because: "\u2235", Because: "\u2235", bemptyv: "\u29B0", bepsi: "\u03F6", bernou: "\u212C", Bernoullis: "\u212C", Beta: "\u0392", beta: "\u03B2", beth: "\u2136", between: "\u226C", Bfr: "\u{1D505}", bfr: "\u{1D51F}", bigcap: "\u22C2", bigcirc: "\u25EF", bigcup: "\u22C3", bigodot: "\u2A00", bigoplus: "\u2A01", bigotimes: "\u2A02", bigsqcup: "\u2A06", bigstar: "\u2605", bigtriangledown: "\u25BD", bigtriangleup: "\u25B3", biguplus: "\u2A04", bigvee: "\u22C1", bigwedge: "\u22C0", bkarow: "\u290D", blacklozenge: "\u29EB", blacksquare: "\u25AA", blacktriangle: "\u25B4", blacktriangledown: "\u25BE", blacktriangleleft: "\u25C2", blacktriangleright: "\u25B8", blank: "\u2423", blk12: "\u2592", blk14: "\u2591", blk34: "\u2593", block: "\u2588", bne: "=\u20E5", bnequiv: "\u2261\u20E5", bNot: "\u2AED", bnot: "\u2310", Bopf: "\u{1D539}", bopf: "\u{1D553}", bot: "\u22A5", bottom: "\u22A5", bowtie: "\u22C8", boxbox: "\u29C9", boxdl: "\u2510", boxdL: "\u2555", boxDl: "\u2556", boxDL: "\u2557", boxdr: "\u250C", boxdR: "\u2552", boxDr: "\u2553", boxDR: "\u2554", boxh: "\u2500", boxH: "\u2550", boxhd: "\u252C", boxHd: "\u2564", boxhD: "\u2565", boxHD: "\u2566", boxhu: "\u2534", boxHu: "\u2567", boxhU: "\u2568", boxHU: "\u2569", boxminus: "\u229F", boxplus: "\u229E", boxtimes: "\u22A0", boxul: "\u2518", boxuL: "\u255B", boxUl: "\u255C", boxUL: "\u255D", boxur: "\u2514", boxuR: "\u2558", boxUr: "\u2559", boxUR: "\u255A", boxv: "\u2502", boxV: "\u2551", boxvh: "\u253C", boxvH: "\u256A", boxVh: "\u256B", boxVH: "\u256C", boxvl: "\u2524", boxvL: "\u2561", boxVl: "\u2562", boxVL: "\u2563", boxvr: "\u251C", boxvR: "\u255E", boxVr: "\u255F", boxVR: "\u2560", bprime: "\u2035", breve: "\u02D8", Breve: "\u02D8", brvbar: "\xA6", bscr: "\u{1D4B7}", Bscr: "\u212C", bsemi: "\u204F", bsim: "\u223D", bsime: "\u22CD", bsolb: "\u29C5", bsol: "\\", bsolhsub: "\u27C8", bull: "\u2022", bullet: "\u2022", bump: "\u224E", bumpE: "\u2AAE", bumpe: "\u224F", Bumpeq: "\u224E", bumpeq: "\u224F", Cacute: "\u0106", cacute: "\u0107", capand: "\u2A44", capbrcup: "\u2A49", capcap: "\u2A4B", cap: "\u2229", Cap: "\u22D2", capcup: "\u2A47", capdot: "\u2A40", CapitalDifferentialD: "\u2145", caps: "\u2229\uFE00", caret: "\u2041", caron: "\u02C7", Cayleys: "\u212D", ccaps: "\u2A4D", Ccaron: "\u010C", ccaron: "\u010D", Ccedil: "\xC7", ccedil: "\xE7", Ccirc: "\u0108", ccirc: "\u0109", Cconint: "\u2230", ccups: "\u2A4C", ccupssm: "\u2A50", Cdot: "\u010A", cdot: "\u010B", cedil: "\xB8", Cedilla: "\xB8", cemptyv: "\u29B2", cent: "\xA2", centerdot: "\xB7", CenterDot: "\xB7", cfr: "\u{1D520}", Cfr: "\u212D", CHcy: "\u0427", chcy: "\u0447", check: "\u2713", checkmark: "\u2713", Chi: "\u03A7", chi: "\u03C7", circ: "\u02C6", circeq: "\u2257", circlearrowleft: "\u21BA", circlearrowright: "\u21BB", circledast: "\u229B", circledcirc: "\u229A", circleddash: "\u229D", CircleDot: "\u2299", circledR: "\xAE", circledS: "\u24C8", CircleMinus: "\u2296", CirclePlus: "\u2295", CircleTimes: "\u2297", cir: "\u25CB", cirE: "\u29C3", cire: "\u2257", cirfnint: "\u2A10", cirmid: "\u2AEF", cirscir: "\u29C2", ClockwiseContourIntegral: "\u2232", CloseCurlyDoubleQuote: "\u201D", CloseCurlyQuote: "\u2019", clubs: "\u2663", clubsuit: "\u2663", colon: ":", Colon: "\u2237", Colone: "\u2A74", colone: "\u2254", coloneq: "\u2254", comma: ",", commat: "@", comp: "\u2201", compfn: "\u2218", complement: "\u2201", complexes: "\u2102", cong: "\u2245", congdot: "\u2A6D", Congruent: "\u2261", conint: "\u222E", Conint: "\u222F", ContourIntegral: "\u222E", copf: "\u{1D554}", Copf: "\u2102", coprod: "\u2210", Coproduct: "\u2210", copy: "\xA9", COPY: "\xA9", copysr: "\u2117", CounterClockwiseContourIntegral: "\u2233", crarr: "\u21B5", cross: "\u2717", Cross: "\u2A2F", Cscr: "\u{1D49E}", cscr: "\u{1D4B8}", csub: "\u2ACF", csube: "\u2AD1", csup: "\u2AD0", csupe: "\u2AD2", ctdot: "\u22EF", cudarrl: "\u2938", cudarrr: "\u2935", cuepr: "\u22DE", cuesc: "\u22DF", cularr: "\u21B6", cularrp: "\u293D", cupbrcap: "\u2A48", cupcap: "\u2A46", CupCap: "\u224D", cup: "\u222A", Cup: "\u22D3", cupcup: "\u2A4A", cupdot: "\u228D", cupor: "\u2A45", cups: "\u222A\uFE00", curarr: "\u21B7", curarrm: "\u293C", curlyeqprec: "\u22DE", curlyeqsucc: "\u22DF", curlyvee: "\u22CE", curlywedge: "\u22CF", curren: "\xA4", curvearrowleft: "\u21B6", curvearrowright: "\u21B7", cuvee: "\u22CE", cuwed: "\u22CF", cwconint: "\u2232", cwint: "\u2231", cylcty: "\u232D", dagger: "\u2020", Dagger: "\u2021", daleth: "\u2138", darr: "\u2193", Darr: "\u21A1", dArr: "\u21D3", dash: "\u2010", Dashv: "\u2AE4", dashv: "\u22A3", dbkarow: "\u290F", dblac: "\u02DD", Dcaron: "\u010E", dcaron: "\u010F", Dcy: "\u0414", dcy: "\u0434", ddagger: "\u2021", ddarr: "\u21CA", DD: "\u2145", dd: "\u2146", DDotrahd: "\u2911", ddotseq: "\u2A77", deg: "\xB0", Del: "\u2207", Delta: "\u0394", delta: "\u03B4", demptyv: "\u29B1", dfisht: "\u297F", Dfr: "\u{1D507}", dfr: "\u{1D521}", dHar: "\u2965", dharl: "\u21C3", dharr: "\u21C2", DiacriticalAcute: "\xB4", DiacriticalDot: "\u02D9", DiacriticalDoubleAcute: "\u02DD", DiacriticalGrave: "`", DiacriticalTilde: "\u02DC", diam: "\u22C4", diamond: "\u22C4", Diamond: "\u22C4", diamondsuit: "\u2666", diams: "\u2666", die: "\xA8", DifferentialD: "\u2146", digamma: "\u03DD", disin: "\u22F2", div: "\xF7", divide: "\xF7", divideontimes: "\u22C7", divonx: "\u22C7", DJcy: "\u0402", djcy: "\u0452", dlcorn: "\u231E", dlcrop: "\u230D", dollar: "$", Dopf: "\u{1D53B}", dopf: "\u{1D555}", Dot: "\xA8", dot: "\u02D9", DotDot: "\u20DC", doteq: "\u2250", doteqdot: "\u2251", DotEqual: "\u2250", dotminus: "\u2238", dotplus: "\u2214", dotsquare: "\u22A1", doublebarwedge: "\u2306", DoubleContourIntegral: "\u222F", DoubleDot: "\xA8", DoubleDownArrow: "\u21D3", DoubleLeftArrow: "\u21D0", DoubleLeftRightArrow: "\u21D4", DoubleLeftTee: "\u2AE4", DoubleLongLeftArrow: "\u27F8", DoubleLongLeftRightArrow: "\u27FA", DoubleLongRightArrow: "\u27F9", DoubleRightArrow: "\u21D2", DoubleRightTee: "\u22A8", DoubleUpArrow: "\u21D1", DoubleUpDownArrow: "\u21D5", DoubleVerticalBar: "\u2225", DownArrowBar: "\u2913", downarrow: "\u2193", DownArrow: "\u2193", Downarrow: "\u21D3", DownArrowUpArrow: "\u21F5", DownBreve: "\u0311", downdownarrows: "\u21CA", downharpoonleft: "\u21C3", downharpoonright: "\u21C2", DownLeftRightVector: "\u2950", DownLeftTeeVector: "\u295E", DownLeftVectorBar: "\u2956", DownLeftVector: "\u21BD", DownRightTeeVector: "\u295F", DownRightVectorBar: "\u2957", DownRightVector: "\u21C1", DownTeeArrow: "\u21A7", DownTee: "\u22A4", drbkarow: "\u2910", drcorn: "\u231F", drcrop: "\u230C", Dscr: "\u{1D49F}", dscr: "\u{1D4B9}", DScy: "\u0405", dscy: "\u0455", dsol: "\u29F6", Dstrok: "\u0110", dstrok: "\u0111", dtdot: "\u22F1", dtri: "\u25BF", dtrif: "\u25BE", duarr: "\u21F5", duhar: "\u296F", dwangle: "\u29A6", DZcy: "\u040F", dzcy: "\u045F", dzigrarr: "\u27FF", Eacute: "\xC9", eacute: "\xE9", easter: "\u2A6E", Ecaron: "\u011A", ecaron: "\u011B", Ecirc: "\xCA", ecirc: "\xEA", ecir: "\u2256", ecolon: "\u2255", Ecy: "\u042D", ecy: "\u044D", eDDot: "\u2A77", Edot: "\u0116", edot: "\u0117", eDot: "\u2251", ee: "\u2147", efDot: "\u2252", Efr: "\u{1D508}", efr: "\u{1D522}", eg: "\u2A9A", Egrave: "\xC8", egrave: "\xE8", egs: "\u2A96", egsdot: "\u2A98", el: "\u2A99", Element: "\u2208", elinters: "\u23E7", ell: "\u2113", els: "\u2A95", elsdot: "\u2A97", Emacr: "\u0112", emacr: "\u0113", empty: "\u2205", emptyset: "\u2205", EmptySmallSquare: "\u25FB", emptyv: "\u2205", EmptyVerySmallSquare: "\u25AB", emsp13: "\u2004", emsp14: "\u2005", emsp: "\u2003", ENG: "\u014A", eng: "\u014B", ensp: "\u2002", Eogon: "\u0118", eogon: "\u0119", Eopf: "\u{1D53C}", eopf: "\u{1D556}", epar: "\u22D5", eparsl: "\u29E3", eplus: "\u2A71", epsi: "\u03B5", Epsilon: "\u0395", epsilon: "\u03B5", epsiv: "\u03F5", eqcirc: "\u2256", eqcolon: "\u2255", eqsim: "\u2242", eqslantgtr: "\u2A96", eqslantless: "\u2A95", Equal: "\u2A75", equals: "=", EqualTilde: "\u2242", equest: "\u225F", Equilibrium: "\u21CC", equiv: "\u2261", equivDD: "\u2A78", eqvparsl: "\u29E5", erarr: "\u2971", erDot: "\u2253", escr: "\u212F", Escr: "\u2130", esdot: "\u2250", Esim: "\u2A73", esim: "\u2242", Eta: "\u0397", eta: "\u03B7", ETH: "\xD0", eth: "\xF0", Euml: "\xCB", euml: "\xEB", euro: "\u20AC", excl: "!", exist: "\u2203", Exists: "\u2203", expectation: "\u2130", exponentiale: "\u2147", ExponentialE: "\u2147", fallingdotseq: "\u2252", Fcy: "\u0424", fcy: "\u0444", female: "\u2640", ffilig: "\uFB03", fflig: "\uFB00", ffllig: "\uFB04", Ffr: "\u{1D509}", ffr: "\u{1D523}", filig: "\uFB01", FilledSmallSquare: "\u25FC", FilledVerySmallSquare: "\u25AA", fjlig: "fj", flat: "\u266D", fllig: "\uFB02", fltns: "\u25B1", fnof: "\u0192", Fopf: "\u{1D53D}", fopf: "\u{1D557}", forall: "\u2200", ForAll: "\u2200", fork: "\u22D4", forkv: "\u2AD9", Fouriertrf: "\u2131", fpartint: "\u2A0D", frac12: "\xBD", frac13: "\u2153", frac14: "\xBC", frac15: "\u2155", frac16: "\u2159", frac18: "\u215B", frac23: "\u2154", frac25: "\u2156", frac34: "\xBE", frac35: "\u2157", frac38: "\u215C", frac45: "\u2158", frac56: "\u215A", frac58: "\u215D", frac78: "\u215E", frasl: "\u2044", frown: "\u2322", fscr: "\u{1D4BB}", Fscr: "\u2131", gacute: "\u01F5", Gamma: "\u0393", gamma: "\u03B3", Gammad: "\u03DC", gammad: "\u03DD", gap: "\u2A86", Gbreve: "\u011E", gbreve: "\u011F", Gcedil: "\u0122", Gcirc: "\u011C", gcirc: "\u011D", Gcy: "\u0413", gcy: "\u0433", Gdot: "\u0120", gdot: "\u0121", ge: "\u2265", gE: "\u2267", gEl: "\u2A8C", gel: "\u22DB", geq: "\u2265", geqq: "\u2267", geqslant: "\u2A7E", gescc: "\u2AA9", ges: "\u2A7E", gesdot: "\u2A80", gesdoto: "\u2A82", gesdotol: "\u2A84", gesl: "\u22DB\uFE00", gesles: "\u2A94", Gfr: "\u{1D50A}", gfr: "\u{1D524}", gg: "\u226B", Gg: "\u22D9", ggg: "\u22D9", gimel: "\u2137", GJcy: "\u0403", gjcy: "\u0453", gla: "\u2AA5", gl: "\u2277", glE: "\u2A92", glj: "\u2AA4", gnap: "\u2A8A", gnapprox: "\u2A8A", gne: "\u2A88", gnE: "\u2269", gneq: "\u2A88", gneqq: "\u2269", gnsim: "\u22E7", Gopf: "\u{1D53E}", gopf: "\u{1D558}", grave: "`", GreaterEqual: "\u2265", GreaterEqualLess: "\u22DB", GreaterFullEqual: "\u2267", GreaterGreater: "\u2AA2", GreaterLess: "\u2277", GreaterSlantEqual: "\u2A7E", GreaterTilde: "\u2273", Gscr: "\u{1D4A2}", gscr: "\u210A", gsim: "\u2273", gsime: "\u2A8E", gsiml: "\u2A90", gtcc: "\u2AA7", gtcir: "\u2A7A", gt: ">", GT: ">", Gt: "\u226B", gtdot: "\u22D7", gtlPar: "\u2995", gtquest: "\u2A7C", gtrapprox: "\u2A86", gtrarr: "\u2978", gtrdot: "\u22D7", gtreqless: "\u22DB", gtreqqless: "\u2A8C", gtrless: "\u2277", gtrsim: "\u2273", gvertneqq: "\u2269\uFE00", gvnE: "\u2269\uFE00", Hacek: "\u02C7", hairsp: "\u200A", half: "\xBD", hamilt: "\u210B", HARDcy: "\u042A", hardcy: "\u044A", harrcir: "\u2948", harr: "\u2194", hArr: "\u21D4", harrw: "\u21AD", Hat: "^", hbar: "\u210F", Hcirc: "\u0124", hcirc: "\u0125", hearts: "\u2665", heartsuit: "\u2665", hellip: "\u2026", hercon: "\u22B9", hfr: "\u{1D525}", Hfr: "\u210C", HilbertSpace: "\u210B", hksearow: "\u2925", hkswarow: "\u2926", hoarr: "\u21FF", homtht: "\u223B", hookleftarrow: "\u21A9", hookrightarrow: "\u21AA", hopf: "\u{1D559}", Hopf: "\u210D", horbar: "\u2015", HorizontalLine: "\u2500", hscr: "\u{1D4BD}", Hscr: "\u210B", hslash: "\u210F", Hstrok: "\u0126", hstrok: "\u0127", HumpDownHump: "\u224E", HumpEqual: "\u224F", hybull: "\u2043", hyphen: "\u2010", Iacute: "\xCD", iacute: "\xED", ic: "\u2063", Icirc: "\xCE", icirc: "\xEE", Icy: "\u0418", icy: "\u0438", Idot: "\u0130", IEcy: "\u0415", iecy: "\u0435", iexcl: "\xA1", iff: "\u21D4", ifr: "\u{1D526}", Ifr: "\u2111", Igrave: "\xCC", igrave: "\xEC", ii: "\u2148", iiiint: "\u2A0C", iiint: "\u222D", iinfin: "\u29DC", iiota: "\u2129", IJlig: "\u0132", ijlig: "\u0133", Imacr: "\u012A", imacr: "\u012B", image: "\u2111", ImaginaryI: "\u2148", imagline: "\u2110", imagpart: "\u2111", imath: "\u0131", Im: "\u2111", imof: "\u22B7", imped: "\u01B5", Implies: "\u21D2", incare: "\u2105", in: "\u2208", infin: "\u221E", infintie: "\u29DD", inodot: "\u0131", intcal: "\u22BA", int: "\u222B", Int: "\u222C", integers: "\u2124", Integral: "\u222B", intercal: "\u22BA", Intersection: "\u22C2", intlarhk: "\u2A17", intprod: "\u2A3C", InvisibleComma: "\u2063", InvisibleTimes: "\u2062", IOcy: "\u0401", iocy: "\u0451", Iogon: "\u012E", iogon: "\u012F", Iopf: "\u{1D540}", iopf: "\u{1D55A}", Iota: "\u0399", iota: "\u03B9", iprod: "\u2A3C", iquest: "\xBF", iscr: "\u{1D4BE}", Iscr: "\u2110", isin: "\u2208", isindot: "\u22F5", isinE: "\u22F9", isins: "\u22F4", isinsv: "\u22F3", isinv: "\u2208", it: "\u2062", Itilde: "\u0128", itilde: "\u0129", Iukcy: "\u0406", iukcy: "\u0456", Iuml: "\xCF", iuml: "\xEF", Jcirc: "\u0134", jcirc: "\u0135", Jcy: "\u0419", jcy: "\u0439", Jfr: "\u{1D50D}", jfr: "\u{1D527}", jmath: "\u0237", Jopf: "\u{1D541}", jopf: "\u{1D55B}", Jscr: "\u{1D4A5}", jscr: "\u{1D4BF}", Jsercy: "\u0408", jsercy: "\u0458", Jukcy: "\u0404", jukcy: "\u0454", Kappa: "\u039A", kappa: "\u03BA", kappav: "\u03F0", Kcedil: "\u0136", kcedil: "\u0137", Kcy: "\u041A", kcy: "\u043A", Kfr: "\u{1D50E}", kfr: "\u{1D528}", kgreen: "\u0138", KHcy: "\u0425", khcy: "\u0445", KJcy: "\u040C", kjcy: "\u045C", Kopf: "\u{1D542}", kopf: "\u{1D55C}", Kscr: "\u{1D4A6}", kscr: "\u{1D4C0}", lAarr: "\u21DA", Lacute: "\u0139", lacute: "\u013A", laemptyv: "\u29B4", lagran: "\u2112", Lambda: "\u039B", lambda: "\u03BB", lang: "\u27E8", Lang: "\u27EA", langd: "\u2991", langle: "\u27E8", lap: "\u2A85", Laplacetrf: "\u2112", laquo: "\xAB", larrb: "\u21E4", larrbfs: "\u291F", larr: "\u2190", Larr: "\u219E", lArr: "\u21D0", larrfs: "\u291D", larrhk: "\u21A9", larrlp: "\u21AB", larrpl: "\u2939", larrsim: "\u2973", larrtl: "\u21A2", latail: "\u2919", lAtail: "\u291B", lat: "\u2AAB", late: "\u2AAD", lates: "\u2AAD\uFE00", lbarr: "\u290C", lBarr: "\u290E", lbbrk: "\u2772", lbrace: "{", lbrack: "[", lbrke: "\u298B", lbrksld: "\u298F", lbrkslu: "\u298D", Lcaron: "\u013D", lcaron: "\u013E", Lcedil: "\u013B", lcedil: "\u013C", lceil: "\u2308", lcub: "{", Lcy: "\u041B", lcy: "\u043B", ldca: "\u2936", ldquo: "\u201C", ldquor: "\u201E", ldrdhar: "\u2967", ldrushar: "\u294B", ldsh: "\u21B2", le: "\u2264", lE: "\u2266", LeftAngleBracket: "\u27E8", LeftArrowBar: "\u21E4", leftarrow: "\u2190", LeftArrow: "\u2190", Leftarrow: "\u21D0", LeftArrowRightArrow: "\u21C6", leftarrowtail: "\u21A2", LeftCeiling: "\u2308", LeftDoubleBracket: "\u27E6", LeftDownTeeVector: "\u2961", LeftDownVectorBar: "\u2959", LeftDownVector: "\u21C3", LeftFloor: "\u230A", leftharpoondown: "\u21BD", leftharpoonup: "\u21BC", leftleftarrows: "\u21C7", leftrightarrow: "\u2194", LeftRightArrow: "\u2194", Leftrightarrow: "\u21D4", leftrightarrows: "\u21C6", leftrightharpoons: "\u21CB", leftrightsquigarrow: "\u21AD", LeftRightVector: "\u294E", LeftTeeArrow: "\u21A4", LeftTee: "\u22A3", LeftTeeVector: "\u295A", leftthreetimes: "\u22CB", LeftTriangleBar: "\u29CF", LeftTriangle: "\u22B2", LeftTriangleEqual: "\u22B4", LeftUpDownVector: "\u2951", LeftUpTeeVector: "\u2960", LeftUpVectorBar: "\u2958", LeftUpVector: "\u21BF", LeftVectorBar: "\u2952", LeftVector: "\u21BC", lEg: "\u2A8B", leg: "\u22DA", leq: "\u2264", leqq: "\u2266", leqslant: "\u2A7D", lescc: "\u2AA8", les: "\u2A7D", lesdot: "\u2A7F", lesdoto: "\u2A81", lesdotor: "\u2A83", lesg: "\u22DA\uFE00", lesges: "\u2A93", lessapprox: "\u2A85", lessdot: "\u22D6", lesseqgtr: "\u22DA", lesseqqgtr: "\u2A8B", LessEqualGreater: "\u22DA", LessFullEqual: "\u2266", LessGreater: "\u2276", lessgtr: "\u2276", LessLess: "\u2AA1", lesssim: "\u2272", LessSlantEqual: "\u2A7D", LessTilde: "\u2272", lfisht: "\u297C", lfloor: "\u230A", Lfr: "\u{1D50F}", lfr: "\u{1D529}", lg: "\u2276", lgE: "\u2A91", lHar: "\u2962", lhard: "\u21BD", lharu: "\u21BC", lharul: "\u296A", lhblk: "\u2584", LJcy: "\u0409", ljcy: "\u0459", llarr: "\u21C7", ll: "\u226A", Ll: "\u22D8", llcorner: "\u231E", Lleftarrow: "\u21DA", llhard: "\u296B", lltri: "\u25FA", Lmidot: "\u013F", lmidot: "\u0140", lmoustache: "\u23B0", lmoust: "\u23B0", lnap: "\u2A89", lnapprox: "\u2A89", lne: "\u2A87", lnE: "\u2268", lneq: "\u2A87", lneqq: "\u2268", lnsim: "\u22E6", loang: "\u27EC", loarr: "\u21FD", lobrk: "\u27E6", longleftarrow: "\u27F5", LongLeftArrow: "\u27F5", Longleftarrow: "\u27F8", longleftrightarrow: "\u27F7", LongLeftRightArrow: "\u27F7", Longleftrightarrow: "\u27FA", longmapsto: "\u27FC", longrightarrow: "\u27F6", LongRightArrow: "\u27F6", Longrightarrow: "\u27F9", looparrowleft: "\u21AB", looparrowright: "\u21AC", lopar: "\u2985", Lopf: "\u{1D543}", lopf: "\u{1D55D}", loplus: "\u2A2D", lotimes: "\u2A34", lowast: "\u2217", lowbar: "_", LowerLeftArrow: "\u2199", LowerRightArrow: "\u2198", loz: "\u25CA", lozenge: "\u25CA", lozf: "\u29EB", lpar: "(", lparlt: "\u2993", lrarr: "\u21C6", lrcorner: "\u231F", lrhar: "\u21CB", lrhard: "\u296D", lrm: "\u200E", lrtri: "\u22BF", lsaquo: "\u2039", lscr: "\u{1D4C1}", Lscr: "\u2112", lsh: "\u21B0", Lsh: "\u21B0", lsim: "\u2272", lsime: "\u2A8D", lsimg: "\u2A8F", lsqb: "[", lsquo: "\u2018", lsquor: "\u201A", Lstrok: "\u0141", lstrok: "\u0142", ltcc: "\u2AA6", ltcir: "\u2A79", lt: "<", LT: "<", Lt: "\u226A", ltdot: "\u22D6", lthree: "\u22CB", ltimes: "\u22C9", ltlarr: "\u2976", ltquest: "\u2A7B", ltri: "\u25C3", ltrie: "\u22B4", ltrif: "\u25C2", ltrPar: "\u2996", lurdshar: "\u294A", luruhar: "\u2966", lvertneqq: "\u2268\uFE00", lvnE: "\u2268\uFE00", macr: "\xAF", male: "\u2642", malt: "\u2720", maltese: "\u2720", Map: "\u2905", map: "\u21A6", mapsto: "\u21A6", mapstodown: "\u21A7", mapstoleft: "\u21A4", mapstoup: "\u21A5", marker: "\u25AE", mcomma: "\u2A29", Mcy: "\u041C", mcy: "\u043C", mdash: "\u2014", mDDot: "\u223A", measuredangle: "\u2221", MediumSpace: "\u205F", Mellintrf: "\u2133", Mfr: "\u{1D510}", mfr: "\u{1D52A}", mho: "\u2127", micro: "\xB5", midast: "*", midcir: "\u2AF0", mid: "\u2223", middot: "\xB7", minusb: "\u229F", minus: "\u2212", minusd: "\u2238", minusdu: "\u2A2A", MinusPlus: "\u2213", mlcp: "\u2ADB", mldr: "\u2026", mnplus: "\u2213", models: "\u22A7", Mopf: "\u{1D544}", mopf: "\u{1D55E}", mp: "\u2213", mscr: "\u{1D4C2}", Mscr: "\u2133", mstpos: "\u223E", Mu: "\u039C", mu: "\u03BC", multimap: "\u22B8", mumap: "\u22B8", nabla: "\u2207", Nacute: "\u0143", nacute: "\u0144", nang: "\u2220\u20D2", nap: "\u2249", napE: "\u2A70\u0338", napid: "\u224B\u0338", napos: "\u0149", napprox: "\u2249", natural: "\u266E", naturals: "\u2115", natur: "\u266E", nbsp: "\xA0", nbump: "\u224E\u0338", nbumpe: "\u224F\u0338", ncap: "\u2A43", Ncaron: "\u0147", ncaron: "\u0148", Ncedil: "\u0145", ncedil: "\u0146", ncong: "\u2247", ncongdot: "\u2A6D\u0338", ncup: "\u2A42", Ncy: "\u041D", ncy: "\u043D", ndash: "\u2013", nearhk: "\u2924", nearr: "\u2197", neArr: "\u21D7", nearrow: "\u2197", ne: "\u2260", nedot: "\u2250\u0338", NegativeMediumSpace: "\u200B", NegativeThickSpace: "\u200B", NegativeThinSpace: "\u200B", NegativeVeryThinSpace: "\u200B", nequiv: "\u2262", nesear: "\u2928", nesim: "\u2242\u0338", NestedGreaterGreater: "\u226B", NestedLessLess: "\u226A", NewLine: "\n", nexist: "\u2204", nexists: "\u2204", Nfr: "\u{1D511}", nfr: "\u{1D52B}", ngE: "\u2267\u0338", nge: "\u2271", ngeq: "\u2271", ngeqq: "\u2267\u0338", ngeqslant: "\u2A7E\u0338", nges: "\u2A7E\u0338", nGg: "\u22D9\u0338", ngsim: "\u2275", nGt: "\u226B\u20D2", ngt: "\u226F", ngtr: "\u226F", nGtv: "\u226B\u0338", nharr: "\u21AE", nhArr: "\u21CE", nhpar: "\u2AF2", ni: "\u220B", nis: "\u22FC", nisd: "\u22FA", niv: "\u220B", NJcy: "\u040A", njcy: "\u045A", nlarr: "\u219A", nlArr: "\u21CD", nldr: "\u2025", nlE: "\u2266\u0338", nle: "\u2270", nleftarrow: "\u219A", nLeftarrow: "\u21CD", nleftrightarrow: "\u21AE", nLeftrightarrow: "\u21CE", nleq: "\u2270", nleqq: "\u2266\u0338", nleqslant: "\u2A7D\u0338", nles: "\u2A7D\u0338", nless: "\u226E", nLl: "\u22D8\u0338", nlsim: "\u2274", nLt: "\u226A\u20D2", nlt: "\u226E", nltri: "\u22EA", nltrie: "\u22EC", nLtv: "\u226A\u0338", nmid: "\u2224", NoBreak: "\u2060", NonBreakingSpace: "\xA0", nopf: "\u{1D55F}", Nopf: "\u2115", Not: "\u2AEC", not: "\xAC", NotCongruent: "\u2262", NotCupCap: "\u226D", NotDoubleVerticalBar: "\u2226", NotElement: "\u2209", NotEqual: "\u2260", NotEqualTilde: "\u2242\u0338", NotExists: "\u2204", NotGreater: "\u226F", NotGreaterEqual: "\u2271", NotGreaterFullEqual: "\u2267\u0338", NotGreaterGreater: "\u226B\u0338", NotGreaterLess: "\u2279", NotGreaterSlantEqual: "\u2A7E\u0338", NotGreaterTilde: "\u2275", NotHumpDownHump: "\u224E\u0338", NotHumpEqual: "\u224F\u0338", notin: "\u2209", notindot: "\u22F5\u0338", notinE: "\u22F9\u0338", notinva: "\u2209", notinvb: "\u22F7", notinvc: "\u22F6", NotLeftTriangleBar: "\u29CF\u0338", NotLeftTriangle: "\u22EA", NotLeftTriangleEqual: "\u22EC", NotLess: "\u226E", NotLessEqual: "\u2270", NotLessGreater: "\u2278", NotLessLess: "\u226A\u0338", NotLessSlantEqual: "\u2A7D\u0338", NotLessTilde: "\u2274", NotNestedGreaterGreater: "\u2AA2\u0338", NotNestedLessLess: "\u2AA1\u0338", notni: "\u220C", notniva: "\u220C", notnivb: "\u22FE", notnivc: "\u22FD", NotPrecedes: "\u2280", NotPrecedesEqual: "\u2AAF\u0338", NotPrecedesSlantEqual: "\u22E0", NotReverseElement: "\u220C", NotRightTriangleBar: "\u29D0\u0338", NotRightTriangle: "\u22EB", NotRightTriangleEqual: "\u22ED", NotSquareSubset: "\u228F\u0338", NotSquareSubsetEqual: "\u22E2", NotSquareSuperset: "\u2290\u0338", NotSquareSupersetEqual: "\u22E3", NotSubset: "\u2282\u20D2", NotSubsetEqual: "\u2288", NotSucceeds: "\u2281", NotSucceedsEqual: "\u2AB0\u0338", NotSucceedsSlantEqual: "\u22E1", NotSucceedsTilde: "\u227F\u0338", NotSuperset: "\u2283\u20D2", NotSupersetEqual: "\u2289", NotTilde: "\u2241", NotTildeEqual: "\u2244", NotTildeFullEqual: "\u2247", NotTildeTilde: "\u2249", NotVerticalBar: "\u2224", nparallel: "\u2226", npar: "\u2226", nparsl: "\u2AFD\u20E5", npart: "\u2202\u0338", npolint: "\u2A14", npr: "\u2280", nprcue: "\u22E0", nprec: "\u2280", npreceq: "\u2AAF\u0338", npre: "\u2AAF\u0338", nrarrc: "\u2933\u0338", nrarr: "\u219B", nrArr: "\u21CF", nrarrw: "\u219D\u0338", nrightarrow: "\u219B", nRightarrow: "\u21CF", nrtri: "\u22EB", nrtrie: "\u22ED", nsc: "\u2281", nsccue: "\u22E1", nsce: "\u2AB0\u0338", Nscr: "\u{1D4A9}", nscr: "\u{1D4C3}", nshortmid: "\u2224", nshortparallel: "\u2226", nsim: "\u2241", nsime: "\u2244", nsimeq: "\u2244", nsmid: "\u2224", nspar: "\u2226", nsqsube: "\u22E2", nsqsupe: "\u22E3", nsub: "\u2284", nsubE: "\u2AC5\u0338", nsube: "\u2288", nsubset: "\u2282\u20D2", nsubseteq: "\u2288", nsubseteqq: "\u2AC5\u0338", nsucc: "\u2281", nsucceq: "\u2AB0\u0338", nsup: "\u2285", nsupE: "\u2AC6\u0338", nsupe: "\u2289", nsupset: "\u2283\u20D2", nsupseteq: "\u2289", nsupseteqq: "\u2AC6\u0338", ntgl: "\u2279", Ntilde: "\xD1", ntilde: "\xF1", ntlg: "\u2278", ntriangleleft: "\u22EA", ntrianglelefteq: "\u22EC", ntriangleright: "\u22EB", ntrianglerighteq: "\u22ED", Nu: "\u039D", nu: "\u03BD", num: "#", numero: "\u2116", numsp: "\u2007", nvap: "\u224D\u20D2", nvdash: "\u22AC", nvDash: "\u22AD", nVdash: "\u22AE", nVDash: "\u22AF", nvge: "\u2265\u20D2", nvgt: ">\u20D2", nvHarr: "\u2904", nvinfin: "\u29DE", nvlArr: "\u2902", nvle: "\u2264\u20D2", nvlt: "<\u20D2", nvltrie: "\u22B4\u20D2", nvrArr: "\u2903", nvrtrie: "\u22B5\u20D2", nvsim: "\u223C\u20D2", nwarhk: "\u2923", nwarr: "\u2196", nwArr: "\u21D6", nwarrow: "\u2196", nwnear: "\u2927", Oacute: "\xD3", oacute: "\xF3", oast: "\u229B", Ocirc: "\xD4", ocirc: "\xF4", ocir: "\u229A", Ocy: "\u041E", ocy: "\u043E", odash: "\u229D", Odblac: "\u0150", odblac: "\u0151", odiv: "\u2A38", odot: "\u2299", odsold: "\u29BC", OElig: "\u0152", oelig: "\u0153", ofcir: "\u29BF", Ofr: "\u{1D512}", ofr: "\u{1D52C}", ogon: "\u02DB", Ograve: "\xD2", ograve: "\xF2", ogt: "\u29C1", ohbar: "\u29B5", ohm: "\u03A9", oint: "\u222E", olarr: "\u21BA", olcir: "\u29BE", olcross: "\u29BB", oline: "\u203E", olt: "\u29C0", Omacr: "\u014C", omacr: "\u014D", Omega: "\u03A9", omega: "\u03C9", Omicron: "\u039F", omicron: "\u03BF", omid: "\u29B6", ominus: "\u2296", Oopf: "\u{1D546}", oopf: "\u{1D560}", opar: "\u29B7", OpenCurlyDoubleQuote: "\u201C", OpenCurlyQuote: "\u2018", operp: "\u29B9", oplus: "\u2295", orarr: "\u21BB", Or: "\u2A54", or: "\u2228", ord: "\u2A5D", order: "\u2134", orderof: "\u2134", ordf: "\xAA", ordm: "\xBA", origof: "\u22B6", oror: "\u2A56", orslope: "\u2A57", orv: "\u2A5B", oS: "\u24C8", Oscr: "\u{1D4AA}", oscr: "\u2134", Oslash: "\xD8", oslash: "\xF8", osol: "\u2298", Otilde: "\xD5", otilde: "\xF5", otimesas: "\u2A36", Otimes: "\u2A37", otimes: "\u2297", Ouml: "\xD6", ouml: "\xF6", ovbar: "\u233D", OverBar: "\u203E", OverBrace: "\u23DE", OverBracket: "\u23B4", OverParenthesis: "\u23DC", para: "\xB6", parallel: "\u2225", par: "\u2225", parsim: "\u2AF3", parsl: "\u2AFD", part: "\u2202", PartialD: "\u2202", Pcy: "\u041F", pcy: "\u043F", percnt: "%", period: ".", permil: "\u2030", perp: "\u22A5", pertenk: "\u2031", Pfr: "\u{1D513}", pfr: "\u{1D52D}", Phi: "\u03A6", phi: "\u03C6", phiv: "\u03D5", phmmat: "\u2133", phone: "\u260E", Pi: "\u03A0", pi: "\u03C0", pitchfork: "\u22D4", piv: "\u03D6", planck: "\u210F", planckh: "\u210E", plankv: "\u210F", plusacir: "\u2A23", plusb: "\u229E", pluscir: "\u2A22", plus: "+", plusdo: "\u2214", plusdu: "\u2A25", pluse: "\u2A72", PlusMinus: "\xB1", plusmn: "\xB1", plussim: "\u2A26", plustwo: "\u2A27", pm: "\xB1", Poincareplane: "\u210C", pointint: "\u2A15", popf: "\u{1D561}", Popf: "\u2119", pound: "\xA3", prap: "\u2AB7", Pr: "\u2ABB", pr: "\u227A", prcue: "\u227C", precapprox: "\u2AB7", prec: "\u227A", preccurlyeq: "\u227C", Precedes: "\u227A", PrecedesEqual: "\u2AAF", PrecedesSlantEqual: "\u227C", PrecedesTilde: "\u227E", preceq: "\u2AAF", precnapprox: "\u2AB9", precneqq: "\u2AB5", precnsim: "\u22E8", pre: "\u2AAF", prE: "\u2AB3", precsim: "\u227E", prime: "\u2032", Prime: "\u2033", primes: "\u2119", prnap: "\u2AB9", prnE: "\u2AB5", prnsim: "\u22E8", prod: "\u220F", Product: "\u220F", profalar: "\u232E", profline: "\u2312", profsurf: "\u2313", prop: "\u221D", Proportional: "\u221D", Proportion: "\u2237", propto: "\u221D", prsim: "\u227E", prurel: "\u22B0", Pscr: "\u{1D4AB}", pscr: "\u{1D4C5}", Psi: "\u03A8", psi: "\u03C8", puncsp: "\u2008", Qfr: "\u{1D514}", qfr: "\u{1D52E}", qint: "\u2A0C", qopf: "\u{1D562}", Qopf: "\u211A", qprime: "\u2057", Qscr: "\u{1D4AC}", qscr: "\u{1D4C6}", quaternions: "\u210D", quatint: "\u2A16", quest: "?", questeq: "\u225F", quot: '"', QUOT: '"', rAarr: "\u21DB", race: "\u223D\u0331", Racute: "\u0154", racute: "\u0155", radic: "\u221A", raemptyv: "\u29B3", rang: "\u27E9", Rang: "\u27EB", rangd: "\u2992", range: "\u29A5", rangle: "\u27E9", raquo: "\xBB", rarrap: "\u2975", rarrb: "\u21E5", rarrbfs: "\u2920", rarrc: "\u2933", rarr: "\u2192", Rarr: "\u21A0", rArr: "\u21D2", rarrfs: "\u291E", rarrhk: "\u21AA", rarrlp: "\u21AC", rarrpl: "\u2945", rarrsim: "\u2974", Rarrtl: "\u2916", rarrtl: "\u21A3", rarrw: "\u219D", ratail: "\u291A", rAtail: "\u291C", ratio: "\u2236", rationals: "\u211A", rbarr: "\u290D", rBarr: "\u290F", RBarr: "\u2910", rbbrk: "\u2773", rbrace: "}", rbrack: "]", rbrke: "\u298C", rbrksld: "\u298E", rbrkslu: "\u2990", Rcaron: "\u0158", rcaron: "\u0159", Rcedil: "\u0156", rcedil: "\u0157", rceil: "\u2309", rcub: "}", Rcy: "\u0420", rcy: "\u0440", rdca: "\u2937", rdldhar: "\u2969", rdquo: "\u201D", rdquor: "\u201D", rdsh: "\u21B3", real: "\u211C", realine: "\u211B", realpart: "\u211C", reals: "\u211D", Re: "\u211C", rect: "\u25AD", reg: "\xAE", REG: "\xAE", ReverseElement: "\u220B", ReverseEquilibrium: "\u21CB", ReverseUpEquilibrium: "\u296F", rfisht: "\u297D", rfloor: "\u230B", rfr: "\u{1D52F}", Rfr: "\u211C", rHar: "\u2964", rhard: "\u21C1", rharu: "\u21C0", rharul: "\u296C", Rho: "\u03A1", rho: "\u03C1", rhov: "\u03F1", RightAngleBracket: "\u27E9", RightArrowBar: "\u21E5", rightarrow: "\u2192", RightArrow: "\u2192", Rightarrow: "\u21D2", RightArrowLeftArrow: "\u21C4", rightarrowtail: "\u21A3", RightCeiling: "\u2309", RightDoubleBracket: "\u27E7", RightDownTeeVector: "\u295D", RightDownVectorBar: "\u2955", RightDownVector: "\u21C2", RightFloor: "\u230B", rightharpoondown: "\u21C1", rightharpoonup: "\u21C0", rightleftarrows: "\u21C4", rightleftharpoons: "\u21CC", rightrightarrows: "\u21C9", rightsquigarrow: "\u219D", RightTeeArrow: "\u21A6", RightTee: "\u22A2", RightTeeVector: "\u295B", rightthreetimes: "\u22CC", RightTriangleBar: "\u29D0", RightTriangle: "\u22B3", RightTriangleEqual: "\u22B5", RightUpDownVector: "\u294F", RightUpTeeVector: "\u295C", RightUpVectorBar: "\u2954", RightUpVector: "\u21BE", RightVectorBar: "\u2953", RightVector: "\u21C0", ring: "\u02DA", risingdotseq: "\u2253", rlarr: "\u21C4", rlhar: "\u21CC", rlm: "\u200F", rmoustache: "\u23B1", rmoust: "\u23B1", rnmid: "\u2AEE", roang: "\u27ED", roarr: "\u21FE", robrk: "\u27E7", ropar: "\u2986", ropf: "\u{1D563}", Ropf: "\u211D", roplus: "\u2A2E", rotimes: "\u2A35", RoundImplies: "\u2970", rpar: ")", rpargt: "\u2994", rppolint: "\u2A12", rrarr: "\u21C9", Rrightarrow: "\u21DB", rsaquo: "\u203A", rscr: "\u{1D4C7}", Rscr: "\u211B", rsh: "\u21B1", Rsh: "\u21B1", rsqb: "]", rsquo: "\u2019", rsquor: "\u2019", rthree: "\u22CC", rtimes: "\u22CA", rtri: "\u25B9", rtrie: "\u22B5", rtrif: "\u25B8", rtriltri: "\u29CE", RuleDelayed: "\u29F4", ruluhar: "\u2968", rx: "\u211E", Sacute: "\u015A", sacute: "\u015B", sbquo: "\u201A", scap: "\u2AB8", Scaron: "\u0160", scaron: "\u0161", Sc: "\u2ABC", sc: "\u227B", sccue: "\u227D", sce: "\u2AB0", scE: "\u2AB4", Scedil: "\u015E", scedil: "\u015F", Scirc: "\u015C", scirc: "\u015D", scnap: "\u2ABA", scnE: "\u2AB6", scnsim: "\u22E9", scpolint: "\u2A13", scsim: "\u227F", Scy: "\u0421", scy: "\u0441", sdotb: "\u22A1", sdot: "\u22C5", sdote: "\u2A66", searhk: "\u2925", searr: "\u2198", seArr: "\u21D8", searrow: "\u2198", sect: "\xA7", semi: ";", seswar: "\u2929", setminus: "\u2216", setmn: "\u2216", sext: "\u2736", Sfr: "\u{1D516}", sfr: "\u{1D530}", sfrown: "\u2322", sharp: "\u266F", SHCHcy: "\u0429", shchcy: "\u0449", SHcy: "\u0428", shcy: "\u0448", ShortDownArrow: "\u2193", ShortLeftArrow: "\u2190", shortmid: "\u2223", shortparallel: "\u2225", ShortRightArrow: "\u2192", ShortUpArrow: "\u2191", shy: "\xAD", Sigma: "\u03A3", sigma: "\u03C3", sigmaf: "\u03C2", sigmav: "\u03C2", sim: "\u223C", simdot: "\u2A6A", sime: "\u2243", simeq: "\u2243", simg: "\u2A9E", simgE: "\u2AA0", siml: "\u2A9D", simlE: "\u2A9F", simne: "\u2246", simplus: "\u2A24", simrarr: "\u2972", slarr: "\u2190", SmallCircle: "\u2218", smallsetminus: "\u2216", smashp: "\u2A33", smeparsl: "\u29E4", smid: "\u2223", smile: "\u2323", smt: "\u2AAA", smte: "\u2AAC", smtes: "\u2AAC\uFE00", SOFTcy: "\u042C", softcy: "\u044C", solbar: "\u233F", solb: "\u29C4", sol: "/", Sopf: "\u{1D54A}", sopf: "\u{1D564}", spades: "\u2660", spadesuit: "\u2660", spar: "\u2225", sqcap: "\u2293", sqcaps: "\u2293\uFE00", sqcup: "\u2294", sqcups: "\u2294\uFE00", Sqrt: "\u221A", sqsub: "\u228F", sqsube: "\u2291", sqsubset: "\u228F", sqsubseteq: "\u2291", sqsup: "\u2290", sqsupe: "\u2292", sqsupset: "\u2290", sqsupseteq: "\u2292", square: "\u25A1", Square: "\u25A1", SquareIntersection: "\u2293", SquareSubset: "\u228F", SquareSubsetEqual: "\u2291", SquareSuperset: "\u2290", SquareSupersetEqual: "\u2292", SquareUnion: "\u2294", squarf: "\u25AA", squ: "\u25A1", squf: "\u25AA", srarr: "\u2192", Sscr: "\u{1D4AE}", sscr: "\u{1D4C8}", ssetmn: "\u2216", ssmile: "\u2323", sstarf: "\u22C6", Star: "\u22C6", star: "\u2606", starf: "\u2605", straightepsilon: "\u03F5", straightphi: "\u03D5", strns: "\xAF", sub: "\u2282", Sub: "\u22D0", subdot: "\u2ABD", subE: "\u2AC5", sube: "\u2286", subedot: "\u2AC3", submult: "\u2AC1", subnE: "\u2ACB", subne: "\u228A", subplus: "\u2ABF", subrarr: "\u2979", subset: "\u2282", Subset: "\u22D0", subseteq: "\u2286", subseteqq: "\u2AC5", SubsetEqual: "\u2286", subsetneq: "\u228A", subsetneqq: "\u2ACB", subsim: "\u2AC7", subsub: "\u2AD5", subsup: "\u2AD3", succapprox: "\u2AB8", succ: "\u227B", succcurlyeq: "\u227D", Succeeds: "\u227B", SucceedsEqual: "\u2AB0", SucceedsSlantEqual: "\u227D", SucceedsTilde: "\u227F", succeq: "\u2AB0", succnapprox: "\u2ABA", succneqq: "\u2AB6", succnsim: "\u22E9", succsim: "\u227F", SuchThat: "\u220B", sum: "\u2211", Sum: "\u2211", sung: "\u266A", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", sup: "\u2283", Sup: "\u22D1", supdot: "\u2ABE", supdsub: "\u2AD8", supE: "\u2AC6", supe: "\u2287", supedot: "\u2AC4", Superset: "\u2283", SupersetEqual: "\u2287", suphsol: "\u27C9", suphsub: "\u2AD7", suplarr: "\u297B", supmult: "\u2AC2", supnE: "\u2ACC", supne: "\u228B", supplus: "\u2AC0", supset: "\u2283", Supset: "\u22D1", supseteq: "\u2287", supseteqq: "\u2AC6", supsetneq: "\u228B", supsetneqq: "\u2ACC", supsim: "\u2AC8", supsub: "\u2AD4", supsup: "\u2AD6", swarhk: "\u2926", swarr: "\u2199", swArr: "\u21D9", swarrow: "\u2199", swnwar: "\u292A", szlig: "\xDF", Tab: "	", target: "\u2316", Tau: "\u03A4", tau: "\u03C4", tbrk: "\u23B4", Tcaron: "\u0164", tcaron: "\u0165", Tcedil: "\u0162", tcedil: "\u0163", Tcy: "\u0422", tcy: "\u0442", tdot: "\u20DB", telrec: "\u2315", Tfr: "\u{1D517}", tfr: "\u{1D531}", there4: "\u2234", therefore: "\u2234", Therefore: "\u2234", Theta: "\u0398", theta: "\u03B8", thetasym: "\u03D1", thetav: "\u03D1", thickapprox: "\u2248", thicksim: "\u223C", ThickSpace: "\u205F\u200A", ThinSpace: "\u2009", thinsp: "\u2009", thkap: "\u2248", thksim: "\u223C", THORN: "\xDE", thorn: "\xFE", tilde: "\u02DC", Tilde: "\u223C", TildeEqual: "\u2243", TildeFullEqual: "\u2245", TildeTilde: "\u2248", timesbar: "\u2A31", timesb: "\u22A0", times: "\xD7", timesd: "\u2A30", tint: "\u222D", toea: "\u2928", topbot: "\u2336", topcir: "\u2AF1", top: "\u22A4", Topf: "\u{1D54B}", topf: "\u{1D565}", topfork: "\u2ADA", tosa: "\u2929", tprime: "\u2034", trade: "\u2122", TRADE: "\u2122", triangle: "\u25B5", triangledown: "\u25BF", triangleleft: "\u25C3", trianglelefteq: "\u22B4", triangleq: "\u225C", triangleright: "\u25B9", trianglerighteq: "\u22B5", tridot: "\u25EC", trie: "\u225C", triminus: "\u2A3A", TripleDot: "\u20DB", triplus: "\u2A39", trisb: "\u29CD", tritime: "\u2A3B", trpezium: "\u23E2", Tscr: "\u{1D4AF}", tscr: "\u{1D4C9}", TScy: "\u0426", tscy: "\u0446", TSHcy: "\u040B", tshcy: "\u045B", Tstrok: "\u0166", tstrok: "\u0167", twixt: "\u226C", twoheadleftarrow: "\u219E", twoheadrightarrow: "\u21A0", Uacute: "\xDA", uacute: "\xFA", uarr: "\u2191", Uarr: "\u219F", uArr: "\u21D1", Uarrocir: "\u2949", Ubrcy: "\u040E", ubrcy: "\u045E", Ubreve: "\u016C", ubreve: "\u016D", Ucirc: "\xDB", ucirc: "\xFB", Ucy: "\u0423", ucy: "\u0443", udarr: "\u21C5", Udblac: "\u0170", udblac: "\u0171", udhar: "\u296E", ufisht: "\u297E", Ufr: "\u{1D518}", ufr: "\u{1D532}", Ugrave: "\xD9", ugrave: "\xF9", uHar: "\u2963", uharl: "\u21BF", uharr: "\u21BE", uhblk: "\u2580", ulcorn: "\u231C", ulcorner: "\u231C", ulcrop: "\u230F", ultri: "\u25F8", Umacr: "\u016A", umacr: "\u016B", uml: "\xA8", UnderBar: "_", UnderBrace: "\u23DF", UnderBracket: "\u23B5", UnderParenthesis: "\u23DD", Union: "\u22C3", UnionPlus: "\u228E", Uogon: "\u0172", uogon: "\u0173", Uopf: "\u{1D54C}", uopf: "\u{1D566}", UpArrowBar: "\u2912", uparrow: "\u2191", UpArrow: "\u2191", Uparrow: "\u21D1", UpArrowDownArrow: "\u21C5", updownarrow: "\u2195", UpDownArrow: "\u2195", Updownarrow: "\u21D5", UpEquilibrium: "\u296E", upharpoonleft: "\u21BF", upharpoonright: "\u21BE", uplus: "\u228E", UpperLeftArrow: "\u2196", UpperRightArrow: "\u2197", upsi: "\u03C5", Upsi: "\u03D2", upsih: "\u03D2", Upsilon: "\u03A5", upsilon: "\u03C5", UpTeeArrow: "\u21A5", UpTee: "\u22A5", upuparrows: "\u21C8", urcorn: "\u231D", urcorner: "\u231D", urcrop: "\u230E", Uring: "\u016E", uring: "\u016F", urtri: "\u25F9", Uscr: "\u{1D4B0}", uscr: "\u{1D4CA}", utdot: "\u22F0", Utilde: "\u0168", utilde: "\u0169", utri: "\u25B5", utrif: "\u25B4", uuarr: "\u21C8", Uuml: "\xDC", uuml: "\xFC", uwangle: "\u29A7", vangrt: "\u299C", varepsilon: "\u03F5", varkappa: "\u03F0", varnothing: "\u2205", varphi: "\u03D5", varpi: "\u03D6", varpropto: "\u221D", varr: "\u2195", vArr: "\u21D5", varrho: "\u03F1", varsigma: "\u03C2", varsubsetneq: "\u228A\uFE00", varsubsetneqq: "\u2ACB\uFE00", varsupsetneq: "\u228B\uFE00", varsupsetneqq: "\u2ACC\uFE00", vartheta: "\u03D1", vartriangleleft: "\u22B2", vartriangleright: "\u22B3", vBar: "\u2AE8", Vbar: "\u2AEB", vBarv: "\u2AE9", Vcy: "\u0412", vcy: "\u0432", vdash: "\u22A2", vDash: "\u22A8", Vdash: "\u22A9", VDash: "\u22AB", Vdashl: "\u2AE6", veebar: "\u22BB", vee: "\u2228", Vee: "\u22C1", veeeq: "\u225A", vellip: "\u22EE", verbar: "|", Verbar: "\u2016", vert: "|", Vert: "\u2016", VerticalBar: "\u2223", VerticalLine: "|", VerticalSeparator: "\u2758", VerticalTilde: "\u2240", VeryThinSpace: "\u200A", Vfr: "\u{1D519}", vfr: "\u{1D533}", vltri: "\u22B2", vnsub: "\u2282\u20D2", vnsup: "\u2283\u20D2", Vopf: "\u{1D54D}", vopf: "\u{1D567}", vprop: "\u221D", vrtri: "\u22B3", Vscr: "\u{1D4B1}", vscr: "\u{1D4CB}", vsubnE: "\u2ACB\uFE00", vsubne: "\u228A\uFE00", vsupnE: "\u2ACC\uFE00", vsupne: "\u228B\uFE00", Vvdash: "\u22AA", vzigzag: "\u299A", Wcirc: "\u0174", wcirc: "\u0175", wedbar: "\u2A5F", wedge: "\u2227", Wedge: "\u22C0", wedgeq: "\u2259", weierp: "\u2118", Wfr: "\u{1D51A}", wfr: "\u{1D534}", Wopf: "\u{1D54E}", wopf: "\u{1D568}", wp: "\u2118", wr: "\u2240", wreath: "\u2240", Wscr: "\u{1D4B2}", wscr: "\u{1D4CC}", xcap: "\u22C2", xcirc: "\u25EF", xcup: "\u22C3", xdtri: "\u25BD", Xfr: "\u{1D51B}", xfr: "\u{1D535}", xharr: "\u27F7", xhArr: "\u27FA", Xi: "\u039E", xi: "\u03BE", xlarr: "\u27F5", xlArr: "\u27F8", xmap: "\u27FC", xnis: "\u22FB", xodot: "\u2A00", Xopf: "\u{1D54F}", xopf: "\u{1D569}", xoplus: "\u2A01", xotime: "\u2A02", xrarr: "\u27F6", xrArr: "\u27F9", Xscr: "\u{1D4B3}", xscr: "\u{1D4CD}", xsqcup: "\u2A06", xuplus: "\u2A04", xutri: "\u25B3", xvee: "\u22C1", xwedge: "\u22C0", Yacute: "\xDD", yacute: "\xFD", YAcy: "\u042F", yacy: "\u044F", Ycirc: "\u0176", ycirc: "\u0177", Ycy: "\u042B", ycy: "\u044B", yen: "\xA5", Yfr: "\u{1D51C}", yfr: "\u{1D536}", YIcy: "\u0407", yicy: "\u0457", Yopf: "\u{1D550}", yopf: "\u{1D56A}", Yscr: "\u{1D4B4}", yscr: "\u{1D4CE}", YUcy: "\u042E", yucy: "\u044E", yuml: "\xFF", Yuml: "\u0178", Zacute: "\u0179", zacute: "\u017A", Zcaron: "\u017D", zcaron: "\u017E", Zcy: "\u0417", zcy: "\u0437", Zdot: "\u017B", zdot: "\u017C", zeetrf: "\u2128", ZeroWidthSpace: "\u200B", Zeta: "\u0396", zeta: "\u03B6", zfr: "\u{1D537}", Zfr: "\u2128", ZHcy: "\u0416", zhcy: "\u0436", zigrarr: "\u21DD", zopf: "\u{1D56B}", Zopf: "\u2124", Zscr: "\u{1D4B5}", zscr: "\u{1D4CF}", zwj: "\u200D", zwnj: "\u200C" };
  }
});

// node_modules/entities/lib/maps/legacy.json
var require_legacy = __commonJS({
  "node_modules/entities/lib/maps/legacy.json"(exports, module2) {
    module2.exports = { Aacute: "\xC1", aacute: "\xE1", Acirc: "\xC2", acirc: "\xE2", acute: "\xB4", AElig: "\xC6", aelig: "\xE6", Agrave: "\xC0", agrave: "\xE0", amp: "&", AMP: "&", Aring: "\xC5", aring: "\xE5", Atilde: "\xC3", atilde: "\xE3", Auml: "\xC4", auml: "\xE4", brvbar: "\xA6", Ccedil: "\xC7", ccedil: "\xE7", cedil: "\xB8", cent: "\xA2", copy: "\xA9", COPY: "\xA9", curren: "\xA4", deg: "\xB0", divide: "\xF7", Eacute: "\xC9", eacute: "\xE9", Ecirc: "\xCA", ecirc: "\xEA", Egrave: "\xC8", egrave: "\xE8", ETH: "\xD0", eth: "\xF0", Euml: "\xCB", euml: "\xEB", frac12: "\xBD", frac14: "\xBC", frac34: "\xBE", gt: ">", GT: ">", Iacute: "\xCD", iacute: "\xED", Icirc: "\xCE", icirc: "\xEE", iexcl: "\xA1", Igrave: "\xCC", igrave: "\xEC", iquest: "\xBF", Iuml: "\xCF", iuml: "\xEF", laquo: "\xAB", lt: "<", LT: "<", macr: "\xAF", micro: "\xB5", middot: "\xB7", nbsp: "\xA0", not: "\xAC", Ntilde: "\xD1", ntilde: "\xF1", Oacute: "\xD3", oacute: "\xF3", Ocirc: "\xD4", ocirc: "\xF4", Ograve: "\xD2", ograve: "\xF2", ordf: "\xAA", ordm: "\xBA", Oslash: "\xD8", oslash: "\xF8", Otilde: "\xD5", otilde: "\xF5", Ouml: "\xD6", ouml: "\xF6", para: "\xB6", plusmn: "\xB1", pound: "\xA3", quot: '"', QUOT: '"', raquo: "\xBB", reg: "\xAE", REG: "\xAE", sect: "\xA7", shy: "\xAD", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", szlig: "\xDF", THORN: "\xDE", thorn: "\xFE", times: "\xD7", Uacute: "\xDA", uacute: "\xFA", Ucirc: "\xDB", ucirc: "\xFB", Ugrave: "\xD9", ugrave: "\xF9", uml: "\xA8", Uuml: "\xDC", uuml: "\xFC", Yacute: "\xDD", yacute: "\xFD", yen: "\xA5", yuml: "\xFF" };
  }
});

// node_modules/entities/lib/maps/xml.json
var require_xml = __commonJS({
  "node_modules/entities/lib/maps/xml.json"(exports, module2) {
    module2.exports = { amp: "&", apos: "'", gt: ">", lt: "<", quot: '"' };
  }
});

// node_modules/entities/lib/maps/decode.json
var require_decode = __commonJS({
  "node_modules/entities/lib/maps/decode.json"(exports, module2) {
    module2.exports = { "0": 65533, "128": 8364, "130": 8218, "131": 402, "132": 8222, "133": 8230, "134": 8224, "135": 8225, "136": 710, "137": 8240, "138": 352, "139": 8249, "140": 338, "142": 381, "145": 8216, "146": 8217, "147": 8220, "148": 8221, "149": 8226, "150": 8211, "151": 8212, "152": 732, "153": 8482, "154": 353, "155": 8250, "156": 339, "158": 382, "159": 376 };
  }
});

// node_modules/entities/lib/decode_codepoint.js
var require_decode_codepoint = __commonJS({
  "node_modules/entities/lib/decode_codepoint.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var decode_json_1 = __importDefault(require_decode());
    var fromCodePoint = String.fromCodePoint || function(codePoint) {
      var output = "";
      if (codePoint > 65535) {
        codePoint -= 65536;
        output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      output += String.fromCharCode(codePoint);
      return output;
    };
    function decodeCodePoint(codePoint) {
      if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
        return "\uFFFD";
      }
      if (codePoint in decode_json_1.default) {
        codePoint = decode_json_1.default[codePoint];
      }
      return fromCodePoint(codePoint);
    }
    exports.default = decodeCodePoint;
  }
});

// node_modules/entities/lib/decode.js
var require_decode2 = __commonJS({
  "node_modules/entities/lib/decode.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeHTML = exports.decodeHTMLStrict = exports.decodeXML = void 0;
    var entities_json_1 = __importDefault(require_entities());
    var legacy_json_1 = __importDefault(require_legacy());
    var xml_json_1 = __importDefault(require_xml());
    var decode_codepoint_1 = __importDefault(require_decode_codepoint());
    var strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;
    exports.decodeXML = getStrictDecoder(xml_json_1.default);
    exports.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);
    function getStrictDecoder(map) {
      var replace = getReplacer(map);
      return function(str) {
        return String(str).replace(strictEntityRe, replace);
      };
    }
    var sorter = function(a, b) {
      return a < b ? 1 : -1;
    };
    exports.decodeHTML = function() {
      var legacy = Object.keys(legacy_json_1.default).sort(sorter);
      var keys = Object.keys(entities_json_1.default).sort(sorter);
      for (var i = 0, j = 0; i < keys.length; i++) {
        if (legacy[j] === keys[i]) {
          keys[i] += ";?";
          j++;
        } else {
          keys[i] += ";";
        }
      }
      var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
      var replace = getReplacer(entities_json_1.default);
      function replacer(str) {
        if (str.substr(-1) !== ";")
          str += ";";
        return replace(str);
      }
      return function(str) {
        return String(str).replace(re, replacer);
      };
    }();
    function getReplacer(map) {
      return function replace(str) {
        if (str.charAt(1) === "#") {
          var secondChar = str.charAt(2);
          if (secondChar === "X" || secondChar === "x") {
            return decode_codepoint_1.default(parseInt(str.substr(3), 16));
          }
          return decode_codepoint_1.default(parseInt(str.substr(2), 10));
        }
        return map[str.slice(1, -1)] || str;
      };
    }
  }
});

// node_modules/entities/lib/encode.js
var require_encode = __commonJS({
  "node_modules/entities/lib/encode.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = void 0;
    var xml_json_1 = __importDefault(require_xml());
    var inverseXML = getInverseObj(xml_json_1.default);
    var xmlReplacer = getInverseReplacer(inverseXML);
    exports.encodeXML = getASCIIEncoder(inverseXML);
    var entities_json_1 = __importDefault(require_entities());
    var inverseHTML = getInverseObj(entities_json_1.default);
    var htmlReplacer = getInverseReplacer(inverseHTML);
    exports.encodeHTML = getInverse(inverseHTML, htmlReplacer);
    exports.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);
    function getInverseObj(obj) {
      return Object.keys(obj).sort().reduce(function(inverse, name) {
        inverse[obj[name]] = "&" + name + ";";
        return inverse;
      }, {});
    }
    function getInverseReplacer(inverse) {
      var single = [];
      var multiple = [];
      for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {
        var k = _a[_i];
        if (k.length === 1) {
          single.push("\\" + k);
        } else {
          multiple.push(k);
        }
      }
      single.sort();
      for (var start = 0; start < single.length - 1; start++) {
        var end = start;
        while (end < single.length - 1 && single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {
          end += 1;
        }
        var count = 1 + end - start;
        if (count < 3)
          continue;
        single.splice(start, count, single[start] + "-" + single[end]);
      }
      multiple.unshift("[" + single.join("") + "]");
      return new RegExp(multiple.join("|"), "g");
    }
    var reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;
    var getCodePoint = String.prototype.codePointAt != null ? function(str) {
      return str.codePointAt(0);
    } : function(c) {
      return (c.charCodeAt(0) - 55296) * 1024 + c.charCodeAt(1) - 56320 + 65536;
    };
    function singleCharReplacer(c) {
      return "&#x" + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0)).toString(16).toUpperCase() + ";";
    }
    function getInverse(inverse, re) {
      return function(data) {
        return data.replace(re, function(name) {
          return inverse[name];
        }).replace(reNonASCII, singleCharReplacer);
      };
    }
    var reEscapeChars = new RegExp(xmlReplacer.source + "|" + reNonASCII.source, "g");
    function escape(data) {
      return data.replace(reEscapeChars, singleCharReplacer);
    }
    exports.escape = escape;
    function escapeUTF8(data) {
      return data.replace(xmlReplacer, singleCharReplacer);
    }
    exports.escapeUTF8 = escapeUTF8;
    function getASCIIEncoder(obj) {
      return function(data) {
        return data.replace(reEscapeChars, function(c) {
          return obj[c] || singleCharReplacer(c);
        });
      };
    }
  }
});

// node_modules/entities/lib/index.js
var require_lib = __commonJS({
  "node_modules/entities/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.encodeHTML5 = exports.encodeHTML4 = exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = void 0;
    var decode_1 = require_decode2();
    var encode_1 = require_encode();
    function decode(data, level) {
      return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
    }
    exports.decode = decode;
    function decodeStrict(data, level) {
      return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
    }
    exports.decodeStrict = decodeStrict;
    function encode(data, level) {
      return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
    }
    exports.encode = encode;
    var encode_2 = require_encode();
    Object.defineProperty(exports, "encodeXML", { enumerable: true, get: function() {
      return encode_2.encodeXML;
    } });
    Object.defineProperty(exports, "encodeHTML", { enumerable: true, get: function() {
      return encode_2.encodeHTML;
    } });
    Object.defineProperty(exports, "encodeNonAsciiHTML", { enumerable: true, get: function() {
      return encode_2.encodeNonAsciiHTML;
    } });
    Object.defineProperty(exports, "escape", { enumerable: true, get: function() {
      return encode_2.escape;
    } });
    Object.defineProperty(exports, "escapeUTF8", { enumerable: true, get: function() {
      return encode_2.escapeUTF8;
    } });
    Object.defineProperty(exports, "encodeHTML4", { enumerable: true, get: function() {
      return encode_2.encodeHTML;
    } });
    Object.defineProperty(exports, "encodeHTML5", { enumerable: true, get: function() {
      return encode_2.encodeHTML;
    } });
    var decode_2 = require_decode2();
    Object.defineProperty(exports, "decodeXML", { enumerable: true, get: function() {
      return decode_2.decodeXML;
    } });
    Object.defineProperty(exports, "decodeHTML", { enumerable: true, get: function() {
      return decode_2.decodeHTML;
    } });
    Object.defineProperty(exports, "decodeHTMLStrict", { enumerable: true, get: function() {
      return decode_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports, "decodeHTML4", { enumerable: true, get: function() {
      return decode_2.decodeHTML;
    } });
    Object.defineProperty(exports, "decodeHTML5", { enumerable: true, get: function() {
      return decode_2.decodeHTML;
    } });
    Object.defineProperty(exports, "decodeHTML4Strict", { enumerable: true, get: function() {
      return decode_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports, "decodeHTML5Strict", { enumerable: true, get: function() {
      return decode_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports, "decodeXMLStrict", { enumerable: true, get: function() {
      return decode_2.decodeXML;
    } });
  }
});

// node_modules/fast-xml-parser/src/util.js
var require_util = __commonJS({
  "node_modules/fast-xml-parser/src/util.js"(exports) {
    "use strict";
    var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    var regexName = new RegExp("^" + nameRegexp + "$");
    var getAllMatches = function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === "undefined");
    };
    exports.isExist = function(v) {
      return typeof v !== "undefined";
    };
    exports.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };
    exports.merge = function(target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          if (arrayMode === "strict") {
            target[keys[i]] = [a[keys[i]]];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    exports.getValue = function(v) {
      if (exports.isExist(v)) {
        return v;
      } else {
        return "";
      }
    };
    exports.buildOptions = function(options, defaultOptions, props) {
      var newOptions = {};
      if (!options) {
        return defaultOptions;
      }
      for (let i = 0; i < props.length; i++) {
        if (options[props[i]] !== void 0) {
          newOptions[props[i]] = options[props[i]];
        } else {
          newOptions[props[i]] = defaultOptions[props[i]];
        }
      }
      return newOptions;
    };
    exports.isTagNameInArrayMode = function(tagName, arrayMode, parentTagName) {
      if (arrayMode === false) {
        return false;
      } else if (arrayMode instanceof RegExp) {
        return arrayMode.test(tagName);
      } else if (typeof arrayMode === "function") {
        return !!arrayMode(tagName, parentTagName);
      }
      return arrayMode === "strict";
    };
    exports.isName = isName;
    exports.getAllMatches = getAllMatches;
    exports.nameRegexp = nameRegexp;
  }
});

// node_modules/fast-xml-parser/src/node2json.js
var require_node2json = __commonJS({
  "node_modules/fast-xml-parser/src/node2json.js"(exports) {
    "use strict";
    var util = require_util();
    var convertToJson = function(node, options, parentTagName) {
      const jObj = {};
      if ((!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {
        return util.isExist(node.val) ? node.val : "";
      }
      if (util.isExist(node.val) && !(typeof node.val === "string" && (node.val === "" || node.val === options.cdataPositionChar))) {
        const asArray = util.isTagNameInArrayMode(node.tagname, options.arrayMode, parentTagName);
        jObj[options.textNodeName] = asArray ? [node.val] : node.val;
      }
      util.merge(jObj, node.attrsMap, options.arrayMode);
      const keys = Object.keys(node.child);
      for (let index = 0; index < keys.length; index++) {
        const tagName = keys[index];
        if (node.child[tagName] && node.child[tagName].length > 1) {
          jObj[tagName] = [];
          for (let tag in node.child[tagName]) {
            if (node.child[tagName].hasOwnProperty(tag)) {
              jObj[tagName].push(convertToJson(node.child[tagName][tag], options, tagName));
            }
          }
        } else {
          const result = convertToJson(node.child[tagName][0], options, tagName);
          const asArray = options.arrayMode === true && typeof result === "object" || util.isTagNameInArrayMode(tagName, options.arrayMode, parentTagName);
          jObj[tagName] = asArray ? [result] : result;
        }
      }
      return jObj;
    };
    exports.convertToJson = convertToJson;
  }
});

// node_modules/fast-xml-parser/src/xmlNode.js
var require_xmlNode = __commonJS({
  "node_modules/fast-xml-parser/src/xmlNode.js"(exports, module2) {
    "use strict";
    module2.exports = function(tagname, parent, val) {
      this.tagname = tagname;
      this.parent = parent;
      this.child = {};
      this.attrsMap = {};
      this.val = val;
      this.addChild = function(child) {
        if (Array.isArray(this.child[child.tagname])) {
          this.child[child.tagname].push(child);
        } else {
          this.child[child.tagname] = [child];
        }
      };
    };
  }
});

// node_modules/fast-xml-parser/src/xmlstr2xmlnode.js
var require_xmlstr2xmlnode = __commonJS({
  "node_modules/fast-xml-parser/src/xmlstr2xmlnode.js"(exports) {
    "use strict";
    var util = require_util();
    var buildOptions = require_util().buildOptions;
    var xmlNode = require_xmlNode();
    var regx = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attrNodeName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      ignoreNameSpace: false,
      allowBooleanAttributes: false,
      parseNodeValue: true,
      parseAttributeValue: false,
      arrayMode: false,
      trimValues: true,
      cdataTagName: false,
      cdataPositionChar: "\\c",
      tagValueProcessor: function(a, tagName) {
        return a;
      },
      attrValueProcessor: function(a, attrName) {
        return a;
      },
      stopNodes: []
    };
    exports.defaultOptions = defaultOptions;
    var props = [
      "attributeNamePrefix",
      "attrNodeName",
      "textNodeName",
      "ignoreAttributes",
      "ignoreNameSpace",
      "allowBooleanAttributes",
      "parseNodeValue",
      "parseAttributeValue",
      "arrayMode",
      "trimValues",
      "cdataTagName",
      "cdataPositionChar",
      "tagValueProcessor",
      "attrValueProcessor",
      "parseTrueNumberOnly",
      "stopNodes"
    ];
    exports.props = props;
    function processTagValue(tagName, val, options) {
      if (val) {
        if (options.trimValues) {
          val = val.trim();
        }
        val = options.tagValueProcessor(val, tagName);
        val = parseValue(val, options.parseNodeValue, options.parseTrueNumberOnly);
      }
      return val;
    }
    function resolveNameSpace(tagname, options) {
      if (options.ignoreNameSpace) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") {
          return "";
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    function parseValue(val, shouldParse, parseTrueNumberOnly) {
      if (shouldParse && typeof val === "string") {
        let parsed;
        if (val.trim() === "" || isNaN(val)) {
          parsed = val === "true" ? true : val === "false" ? false : val;
        } else {
          if (val.indexOf("0x") !== -1) {
            parsed = Number.parseInt(val, 16);
          } else if (val.indexOf(".") !== -1) {
            parsed = Number.parseFloat(val);
            val = val.replace(/\.?0+$/, "");
          } else {
            parsed = Number.parseInt(val, 10);
          }
          if (parseTrueNumberOnly) {
            parsed = String(parsed) === val ? parsed : val;
          }
        }
        return parsed;
      } else {
        if (util.isExist(val)) {
          return val;
        } else {
          return "";
        }
      }
    }
    var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])(.*?)\\3)?`, "g");
    function buildAttributesMap(attrStr, options) {
      if (!options.ignoreAttributes && typeof attrStr === "string") {
        attrStr = attrStr.replace(/\r?\n/g, " ");
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i = 0; i < len; i++) {
          const attrName = resolveNameSpace(matches[i][1], options);
          if (attrName.length) {
            if (matches[i][4] !== void 0) {
              if (options.trimValues) {
                matches[i][4] = matches[i][4].trim();
              }
              matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);
              attrs[options.attributeNamePrefix + attrName] = parseValue(matches[i][4], options.parseAttributeValue, options.parseTrueNumberOnly);
            } else if (options.allowBooleanAttributes) {
              attrs[options.attributeNamePrefix + attrName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (options.attrNodeName) {
          const attrCollection = {};
          attrCollection[options.attrNodeName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var getTraversalObj = function(xmlData, options) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      options = buildOptions(options, defaultOptions, props);
      const xmlObj = new xmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      for (let i = 0; i < xmlData.length; i++) {
        const ch = xmlData[i];
        if (ch === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i + 2, closeIndex).trim();
            if (options.ignoreNameSpace) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (currentNode) {
              if (currentNode.val) {
                currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(tagName, textData, options);
              } else {
                currentNode.val = processTagValue(tagName, textData, options);
              }
            }
            if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {
              currentNode.child = [];
              if (currentNode.attrsMap == void 0) {
                currentNode.attrsMap = {};
              }
              currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1);
            }
            currentNode = currentNode.parent;
            textData = "";
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            i = findClosingIndex(xmlData, "?>", i, "Pi Tag is not closed.");
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            i = findClosingIndex(xmlData, "-->", i, "Comment is not closed.");
          } else if (xmlData.substr(i + 1, 2) === "!D") {
            const closeIndex = findClosingIndex(xmlData, ">", i, "DOCTYPE is not closed.");
            const tagExp = xmlData.substring(i, closeIndex);
            if (tagExp.indexOf("[") >= 0) {
              i = xmlData.indexOf("]>", i) + 1;
            } else {
              i = closeIndex;
            }
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i + 9, closeIndex);
            if (textData) {
              currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(currentNode.tagname, textData, options);
              textData = "";
            }
            if (options.cdataTagName) {
              const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);
              currentNode.addChild(childNode);
              currentNode.val = util.getValue(currentNode.val) + options.cdataPositionChar;
              if (tagExp) {
                childNode.val = tagExp;
              }
            } else {
              currentNode.val = (currentNode.val || "") + (tagExp || "");
            }
            i = closeIndex + 2;
          } else {
            const result = closingIndexForOpeningTag(xmlData, i + 1);
            let tagExp = result.data;
            const closeIndex = result.index;
            const separatorIndex = tagExp.indexOf(" ");
            let tagName = tagExp;
            let shouldBuildAttributesMap = true;
            if (separatorIndex !== -1) {
              tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
              tagExp = tagExp.substr(separatorIndex + 1);
            }
            if (options.ignoreNameSpace) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
                shouldBuildAttributesMap = tagName !== result.data.substr(colonIndex + 1);
              }
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(currentNode.tagname, textData, options);
              }
            }
            if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
              if (tagName[tagName.length - 1] === "/") {
                tagName = tagName.substr(0, tagName.length - 1);
                tagExp = tagName;
              } else {
                tagExp = tagExp.substr(0, tagExp.length - 1);
              }
              const childNode = new xmlNode(tagName, currentNode, "");
              if (tagName !== tagExp) {
                childNode.attrsMap = buildAttributesMap(tagExp, options);
              }
              currentNode.addChild(childNode);
            } else {
              const childNode = new xmlNode(tagName, currentNode);
              if (options.stopNodes.length && options.stopNodes.includes(childNode.tagname)) {
                childNode.startIndex = closeIndex;
              }
              if (tagName !== tagExp && shouldBuildAttributesMap) {
                childNode.attrsMap = buildAttributesMap(tagExp, options);
              }
              currentNode.addChild(childNode);
              currentNode = childNode;
            }
            textData = "";
            i = closeIndex;
          }
        } else {
          textData += xmlData[i];
        }
      }
      return xmlObj;
    };
    function closingIndexForOpeningTag(data, i) {
      let attrBoundary;
      let tagExp = "";
      for (let index = i; index < data.length; index++) {
        let ch = data[index];
        if (attrBoundary) {
          if (ch === attrBoundary)
            attrBoundary = "";
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === ">") {
          return {
            data: tagExp,
            index
          };
        } else if (ch === "	") {
          ch = " ";
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i, errMsg) {
      const closingIndex = xmlData.indexOf(str, i);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    exports.getTraversalObj = getTraversalObj;
  }
});

// node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS({
  "node_modules/fast-xml-parser/src/validator.js"(exports) {
    "use strict";
    var util = require_util();
    var defaultOptions = {
      allowBooleanAttributes: false
    };
    var props = ["allowBooleanAttributes"];
    exports.validate = function(xmlData, options) {
      options = util.buildOptions(options, defaultOptions, props);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === "\uFEFF") {
        xmlData = xmlData.substr(1);
      }
      for (let i = 0; i < xmlData.length; i++) {
        if (xmlData[i] === "<" && xmlData[i + 1] === "?") {
          i += 2;
          i = readPI(xmlData, i);
          if (i.err)
            return i;
        } else if (xmlData[i] === "<") {
          i++;
          if (xmlData[i] === "!") {
            i = readCommentAndCDATA(xmlData, i);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i] === "/") {
              closingTag = true;
              i++;
            }
            let tagName = "";
            for (; i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "	" && xmlData[i] !== "\n" && xmlData[i] !== "\r"; i++) {
              tagName += xmlData[i];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === "/") {
              tagName = tagName.substring(0, tagName.length - 1);
              i--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "There is an unnecessary space between tag name and backward slash '</ ..'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
            }
            const result = readAttributeStr(xmlData, i);
            if (result === false) {
              return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
            }
            let attrStr = result.value;
            i = result.index;
            if (attrStr[attrStr.length - 1] === "/") {
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, i));
              } else {
                const otg = tags.pop();
                if (tagName !== otg) {
                  return getErrorObject("InvalidTag", "Closing tag '" + otg + "' is expected inplace of '" + tagName + "'.", getLineNumberForPosition(xmlData, i));
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
              if (reachedRoot === true) {
                return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
              } else {
                tags.push(tagName);
              }
              tagFound = true;
            }
            for (i++; i < xmlData.length; i++) {
              if (xmlData[i] === "<") {
                if (xmlData[i + 1] === "!") {
                  i++;
                  i = readCommentAndCDATA(xmlData, i);
                  continue;
                } else if (xmlData[i + 1] === "?") {
                  i = readPI(xmlData, ++i);
                  if (i.err)
                    return i;
                } else {
                  break;
                }
              } else if (xmlData[i] === "&") {
                const afterAmp = validateAmpersand(xmlData, i);
                if (afterAmp == -1)
                  return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
                i = afterAmp;
              }
            }
            if (xmlData[i] === "<") {
              i--;
            }
          }
        } else {
          if (xmlData[i] === " " || xmlData[i] === "	" || xmlData[i] === "\n" || xmlData[i] === "\r") {
            continue;
          }
          return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
        }
      }
      if (!tagFound) {
        return getErrorObject("InvalidXml", "Start tag expected.", 1);
      } else if (tags.length > 0) {
        return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags, null, 4).replace(/\r?\n/g, "") + "' found.", 1);
      }
      return true;
    };
    function readPI(xmlData, i) {
      var start = i;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] == "?" || xmlData[i] == " ") {
          var tagname = xmlData.substr(start, i - start);
          if (i > 5 && tagname === "xml") {
            return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
          } else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
            i++;
            break;
          } else {
            continue;
          }
        }
      }
      return i;
    }
    function readCommentAndCDATA(xmlData, i) {
      if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
        for (i += 3; i < xmlData.length; i++) {
          if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
        let angleBracketsCount = 1;
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "<") {
            angleBracketsCount++;
          } else if (xmlData[i] === ">") {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      }
      return i;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i) {
      let attrStr = "";
      let startChar = "";
      let tagClosed = false;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
          if (startChar === "") {
            startChar = xmlData[i];
          } else if (startChar !== xmlData[i]) {
            continue;
          } else {
            startChar = "";
          }
        } else if (xmlData[i] === ">") {
          if (startChar === "") {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i];
      }
      if (startChar !== "") {
        return false;
      }
      return {
        value: attrStr,
        index: i,
        tagClosed
      };
    }
    var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i = 0; i < matches.length; i++) {
        if (matches[i][1].length === 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(attrStr, matches[i][0]));
        } else if (matches[i][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(attrStr, matches[i][0]));
        }
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(attrStr, matches[i][0]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(attrStr, matches[i][0]));
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i) {
      let re = /\d/;
      if (xmlData[i] === "x") {
        i++;
        re = /[\da-fA-F]/;
      }
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === ";")
          return i;
        if (!xmlData[i].match(re))
          break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i) {
      i++;
      if (xmlData[i] === ";")
        return -1;
      if (xmlData[i] === "#") {
        i++;
        return validateNumberAmpersand(xmlData, i);
      }
      let count = 0;
      for (; i < xmlData.length; i++, count++) {
        if (xmlData[i].match(/\w/) && count < 20)
          continue;
        if (xmlData[i] === ";")
          break;
        return -1;
      }
      return i;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber
        }
      };
    }
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      var lines = xmlData.substring(0, index).split(/\r?\n/);
      return lines.length;
    }
    function getPositionFromMatch(attrStr, match) {
      return attrStr.indexOf(match) + match.length;
    }
  }
});

// node_modules/fast-xml-parser/src/nimndata.js
var require_nimndata = __commonJS({
  "node_modules/fast-xml-parser/src/nimndata.js"(exports) {
    "use strict";
    var char = function(a) {
      return String.fromCharCode(a);
    };
    var chars = {
      nilChar: char(176),
      missingChar: char(201),
      nilPremitive: char(175),
      missingPremitive: char(200),
      emptyChar: char(178),
      emptyValue: char(177),
      boundryChar: char(179),
      objStart: char(198),
      arrStart: char(204),
      arrayEnd: char(185)
    };
    var charsArr = [
      chars.nilChar,
      chars.nilPremitive,
      chars.missingChar,
      chars.missingPremitive,
      chars.boundryChar,
      chars.emptyChar,
      chars.emptyValue,
      chars.arrayEnd,
      chars.objStart,
      chars.arrStart
    ];
    var _e = function(node, e_schema, options) {
      if (typeof e_schema === "string") {
        if (node && node[0] && node[0].val !== void 0) {
          return getValue(node[0].val, e_schema);
        } else {
          return getValue(node, e_schema);
        }
      } else {
        const hasValidData = hasData(node);
        if (hasValidData === true) {
          let str = "";
          if (Array.isArray(e_schema)) {
            str += chars.arrStart;
            const itemSchema = e_schema[0];
            const arr_len = node.length;
            if (typeof itemSchema === "string") {
              for (let arr_i = 0; arr_i < arr_len; arr_i++) {
                const r = getValue(node[arr_i].val, itemSchema);
                str = processValue(str, r);
              }
            } else {
              for (let arr_i = 0; arr_i < arr_len; arr_i++) {
                const r = _e(node[arr_i], itemSchema, options);
                str = processValue(str, r);
              }
            }
            str += chars.arrayEnd;
          } else {
            str += chars.objStart;
            const keys = Object.keys(e_schema);
            if (Array.isArray(node)) {
              node = node[0];
            }
            for (let i in keys) {
              const key = keys[i];
              let r;
              if (!options.ignoreAttributes && node.attrsMap && node.attrsMap[key]) {
                r = _e(node.attrsMap[key], e_schema[key], options);
              } else if (key === options.textNodeName) {
                r = _e(node.val, e_schema[key], options);
              } else {
                r = _e(node.child[key], e_schema[key], options);
              }
              str = processValue(str, r);
            }
          }
          return str;
        } else {
          return hasValidData;
        }
      }
    };
    var getValue = function(a) {
      switch (a) {
        case void 0:
          return chars.missingPremitive;
        case null:
          return chars.nilPremitive;
        case "":
          return chars.emptyValue;
        default:
          return a;
      }
    };
    var processValue = function(str, r) {
      if (!isAppChar(r[0]) && !isAppChar(str[str.length - 1])) {
        str += chars.boundryChar;
      }
      return str + r;
    };
    var isAppChar = function(ch) {
      return charsArr.indexOf(ch) !== -1;
    };
    function hasData(jObj) {
      if (jObj === void 0) {
        return chars.missingChar;
      } else if (jObj === null) {
        return chars.nilChar;
      } else if (jObj.child && Object.keys(jObj.child).length === 0 && (!jObj.attrsMap || Object.keys(jObj.attrsMap).length === 0)) {
        return chars.emptyChar;
      } else {
        return true;
      }
    }
    var x2j = require_xmlstr2xmlnode();
    var buildOptions = require_util().buildOptions;
    var convert2nimn = function(node, e_schema, options) {
      options = buildOptions(options, x2j.defaultOptions, x2j.props);
      return _e(node, e_schema, options);
    };
    exports.convert2nimn = convert2nimn;
  }
});

// node_modules/fast-xml-parser/src/node2json_str.js
var require_node2json_str = __commonJS({
  "node_modules/fast-xml-parser/src/node2json_str.js"(exports) {
    "use strict";
    var util = require_util();
    var buildOptions = require_util().buildOptions;
    var x2j = require_xmlstr2xmlnode();
    var convertToJsonString = function(node, options) {
      options = buildOptions(options, x2j.defaultOptions, x2j.props);
      options.indentBy = options.indentBy || "";
      return _cToJsonStr(node, options, 0);
    };
    var _cToJsonStr = function(node, options, level) {
      let jObj = "{";
      const keys = Object.keys(node.child);
      for (let index = 0; index < keys.length; index++) {
        var tagname = keys[index];
        if (node.child[tagname] && node.child[tagname].length > 1) {
          jObj += '"' + tagname + '" : [ ';
          for (var tag in node.child[tagname]) {
            jObj += _cToJsonStr(node.child[tagname][tag], options) + " , ";
          }
          jObj = jObj.substr(0, jObj.length - 1) + " ] ";
        } else {
          jObj += '"' + tagname + '" : ' + _cToJsonStr(node.child[tagname][0], options) + " ,";
        }
      }
      util.merge(jObj, node.attrsMap);
      if (util.isEmptyObject(jObj)) {
        return util.isExist(node.val) ? node.val : "";
      } else {
        if (util.isExist(node.val)) {
          if (!(typeof node.val === "string" && (node.val === "" || node.val === options.cdataPositionChar))) {
            jObj += '"' + options.textNodeName + '" : ' + stringval(node.val);
          }
        }
      }
      if (jObj[jObj.length - 1] === ",") {
        jObj = jObj.substr(0, jObj.length - 2);
      }
      return jObj + "}";
    };
    function stringval(v) {
      if (v === true || v === false || !isNaN(v)) {
        return v;
      } else {
        return '"' + v + '"';
      }
    }
    exports.convertToJsonString = convertToJsonString;
  }
});

// node_modules/fast-xml-parser/src/json2xml.js
var require_json2xml = __commonJS({
  "node_modules/fast-xml-parser/src/json2xml.js"(exports, module2) {
    "use strict";
    var buildOptions = require_util().buildOptions;
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attrNodeName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      cdataTagName: false,
      cdataPositionChar: "\\c",
      format: false,
      indentBy: "  ",
      supressEmptyNode: false,
      tagValueProcessor: function(a) {
        return a;
      },
      attrValueProcessor: function(a) {
        return a;
      }
    };
    var props = [
      "attributeNamePrefix",
      "attrNodeName",
      "textNodeName",
      "ignoreAttributes",
      "cdataTagName",
      "cdataPositionChar",
      "format",
      "indentBy",
      "supressEmptyNode",
      "tagValueProcessor",
      "attrValueProcessor"
    ];
    function Parser(options) {
      this.options = buildOptions(options, defaultOptions, props);
      if (this.options.ignoreAttributes || this.options.attrNodeName) {
        this.isAttribute = function() {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      if (this.options.cdataTagName) {
        this.isCDATA = isCDATA;
      } else {
        this.isCDATA = function() {
          return false;
        };
      }
      this.replaceCDATAstr = replaceCDATAstr;
      this.replaceCDATAarr = replaceCDATAarr;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
      } else {
        this.indentate = function() {
          return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
      }
      if (this.options.supressEmptyNode) {
        this.buildTextNode = buildEmptyTextNode;
        this.buildObjNode = buildEmptyObjNode;
      } else {
        this.buildTextNode = buildTextValNode;
        this.buildObjNode = buildObjectNode;
      }
      this.buildTextValNode = buildTextValNode;
      this.buildObjectNode = buildObjectNode;
    }
    Parser.prototype.parse = function(jObj) {
      return this.j2x(jObj, 0).val;
    };
    Parser.prototype.j2x = function(jObj, level) {
      let attrStr = "";
      let val = "";
      const keys = Object.keys(jObj);
      const len = keys.length;
      for (let i = 0; i < len; i++) {
        const key = keys[i];
        if (typeof jObj[key] === "undefined") {
        } else if (jObj[key] === null) {
          val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val += this.buildTextNode(jObj[key], key, "", level);
        } else if (typeof jObj[key] !== "object") {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += " " + attr + '="' + this.options.attrValueProcessor("" + jObj[key]) + '"';
          } else if (this.isCDATA(key)) {
            if (jObj[this.options.textNodeName]) {
              val += this.replaceCDATAstr(jObj[this.options.textNodeName], jObj[key]);
            } else {
              val += this.replaceCDATAstr("", jObj[key]);
            }
          } else {
            if (key === this.options.textNodeName) {
              if (jObj[this.options.cdataTagName]) {
              } else {
                val += this.options.tagValueProcessor("" + jObj[key]);
              }
            } else {
              val += this.buildTextNode(jObj[key], key, "", level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          if (this.isCDATA(key)) {
            val += this.indentate(level);
            if (jObj[this.options.textNodeName]) {
              val += this.replaceCDATAarr(jObj[this.options.textNodeName], jObj[key]);
            } else {
              val += this.replaceCDATAarr("", jObj[key]);
            }
          } else {
            const arrLen = jObj[key].length;
            for (let j = 0; j < arrLen; j++) {
              const item = jObj[key][j];
              if (typeof item === "undefined") {
              } else if (item === null) {
                val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
              } else if (typeof item === "object") {
                const result = this.j2x(item, level + 1);
                val += this.buildObjNode(result.val, key, result.attrStr, level);
              } else {
                val += this.buildTextNode(item, key, "", level);
              }
            }
          }
        } else {
          if (this.options.attrNodeName && key === this.options.attrNodeName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j = 0; j < L; j++) {
              attrStr += " " + Ks[j] + '="' + this.options.attrValueProcessor("" + jObj[key][Ks[j]]) + '"';
            }
          } else {
            const result = this.j2x(jObj[key], level + 1);
            val += this.buildObjNode(result.val, key, result.attrStr, level);
          }
        }
      }
      return { attrStr, val };
    };
    function replaceCDATAstr(str, cdata) {
      str = this.options.tagValueProcessor("" + str);
      if (this.options.cdataPositionChar === "" || str === "") {
        return str + "<![CDATA[" + cdata + "]]" + this.tagEndChar;
      } else {
        return str.replace(this.options.cdataPositionChar, "<![CDATA[" + cdata + "]]" + this.tagEndChar);
      }
    }
    function replaceCDATAarr(str, cdata) {
      str = this.options.tagValueProcessor("" + str);
      if (this.options.cdataPositionChar === "" || str === "") {
        return str + "<![CDATA[" + cdata.join("]]><![CDATA[") + "]]" + this.tagEndChar;
      } else {
        for (let v in cdata) {
          str = str.replace(this.options.cdataPositionChar, "<![CDATA[" + cdata[v] + "]]>");
        }
        return str + this.newLine;
      }
    }
    function buildObjectNode(val, key, attrStr, level) {
      if (attrStr && !val.includes("<")) {
        return this.indentate(level) + "<" + key + attrStr + ">" + val + "</" + key + this.tagEndChar;
      } else {
        return this.indentate(level) + "<" + key + attrStr + this.tagEndChar + val + this.indentate(level) + "</" + key + this.tagEndChar;
      }
    }
    function buildEmptyObjNode(val, key, attrStr, level) {
      if (val !== "") {
        return this.buildObjectNode(val, key, attrStr, level);
      } else {
        return this.indentate(level) + "<" + key + attrStr + "/" + this.tagEndChar;
      }
    }
    function buildTextValNode(val, key, attrStr, level) {
      return this.indentate(level) + "<" + key + attrStr + ">" + this.options.tagValueProcessor(val) + "</" + key + this.tagEndChar;
    }
    function buildEmptyTextNode(val, key, attrStr, level) {
      if (val !== "") {
        return this.buildTextValNode(val, key, attrStr, level);
      } else {
        return this.indentate(level) + "<" + key + attrStr + "/" + this.tagEndChar;
      }
    }
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    function isCDATA(name) {
      return name === this.options.cdataTagName;
    }
    module2.exports = Parser;
  }
});

// node_modules/fast-xml-parser/src/parser.js
var require_parser = __commonJS({
  "node_modules/fast-xml-parser/src/parser.js"(exports) {
    "use strict";
    var nodeToJson = require_node2json();
    var xmlToNodeobj = require_xmlstr2xmlnode();
    var x2xmlnode = require_xmlstr2xmlnode();
    var buildOptions = require_util().buildOptions;
    var validator = require_validator();
    exports.parse = function(xmlData, options, validationOption) {
      if (validationOption) {
        if (validationOption === true)
          validationOption = {};
        const result = validator.validate(xmlData, validationOption);
        if (result !== true) {
          throw Error(result.err.msg);
        }
      }
      options = buildOptions(options, x2xmlnode.defaultOptions, x2xmlnode.props);
      const traversableObj = xmlToNodeobj.getTraversalObj(xmlData, options);
      return nodeToJson.convertToJson(traversableObj, options);
    };
    exports.convertTonimn = require_nimndata().convert2nimn;
    exports.getTraversalObj = xmlToNodeobj.getTraversalObj;
    exports.convertToJson = nodeToJson.convertToJson;
    exports.convertToJsonString = require_node2json_str().convertToJsonString;
    exports.validate = validator.validate;
    exports.j2xParser = require_json2xml();
    exports.parseToNimn = function(xmlData, schema, options) {
      return exports.convertTonimn(exports.getTraversalObj(xmlData, options), schema, options);
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js
var require_Aws_query = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializeAws_queryGetSessionTokenCommand = exports.deserializeAws_queryGetFederationTokenCommand = exports.deserializeAws_queryGetCallerIdentityCommand = exports.deserializeAws_queryGetAccessKeyInfoCommand = exports.deserializeAws_queryDecodeAuthorizationMessageCommand = exports.deserializeAws_queryAssumeRoleWithWebIdentityCommand = exports.deserializeAws_queryAssumeRoleWithSAMLCommand = exports.deserializeAws_queryAssumeRoleCommand = exports.serializeAws_queryGetSessionTokenCommand = exports.serializeAws_queryGetFederationTokenCommand = exports.serializeAws_queryGetCallerIdentityCommand = exports.serializeAws_queryGetAccessKeyInfoCommand = exports.serializeAws_queryDecodeAuthorizationMessageCommand = exports.serializeAws_queryAssumeRoleWithWebIdentityCommand = exports.serializeAws_queryAssumeRoleWithSAMLCommand = exports.serializeAws_queryAssumeRoleCommand = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs3();
    var entities_1 = require_lib();
    var fast_xml_parser_1 = require_parser();
    var models_0_1 = require_models_02();
    var STSServiceException_1 = require_STSServiceException();
    var serializeAws_queryAssumeRoleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleRequest(input, context),
        Action: "AssumeRole",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAssumeRoleCommand = serializeAws_queryAssumeRoleCommand;
    var serializeAws_queryAssumeRoleWithSAMLCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleWithSAMLRequest(input, context),
        Action: "AssumeRoleWithSAML",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAssumeRoleWithSAMLCommand = serializeAws_queryAssumeRoleWithSAMLCommand;
    var serializeAws_queryAssumeRoleWithWebIdentityCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleWithWebIdentityRequest(input, context),
        Action: "AssumeRoleWithWebIdentity",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAssumeRoleWithWebIdentityCommand = serializeAws_queryAssumeRoleWithWebIdentityCommand;
    var serializeAws_queryDecodeAuthorizationMessageCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDecodeAuthorizationMessageRequest(input, context),
        Action: "DecodeAuthorizationMessage",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDecodeAuthorizationMessageCommand = serializeAws_queryDecodeAuthorizationMessageCommand;
    var serializeAws_queryGetAccessKeyInfoCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetAccessKeyInfoRequest(input, context),
        Action: "GetAccessKeyInfo",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetAccessKeyInfoCommand = serializeAws_queryGetAccessKeyInfoCommand;
    var serializeAws_queryGetCallerIdentityCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetCallerIdentityRequest(input, context),
        Action: "GetCallerIdentity",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetCallerIdentityCommand = serializeAws_queryGetCallerIdentityCommand;
    var serializeAws_queryGetFederationTokenCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetFederationTokenRequest(input, context),
        Action: "GetFederationToken",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetFederationTokenCommand = serializeAws_queryGetFederationTokenCommand;
    var serializeAws_queryGetSessionTokenCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetSessionTokenRequest(input, context),
        Action: "GetSessionToken",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetSessionTokenCommand = serializeAws_queryGetSessionTokenCommand;
    var deserializeAws_queryAssumeRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleResponse(data.AssumeRoleResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAssumeRoleCommand = deserializeAws_queryAssumeRoleCommand;
    var deserializeAws_queryAssumeRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLargeException":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryAssumeRoleWithSAMLCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleWithSAMLCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAssumeRoleWithSAMLCommand = deserializeAws_queryAssumeRoleWithSAMLCommand;
    var deserializeAws_queryAssumeRoleWithSAMLCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "IDPRejectedClaimException":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);
        case "InvalidIdentityTokenException":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLargeException":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryAssumeRoleWithWebIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleWithWebIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAssumeRoleWithWebIdentityCommand = deserializeAws_queryAssumeRoleWithWebIdentityCommand;
    var deserializeAws_queryAssumeRoleWithWebIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "IDPCommunicationErrorException":
        case "com.amazonaws.sts#IDPCommunicationErrorException":
          throw await deserializeAws_queryIDPCommunicationErrorExceptionResponse(parsedOutput, context);
        case "IDPRejectedClaimException":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);
        case "InvalidIdentityTokenException":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLargeException":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDecodeAuthorizationMessageCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDecodeAuthorizationMessageCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDecodeAuthorizationMessageCommand = deserializeAws_queryDecodeAuthorizationMessageCommand;
    var deserializeAws_queryDecodeAuthorizationMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidAuthorizationMessageException":
        case "com.amazonaws.sts#InvalidAuthorizationMessageException":
          throw await deserializeAws_queryInvalidAuthorizationMessageExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetAccessKeyInfoCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetAccessKeyInfoCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetAccessKeyInfoCommand = deserializeAws_queryGetAccessKeyInfoCommand;
    var deserializeAws_queryGetAccessKeyInfoCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetCallerIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetCallerIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetCallerIdentityResponse(data.GetCallerIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetCallerIdentityCommand = deserializeAws_queryGetCallerIdentityCommand;
    var deserializeAws_queryGetCallerIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetFederationTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetFederationTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetFederationTokenResponse(data.GetFederationTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetFederationTokenCommand = deserializeAws_queryGetFederationTokenCommand;
    var deserializeAws_queryGetFederationTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLargeException":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetSessionTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetSessionTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetSessionTokenResponse(data.GetSessionTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetSessionTokenCommand = deserializeAws_queryGetSessionTokenCommand;
    var deserializeAws_queryGetSessionTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryExpiredTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryExpiredTokenException(body.Error, context);
      const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryIDPCommunicationErrorExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIDPCommunicationErrorException(body.Error, context);
      const exception = new models_0_1.IDPCommunicationErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryIDPRejectedClaimExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIDPRejectedClaimException(body.Error, context);
      const exception = new models_0_1.IDPRejectedClaimException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidAuthorizationMessageExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidAuthorizationMessageException(body.Error, context);
      const exception = new models_0_1.InvalidAuthorizationMessageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidIdentityTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidIdentityTokenException(body.Error, context);
      const exception = new models_0_1.InvalidIdentityTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryMalformedPolicyDocumentExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryMalformedPolicyDocumentException(body.Error, context);
      const exception = new models_0_1.MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryPackedPolicyTooLargeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryPackedPolicyTooLargeException(body.Error, context);
      const exception = new models_0_1.PackedPolicyTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryRegionDisabledExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryRegionDisabledException(body.Error, context);
      const exception = new models_0_1.RegionDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var serializeAws_queryAssumeRoleRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn !== void 0 && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName !== void 0 && input.RoleSessionName !== null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.PolicyArns !== void 0 && input.PolicyArns !== null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy !== void 0 && input.Policy !== null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.TransitiveTagKeys !== void 0 && input.TransitiveTagKeys !== null) {
        const memberEntries = serializeAws_querytagKeyListType(input.TransitiveTagKeys, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ExternalId !== void 0 && input.ExternalId !== null) {
        entries["ExternalId"] = input.ExternalId;
      }
      if (input.SerialNumber !== void 0 && input.SerialNumber !== null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode !== void 0 && input.TokenCode !== null) {
        entries["TokenCode"] = input.TokenCode;
      }
      if (input.SourceIdentity !== void 0 && input.SourceIdentity !== null) {
        entries["SourceIdentity"] = input.SourceIdentity;
      }
      return entries;
    };
    var serializeAws_queryAssumeRoleWithSAMLRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn !== void 0 && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.PrincipalArn !== void 0 && input.PrincipalArn !== null) {
        entries["PrincipalArn"] = input.PrincipalArn;
      }
      if (input.SAMLAssertion !== void 0 && input.SAMLAssertion !== null) {
        entries["SAMLAssertion"] = input.SAMLAssertion;
      }
      if (input.PolicyArns !== void 0 && input.PolicyArns !== null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy !== void 0 && input.Policy !== null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var serializeAws_queryAssumeRoleWithWebIdentityRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn !== void 0 && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName !== void 0 && input.RoleSessionName !== null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.WebIdentityToken !== void 0 && input.WebIdentityToken !== null) {
        entries["WebIdentityToken"] = input.WebIdentityToken;
      }
      if (input.ProviderId !== void 0 && input.ProviderId !== null) {
        entries["ProviderId"] = input.ProviderId;
      }
      if (input.PolicyArns !== void 0 && input.PolicyArns !== null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy !== void 0 && input.Policy !== null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var serializeAws_queryDecodeAuthorizationMessageRequest = (input, context) => {
      const entries = {};
      if (input.EncodedMessage !== void 0 && input.EncodedMessage !== null) {
        entries["EncodedMessage"] = input.EncodedMessage;
      }
      return entries;
    };
    var serializeAws_queryGetAccessKeyInfoRequest = (input, context) => {
      const entries = {};
      if (input.AccessKeyId !== void 0 && input.AccessKeyId !== null) {
        entries["AccessKeyId"] = input.AccessKeyId;
      }
      return entries;
    };
    var serializeAws_queryGetCallerIdentityRequest = (input, context) => {
      const entries = {};
      return entries;
    };
    var serializeAws_queryGetFederationTokenRequest = (input, context) => {
      const entries = {};
      if (input.Name !== void 0 && input.Name !== null) {
        entries["Name"] = input.Name;
      }
      if (input.Policy !== void 0 && input.Policy !== null) {
        entries["Policy"] = input.Policy;
      }
      if (input.PolicyArns !== void 0 && input.PolicyArns !== null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryGetSessionTokenRequest = (input, context) => {
      const entries = {};
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.SerialNumber !== void 0 && input.SerialNumber !== null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode !== void 0 && input.TokenCode !== null) {
        entries["TokenCode"] = input.TokenCode;
      }
      return entries;
    };
    var serializeAws_querypolicyDescriptorListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryPolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryPolicyDescriptorType = (input, context) => {
      const entries = {};
      if (input.arn !== void 0 && input.arn !== null) {
        entries["arn"] = input.arn;
      }
      return entries;
    };
    var serializeAws_queryTag = (input, context) => {
      const entries = {};
      if (input.Key !== void 0 && input.Key !== null) {
        entries["Key"] = input.Key;
      }
      if (input.Value !== void 0 && input.Value !== null) {
        entries["Value"] = input.Value;
      }
      return entries;
    };
    var serializeAws_querytagKeyListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_querytagListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var deserializeAws_queryAssumedRoleUser = (output, context) => {
      const contents = {
        AssumedRoleId: void 0,
        Arn: void 0
      };
      if (output["AssumedRoleId"] !== void 0) {
        contents.AssumedRoleId = (0, smithy_client_1.expectString)(output["AssumedRoleId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleWithSAMLResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        Subject: void 0,
        SubjectType: void 0,
        Issuer: void 0,
        Audience: void 0,
        NameQualifier: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Subject"] !== void 0) {
        contents.Subject = (0, smithy_client_1.expectString)(output["Subject"]);
      }
      if (output["SubjectType"] !== void 0) {
        contents.SubjectType = (0, smithy_client_1.expectString)(output["SubjectType"]);
      }
      if (output["Issuer"] !== void 0) {
        contents.Issuer = (0, smithy_client_1.expectString)(output["Issuer"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["NameQualifier"] !== void 0) {
        contents.NameQualifier = (0, smithy_client_1.expectString)(output["NameQualifier"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleWithWebIdentityResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        SubjectFromWebIdentityToken: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        Provider: void 0,
        Audience: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["SubjectFromWebIdentityToken"] !== void 0) {
        contents.SubjectFromWebIdentityToken = (0, smithy_client_1.expectString)(output["SubjectFromWebIdentityToken"]);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Provider"] !== void 0) {
        contents.Provider = (0, smithy_client_1.expectString)(output["Provider"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryCredentials = (output, context) => {
      const contents = {
        AccessKeyId: void 0,
        SecretAccessKey: void 0,
        SessionToken: void 0,
        Expiration: void 0
      };
      if (output["AccessKeyId"] !== void 0) {
        contents.AccessKeyId = (0, smithy_client_1.expectString)(output["AccessKeyId"]);
      }
      if (output["SecretAccessKey"] !== void 0) {
        contents.SecretAccessKey = (0, smithy_client_1.expectString)(output["SecretAccessKey"]);
      }
      if (output["SessionToken"] !== void 0) {
        contents.SessionToken = (0, smithy_client_1.expectString)(output["SessionToken"]);
      }
      if (output["Expiration"] !== void 0) {
        contents.Expiration = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["Expiration"]));
      }
      return contents;
    };
    var deserializeAws_queryDecodeAuthorizationMessageResponse = (output, context) => {
      const contents = {
        DecodedMessage: void 0
      };
      if (output["DecodedMessage"] !== void 0) {
        contents.DecodedMessage = (0, smithy_client_1.expectString)(output["DecodedMessage"]);
      }
      return contents;
    };
    var deserializeAws_queryExpiredTokenException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryFederatedUser = (output, context) => {
      const contents = {
        FederatedUserId: void 0,
        Arn: void 0
      };
      if (output["FederatedUserId"] !== void 0) {
        contents.FederatedUserId = (0, smithy_client_1.expectString)(output["FederatedUserId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryGetAccessKeyInfoResponse = (output, context) => {
      const contents = {
        Account: void 0
      };
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      return contents;
    };
    var deserializeAws_queryGetCallerIdentityResponse = (output, context) => {
      const contents = {
        UserId: void 0,
        Account: void 0,
        Arn: void 0
      };
      if (output["UserId"] !== void 0) {
        contents.UserId = (0, smithy_client_1.expectString)(output["UserId"]);
      }
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryGetFederationTokenResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        FederatedUser: void 0,
        PackedPolicySize: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["FederatedUser"] !== void 0) {
        contents.FederatedUser = deserializeAws_queryFederatedUser(output["FederatedUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      return contents;
    };
    var deserializeAws_queryGetSessionTokenResponse = (output, context) => {
      const contents = {
        Credentials: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      return contents;
    };
    var deserializeAws_queryIDPCommunicationErrorException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryIDPRejectedClaimException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidAuthorizationMessageException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidIdentityTokenException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryMalformedPolicyDocumentException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryPackedPolicyTooLargeException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryRegionDisabledException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeMetadata = (output) => {
      var _a;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parsedObj = (0, fast_xml_parser_1.parse)(encoded, {
          attributeNamePrefix: "",
          ignoreAttributes: false,
          parseNodeValue: false,
          trimValues: false,
          tagValueProcessor: (val) => val.trim() === "" && val.includes("\n") ? "" : (0, entities_1.decodeHTML)(val)
        });
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    });
    var buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + "=" + (0, smithy_client_1.extendedEncodeURIComponent)(value)).join("&");
    var loadQueryErrorCode = (output, data) => {
      if (data.Error.Code !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js
var require_AssumeRoleCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs19();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleCommand)(output, context);
      }
    };
    exports.AssumeRoleCommand = AssumeRoleCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js
var require_AssumeRoleWithSAMLCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleWithSAMLCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithSAMLCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithSAMLCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleWithSAMLCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleWithSAMLCommand)(output, context);
      }
    };
    exports.AssumeRoleWithSAMLCommand = AssumeRoleWithSAMLCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js
var require_AssumeRoleWithWebIdentityCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleWithWebIdentityCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithWebIdentityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithWebIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleWithWebIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleWithWebIdentityCommand)(output, context);
      }
    };
    exports.AssumeRoleWithWebIdentityCommand = AssumeRoleWithWebIdentityCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js
var require_DecodeAuthorizationMessageCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DecodeAuthorizationMessageCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs19();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var DecodeAuthorizationMessageCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "DecodeAuthorizationMessageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDecodeAuthorizationMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDecodeAuthorizationMessageCommand)(output, context);
      }
    };
    exports.DecodeAuthorizationMessageCommand = DecodeAuthorizationMessageCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js
var require_GetAccessKeyInfoCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAccessKeyInfoCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs19();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetAccessKeyInfoCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetAccessKeyInfoCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetAccessKeyInfoRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetAccessKeyInfoResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetAccessKeyInfoCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetAccessKeyInfoCommand)(output, context);
      }
    };
    exports.GetAccessKeyInfoCommand = GetAccessKeyInfoCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js
var require_GetCallerIdentityCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetCallerIdentityCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs19();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetCallerIdentityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetCallerIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetCallerIdentityRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetCallerIdentityResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetCallerIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetCallerIdentityCommand)(output, context);
      }
    };
    exports.GetCallerIdentityCommand = GetCallerIdentityCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js
var require_GetFederationTokenCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetFederationTokenCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs19();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetFederationTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetFederationTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetFederationTokenRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetFederationTokenResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetFederationTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetFederationTokenCommand)(output, context);
      }
    };
    exports.GetFederationTokenCommand = GetFederationTokenCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js
var require_GetSessionTokenCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetSessionTokenCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs19();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetSessionTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetSessionTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetSessionTokenRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetSessionTokenResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetSessionTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetSessionTokenCommand)(output, context);
      }
    };
    exports.GetSessionTokenCommand = GetSessionTokenCommand;
  }
});

// node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js
var require_dist_cjs21 = __commonJS({
  "node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveStsAuthConfig = void 0;
    var middleware_signing_1 = require_dist_cjs19();
    var resolveStsAuthConfig = (input, { stsClientCtor }) => (0, middleware_signing_1.resolveAwsAuthConfig)({
      ...input,
      stsClientCtor
    });
    exports.resolveStsAuthConfig = resolveStsAuthConfig;
  }
});

// node_modules/@aws-sdk/client-sts/package.json
var require_package2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sts",
      description: "AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native",
      version: "3.121.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/config-resolver": "3.110.0",
        "@aws-sdk/credential-provider-node": "3.121.0",
        "@aws-sdk/fetch-http-handler": "3.110.0",
        "@aws-sdk/hash-node": "3.110.0",
        "@aws-sdk/invalid-dependency": "3.110.0",
        "@aws-sdk/middleware-content-length": "3.110.0",
        "@aws-sdk/middleware-host-header": "3.110.0",
        "@aws-sdk/middleware-logger": "3.110.0",
        "@aws-sdk/middleware-recursion-detection": "3.110.0",
        "@aws-sdk/middleware-retry": "3.118.1",
        "@aws-sdk/middleware-sdk-sts": "3.110.0",
        "@aws-sdk/middleware-serde": "3.110.0",
        "@aws-sdk/middleware-signing": "3.110.0",
        "@aws-sdk/middleware-stack": "3.110.0",
        "@aws-sdk/middleware-user-agent": "3.110.0",
        "@aws-sdk/node-config-provider": "3.110.0",
        "@aws-sdk/node-http-handler": "3.118.1",
        "@aws-sdk/protocol-http": "3.110.0",
        "@aws-sdk/smithy-client": "3.110.0",
        "@aws-sdk/types": "3.110.0",
        "@aws-sdk/url-parser": "3.110.0",
        "@aws-sdk/util-base64-browser": "3.109.0",
        "@aws-sdk/util-base64-node": "3.55.0",
        "@aws-sdk/util-body-length-browser": "3.55.0",
        "@aws-sdk/util-body-length-node": "3.55.0",
        "@aws-sdk/util-defaults-mode-browser": "3.110.0",
        "@aws-sdk/util-defaults-mode-node": "3.110.0",
        "@aws-sdk/util-user-agent-browser": "3.110.0",
        "@aws-sdk/util-user-agent-node": "3.118.0",
        "@aws-sdk/util-utf8-browser": "3.109.0",
        "@aws-sdk/util-utf8-node": "3.109.0",
        entities: "2.2.0",
        "fast-xml-parser": "3.19.0",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.58.0",
        "@tsconfig/recommended": "1.0.1",
        "@types/node": "^12.7.5",
        concurrently: "7.0.0",
        "downlevel-dts": "0.7.0",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      engines: {
        node: ">=12.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sts"
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js
var require_defaultStsRoleAssumers = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateDefaultCredentialProvider = exports.getDefaultRoleAssumerWithWebIdentity = exports.getDefaultRoleAssumer = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
    var decorateDefaultRegion = (region) => {
      if (typeof region !== "function") {
        return region === void 0 ? ASSUME_ROLE_DEFAULT_REGION : region;
      }
      return async () => {
        try {
          return await region();
        } catch (e) {
          return ASSUME_ROLE_DEFAULT_REGION;
        }
      };
    };
    var getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...requestHandler ? { requestHandler } : {}
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleCommand_1.AssumeRoleCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {
      let stsClient;
      return async (params) => {
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...requestHandler ? { requestHandler } : {}
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider({
      roleAssumer: (0, exports.getDefaultRoleAssumer)(input, input.stsClientCtor),
      roleAssumerWithWebIdentity: (0, exports.getDefaultRoleAssumerWithWebIdentity)(input, input.stsClientCtor),
      ...input
    });
    exports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js
var require_fromEnv = __commonJS({
  "node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromEnv = exports.ENV_EXPIRATION = exports.ENV_SESSION = exports.ENV_SECRET = exports.ENV_KEY = void 0;
    var property_provider_1 = require_dist_cjs14();
    exports.ENV_KEY = "AWS_ACCESS_KEY_ID";
    exports.ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
    exports.ENV_SESSION = "AWS_SESSION_TOKEN";
    exports.ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
    var fromEnv = () => async () => {
      const accessKeyId = process.env[exports.ENV_KEY];
      const secretAccessKey = process.env[exports.ENV_SECRET];
      const sessionToken = process.env[exports.ENV_SESSION];
      const expiry = process.env[exports.ENV_EXPIRATION];
      if (accessKeyId && secretAccessKey) {
        return {
          accessKeyId,
          secretAccessKey,
          ...sessionToken && { sessionToken },
          ...expiry && { expiration: new Date(expiry) }
        };
      }
      throw new property_provider_1.CredentialsProviderError("Unable to find environment variable credentials.");
    };
    exports.fromEnv = fromEnv;
  }
});

// node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js
var require_dist_cjs22 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromEnv(), exports);
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHomeDir = void 0;
    var os_1 = require("os");
    var path_1 = require("path");
    var getHomeDir = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME)
        return HOME;
      if (USERPROFILE)
        return USERPROFILE;
      if (HOMEPATH)
        return `${HOMEDRIVE}${HOMEPATH}`;
      return (0, os_1.homedir)();
    };
    exports.getHomeDir = getHomeDir;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js
var require_getProfileName = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProfileName = exports.DEFAULT_PROFILE = exports.ENV_PROFILE = void 0;
    exports.ENV_PROFILE = "AWS_PROFILE";
    exports.DEFAULT_PROFILE = "default";
    var getProfileName = (init) => init.profile || process.env[exports.ENV_PROFILE] || exports.DEFAULT_PROFILE;
    exports.getProfileName = getProfileName;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSSOTokenFilepath = void 0;
    var crypto_1 = require("crypto");
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    var getSSOTokenFilepath = (ssoStartUrl) => {
      const hasher = (0, crypto_1.createHash)("sha1");
      const cacheName = hasher.update(ssoStartUrl).digest("hex");
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "sso", "cache", `${cacheName}.json`);
    };
    exports.getSSOTokenFilepath = getSSOTokenFilepath;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSSOTokenFromFile = void 0;
    var fs_1 = require("fs");
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile = async (ssoStartUrl) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(ssoStartUrl);
      const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
      return JSON.parse(ssoTokenText);
    };
    exports.getSSOTokenFromFile = getSSOTokenFromFile;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js
var require_getConfigFilepath = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getConfigFilepath = exports.ENV_CONFIG_PATH = void 0;
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports.ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
    var getConfigFilepath = () => process.env[exports.ENV_CONFIG_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "config");
    exports.getConfigFilepath = getConfigFilepath;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js
var require_getCredentialsFilepath = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCredentialsFilepath = exports.ENV_CREDENTIALS_PATH = void 0;
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports.ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
    var getCredentialsFilepath = () => process.env[exports.ENV_CREDENTIALS_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "credentials");
    exports.getCredentialsFilepath = getCredentialsFilepath;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js
var require_getProfileData = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProfileData = void 0;
    var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
    var getProfileData = (data) => Object.entries(data).filter(([key]) => profileKeyRegex.test(key)).reduce((acc, [key, value]) => ({ ...acc, [profileKeyRegex.exec(key)[2]]: value }), {
      ...data.default && { default: data.default }
    });
    exports.getProfileData = getProfileData;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js
var require_parseIni = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseIni = void 0;
    var profileNameBlockList = ["__proto__", "profile __proto__"];
    var parseIni = (iniData) => {
      const map = {};
      let currentSection;
      for (let line of iniData.split(/\r?\n/)) {
        line = line.split(/(^|\s)[;#]/)[0].trim();
        const isSection = line[0] === "[" && line[line.length - 1] === "]";
        if (isSection) {
          currentSection = line.substring(1, line.length - 1);
          if (profileNameBlockList.includes(currentSection)) {
            throw new Error(`Found invalid profile name "${currentSection}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = line.indexOf("=");
          const start = 0;
          const end = line.length - 1;
          const isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;
          if (isAssignment) {
            const [name, value] = [
              line.substring(0, indexOfEqualsSign).trim(),
              line.substring(indexOfEqualsSign + 1).trim()
            ];
            map[currentSection] = map[currentSection] || {};
            map[currentSection][name] = value;
          }
        }
      }
      return map;
    };
    exports.parseIni = parseIni;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.slurpFile = void 0;
    var fs_1 = require("fs");
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path) => {
      if (!filePromisesHash[path]) {
        filePromisesHash[path] = readFile(path, "utf8");
      }
      return filePromisesHash[path];
    };
    exports.slurpFile = slurpFile;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js
var require_loadSharedConfigFiles = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadSharedConfigFiles = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getCredentialsFilepath_1 = require_getCredentialsFilepath();
    var getProfileData_1 = require_getProfileData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSharedConfigFiles = async (init = {}) => {
      const { filepath = (0, getCredentialsFilepath_1.getCredentialsFilepath)(), configFilepath = (0, getConfigFilepath_1.getConfigFilepath)() } = init;
      const parsedFiles = await Promise.all([
        (0, slurpFile_1.slurpFile)(configFilepath).then(parseIni_1.parseIni).then(getProfileData_1.getProfileData).catch(swallowError),
        (0, slurpFile_1.slurpFile)(filepath).then(parseIni_1.parseIni).catch(swallowError)
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
      };
    };
    exports.loadSharedConfigFiles = loadSharedConfigFiles;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js
var require_parseKnownFiles = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseKnownFiles = void 0;
    var loadSharedConfigFiles_1 = require_loadSharedConfigFiles();
    var parseKnownFiles = async (init) => {
      const parsedFiles = await (0, loadSharedConfigFiles_1.loadSharedConfigFiles)(init);
      return {
        ...parsedFiles.configFile,
        ...parsedFiles.credentialsFile
      };
    };
    exports.parseKnownFiles = parseKnownFiles;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js
var require_types2 = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs23 = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_getHomeDir(), exports);
    tslib_1.__exportStar(require_getProfileName(), exports);
    tslib_1.__exportStar(require_getSSOTokenFilepath(), exports);
    tslib_1.__exportStar(require_getSSOTokenFromFile(), exports);
    tslib_1.__exportStar(require_loadSharedConfigFiles(), exports);
    tslib_1.__exportStar(require_parseKnownFiles(), exports);
    tslib_1.__exportStar(require_types2(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js
var require_httpRequest2 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.httpRequest = void 0;
    var property_provider_1 = require_dist_cjs14();
    var buffer_1 = require("buffer");
    var http_1 = require("http");
    function httpRequest(options) {
      return new Promise((resolve, reject) => {
        var _a;
        const req = (0, http_1.request)({
          method: "GET",
          ...options,
          hostname: (_a = options.hostname) === null || _a === void 0 ? void 0 : _a.replace(/^\[(.+)\]$/, "$1")
        });
        req.on("error", (err) => {
          reject(Object.assign(new property_provider_1.ProviderError("Unable to connect to instance metadata service"), err));
          req.destroy();
        });
        req.on("timeout", () => {
          reject(new property_provider_1.ProviderError("TimeoutError from instance metadata service"));
          req.destroy();
        });
        req.on("response", (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(Object.assign(new property_provider_1.ProviderError("Error response received from instance metadata service"), { statusCode }));
            req.destroy();
          }
          const chunks = [];
          res.on("data", (chunk) => {
            chunks.push(chunk);
          });
          res.on("end", () => {
            resolve(buffer_1.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    exports.httpRequest = httpRequest;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js
var require_ImdsCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromImdsCredentials = exports.isImdsCredentials = void 0;
    var isImdsCredentials = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string";
    exports.isImdsCredentials = isImdsCredentials;
    var fromImdsCredentials = (creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration)
    });
    exports.fromImdsCredentials = fromImdsCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js
var require_RemoteProviderInit = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.providerConfigFromInit = exports.DEFAULT_MAX_RETRIES = exports.DEFAULT_TIMEOUT = void 0;
    exports.DEFAULT_TIMEOUT = 1e3;
    exports.DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = ({ maxRetries = exports.DEFAULT_MAX_RETRIES, timeout = exports.DEFAULT_TIMEOUT }) => ({ maxRetries, timeout });
    exports.providerConfigFromInit = providerConfigFromInit;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js
var require_retry = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.retry = void 0;
    var retry = (toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    };
    exports.retry = retry;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js
var require_fromContainerMetadata = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromContainerMetadata = exports.ENV_CMDS_AUTH_TOKEN = exports.ENV_CMDS_RELATIVE_URI = exports.ENV_CMDS_FULL_URI = void 0;
    var property_provider_1 = require_dist_cjs14();
    var url_1 = require("url");
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry();
    exports.ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    exports.ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    exports.ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    var fromContainerMetadata = (init = {}) => {
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      return () => (0, retry_1.retry)(async () => {
        const requestOptions = await getCmdsUri();
        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
        if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
          throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
        }
        return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
      }, maxRetries);
    };
    exports.fromContainerMetadata = fromContainerMetadata;
    var requestFromEcsImds = async (timeout, options) => {
      if (process.env[exports.ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[exports.ENV_CMDS_AUTH_TOKEN]
        };
      }
      const buffer = await (0, httpRequest_1.httpRequest)({
        ...options,
        timeout
      });
      return buffer.toString();
    };
    var CMDS_IP = "169.254.170.2";
    var GREENGRASS_HOSTS = {
      localhost: true,
      "127.0.0.1": true
    };
    var GREENGRASS_PROTOCOLS = {
      "http:": true,
      "https:": true
    };
    var getCmdsUri = async () => {
      if (process.env[exports.ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[exports.ENV_CMDS_RELATIVE_URI]
        };
      }
      if (process.env[exports.ENV_CMDS_FULL_URI]) {
        const parsed = (0, url_1.parse)(process.env[exports.ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0
        };
      }
      throw new property_provider_1.CredentialsProviderError(`The container metadata credential provider cannot be used unless the ${exports.ENV_CMDS_RELATIVE_URI} or ${exports.ENV_CMDS_FULL_URI} environment variable is set`, false);
    };
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js
var require_fromEnv2 = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromEnv = void 0;
    var property_provider_1 = require_dist_cjs14();
    var fromEnv = (envVarSelector) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`);
      }
    };
    exports.fromEnv = fromEnv;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js
var require_fromSharedConfigFiles = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSharedConfigFiles = void 0;
    var property_provider_1 = require_dist_cjs14();
    var shared_ini_file_loader_1 = require_dist_cjs23();
    var fromSharedConfigFiles = (configSelector, { preferredFile = "config", ...init } = {}) => async () => {
      const profile = (0, shared_ini_file_loader_1.getProfileName)(init);
      const { configFile, credentialsFile } = await (0, shared_ini_file_loader_1.loadSharedConfigFiles)(init);
      const profileFromCredentials = credentialsFile[profile] || {};
      const profileFromConfig = configFile[profile] || {};
      const mergedProfile = preferredFile === "config" ? { ...profileFromCredentials, ...profileFromConfig } : { ...profileFromConfig, ...profileFromCredentials };
      try {
        const configValue = configSelector(mergedProfile);
        if (configValue === void 0) {
          throw new Error();
        }
        return configValue;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);
      }
    };
    exports.fromSharedConfigFiles = fromSharedConfigFiles;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js
var require_fromStatic2 = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs14();
    var isFunction = (func) => typeof func === "function";
    var fromStatic = (defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : (0, property_provider_1.fromStatic)(defaultValue);
    exports.fromStatic = fromStatic;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js
var require_configLoader = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadConfig = void 0;
    var property_provider_1 = require_dist_cjs14();
    var fromEnv_1 = require_fromEnv2();
    var fromSharedConfigFiles_1 = require_fromSharedConfigFiles();
    var fromStatic_1 = require_fromStatic2();
    var loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromEnv_1.fromEnv)(environmentVariableSelector), (0, fromSharedConfigFiles_1.fromSharedConfigFiles)(configFileSelector, configuration), (0, fromStatic_1.fromStatic)(defaultValue)));
    exports.loadConfig = loadConfig;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js
var require_dist_cjs24 = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_configLoader(), exports);
  }
});

// node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js
var require_dist_cjs25 = __commonJS({
  "node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseQueryString = void 0;
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, "");
      if (querystring) {
        for (const pair of querystring.split("&")) {
          let [key, value = null] = pair.split("=");
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    exports.parseQueryString = parseQueryString;
  }
});

// node_modules/@aws-sdk/url-parser/dist-cjs/index.js
var require_dist_cjs26 = __commonJS({
  "node_modules/@aws-sdk/url-parser/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseUrl = void 0;
    var querystring_parser_1 = require_dist_cjs25();
    var parseUrl = (url) => {
      const { hostname, pathname, port, protocol, search } = new URL(url);
      let query;
      if (search) {
        query = (0, querystring_parser_1.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    };
    exports.parseUrl = parseUrl;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js
var require_Endpoint = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Endpoint = void 0;
    var Endpoint;
    (function(Endpoint2) {
      Endpoint2["IPv4"] = "http://169.254.169.254";
      Endpoint2["IPv6"] = "http://[fd00:ec2::254]";
    })(Endpoint = exports.Endpoint || (exports.Endpoint = {}));
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js
var require_EndpointConfigOptions = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ENDPOINT_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_NAME = exports.ENV_ENDPOINT_NAME = void 0;
    exports.ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
    exports.CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
    exports.ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_NAME],
      default: void 0
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js
var require_EndpointMode = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointMode = void 0;
    var EndpointMode;
    (function(EndpointMode2) {
      EndpointMode2["IPv4"] = "IPv4";
      EndpointMode2["IPv6"] = "IPv6";
    })(EndpointMode = exports.EndpointMode || (exports.EndpointMode = {}));
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js
var require_EndpointModeConfigOptions = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_MODE_NAME = exports.ENV_ENDPOINT_MODE_NAME = void 0;
    var EndpointMode_1 = require_EndpointMode();
    exports.ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
    exports.CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_MODE_NAME],
      default: EndpointMode_1.EndpointMode.IPv4
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js
var require_getInstanceMetadataEndpoint = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getInstanceMetadataEndpoint = void 0;
    var node_config_provider_1 = require_dist_cjs24();
    var url_parser_1 = require_dist_cjs26();
    var Endpoint_1 = require_Endpoint();
    var EndpointConfigOptions_1 = require_EndpointConfigOptions();
    var EndpointMode_1 = require_EndpointMode();
    var EndpointModeConfigOptions_1 = require_EndpointModeConfigOptions();
    var getInstanceMetadataEndpoint = async () => (0, url_parser_1.parseUrl)(await getFromEndpointConfig() || await getFromEndpointModeConfig());
    exports.getInstanceMetadataEndpoint = getInstanceMetadataEndpoint;
    var getFromEndpointConfig = async () => (0, node_config_provider_1.loadConfig)(EndpointConfigOptions_1.ENDPOINT_CONFIG_OPTIONS)();
    var getFromEndpointModeConfig = async () => {
      const endpointMode = await (0, node_config_provider_1.loadConfig)(EndpointModeConfigOptions_1.ENDPOINT_MODE_CONFIG_OPTIONS)();
      switch (endpointMode) {
        case EndpointMode_1.EndpointMode.IPv4:
          return Endpoint_1.Endpoint.IPv4;
        case EndpointMode_1.EndpointMode.IPv6:
          return Endpoint_1.Endpoint.IPv6;
        default:
          throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode_1.EndpointMode)}`);
      }
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js
var require_getExtendedInstanceMetadataCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getExtendedInstanceMetadataCredentials = void 0;
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
    var getExtendedInstanceMetadataCredentials = (credentials, logger) => {
      var _a;
      const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: " + STATIC_STABILITY_DOC_URL);
      const originalExpiration = (_a = credentials.originalExpiration) !== null && _a !== void 0 ? _a : credentials.expiration;
      return {
        ...credentials,
        ...originalExpiration ? { originalExpiration } : {},
        expiration: newExpiration
      };
    };
    exports.getExtendedInstanceMetadataCredentials = getExtendedInstanceMetadataCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js
var require_staticStabilityProvider = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.staticStabilityProvider = void 0;
    var getExtendedInstanceMetadataCredentials_1 = require_getExtendedInstanceMetadataCredentials();
    var staticStabilityProvider = (provider, options = {}) => {
      const logger = (options === null || options === void 0 ? void 0 : options.logger) || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(credentials, logger);
          }
        } catch (e) {
          if (pastCredentials) {
            logger.warn("Credential renew failed: ", e);
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(pastCredentials, logger);
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    };
    exports.staticStabilityProvider = staticStabilityProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js
var require_fromInstanceMetadata = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromInstanceMetadata = void 0;
    var property_provider_1 = require_dist_cjs14();
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry();
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    var staticStabilityProvider_1 = require_staticStabilityProvider();
    var IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
    var IMDS_TOKEN_PATH = "/latest/api/token";
    var fromInstanceMetadata = (init = {}) => (0, staticStabilityProvider_1.staticStabilityProvider)(getInstanceImdsProvider(init), { logger: init.logger });
    exports.fromInstanceMetadata = fromInstanceMetadata;
    var getInstanceImdsProvider = (init) => {
      let disableFetchToken = false;
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      const getCredentials = async (maxRetries2, options) => {
        const profile = (await (0, retry_1.retry)(async () => {
          let profile2;
          try {
            profile2 = await getProfile(options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return profile2;
        }, maxRetries2)).trim();
        return (0, retry_1.retry)(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(profile, options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      };
      return async () => {
        const endpoint = await (0, getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint)();
        if (disableFetchToken) {
          return getCredentials(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (await getMetadataToken({ ...endpoint, timeout })).toString();
          } catch (error) {
            if ((error === null || error === void 0 ? void 0 : error.statusCode) === 400) {
              throw Object.assign(error, {
                message: "EC2 Metadata token request returned error"
              });
            } else if (error.message === "TimeoutError" || [403, 404, 405].includes(error.statusCode)) {
              disableFetchToken = true;
            }
            return getCredentials(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials(maxRetries, {
            ...endpoint,
            headers: {
              "x-aws-ec2-metadata-token": token
            },
            timeout
          });
        }
      };
    };
    var getMetadataToken = async (options) => (0, httpRequest_1.httpRequest)({
      ...options,
      path: IMDS_TOKEN_PATH,
      method: "PUT",
      headers: {
        "x-aws-ec2-metadata-token-ttl-seconds": "21600"
      }
    });
    var getProfile = async (options) => (await (0, httpRequest_1.httpRequest)({ ...options, path: IMDS_PATH })).toString();
    var getCredentialsFromProfile = async (profile, options) => {
      const credsResponse = JSON.parse((await (0, httpRequest_1.httpRequest)({
        ...options,
        path: IMDS_PATH + profile
      })).toString());
      if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
        throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
      }
      return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js
var require_types3 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js
var require_dist_cjs27 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getInstanceMetadataEndpoint = exports.httpRequest = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromContainerMetadata(), exports);
    tslib_1.__exportStar(require_fromInstanceMetadata(), exports);
    tslib_1.__exportStar(require_RemoteProviderInit(), exports);
    tslib_1.__exportStar(require_types3(), exports);
    var httpRequest_1 = require_httpRequest2();
    Object.defineProperty(exports, "httpRequest", { enumerable: true, get: function() {
      return httpRequest_1.httpRequest;
    } });
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    Object.defineProperty(exports, "getInstanceMetadataEndpoint", { enumerable: true, get: function() {
      return getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint;
    } });
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js
var require_resolveCredentialSource = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveCredentialSource = void 0;
    var credential_provider_env_1 = require_dist_cjs22();
    var credential_provider_imds_1 = require_dist_cjs27();
    var property_provider_1 = require_dist_cjs14();
    var resolveCredentialSource = (credentialSource, profileName) => {
      const sourceProvidersMap = {
        EcsContainer: credential_provider_imds_1.fromContainerMetadata,
        Ec2InstanceMetadata: credential_provider_imds_1.fromInstanceMetadata,
        Environment: credential_provider_env_1.fromEnv
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource]();
      } else {
        throw new property_provider_1.CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`);
      }
    };
    exports.resolveCredentialSource = resolveCredentialSource;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js
var require_resolveAssumeRoleCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveAssumeRoleCredentials = exports.isAssumeRoleProfile = void 0;
    var property_provider_1 = require_dist_cjs14();
    var shared_ini_file_loader_1 = require_dist_cjs23();
    var resolveCredentialSource_1 = require_resolveCredentialSource();
    var resolveProfileData_1 = require_resolveProfileData();
    var isAssumeRoleProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));
    exports.isAssumeRoleProfile = isAssumeRoleProfile;
    var isAssumeRoleWithSourceProfile = (arg) => typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
    var isAssumeRoleWithProviderProfile = (arg) => typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
    var resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (!options.roleAssumer) {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new property_provider_1.CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile ${(0, shared_ini_file_loader_1.getProfileName)(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "), false);
      }
      const sourceCredsProvider = source_profile ? (0, resolveProfileData_1.resolveProfileData)(source_profile, profiles, options, {
        ...visitedProfiles,
        [source_profile]: true
      }) : (0, resolveCredentialSource_1.resolveCredentialSource)(data.credential_source, profileName)();
      const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data.external_id
      };
      const { mfa_serial } = data;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = await sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params);
    };
    exports.resolveAssumeRoleCredentials = resolveAssumeRoleCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js
var require_isSsoProfile = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSsoProfile = void 0;
    var isSsoProfile = (arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string");
    exports.isSsoProfile = isSsoProfile;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js
var require_SSOServiceException = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOServiceException = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var SSOServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SSOServiceException.prototype);
      }
    };
    exports.SSOServiceException = SSOServiceException;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js
var require_models_03 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LogoutRequest = exports.ListAccountsResponse = exports.ListAccountsRequest = exports.ListAccountRolesResponse = exports.RoleInfo = exports.ListAccountRolesRequest = exports.UnauthorizedException = exports.TooManyRequestsException = exports.ResourceNotFoundException = exports.InvalidRequestException = exports.GetRoleCredentialsResponse = exports.RoleCredentials = exports.GetRoleCredentialsRequest = exports.AccountInfo = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var SSOServiceException_1 = require_SSOServiceException();
    var AccountInfo;
    (function(AccountInfo2) {
      AccountInfo2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AccountInfo = exports.AccountInfo || (exports.AccountInfo = {}));
    var GetRoleCredentialsRequest;
    (function(GetRoleCredentialsRequest2) {
      GetRoleCredentialsRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
      });
    })(GetRoleCredentialsRequest = exports.GetRoleCredentialsRequest || (exports.GetRoleCredentialsRequest = {}));
    var RoleCredentials;
    (function(RoleCredentials2) {
      RoleCredentials2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.secretAccessKey && { secretAccessKey: smithy_client_1.SENSITIVE_STRING },
        ...obj.sessionToken && { sessionToken: smithy_client_1.SENSITIVE_STRING }
      });
    })(RoleCredentials = exports.RoleCredentials || (exports.RoleCredentials = {}));
    var GetRoleCredentialsResponse;
    (function(GetRoleCredentialsResponse2) {
      GetRoleCredentialsResponse2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.roleCredentials && { roleCredentials: RoleCredentials.filterSensitiveLog(obj.roleCredentials) }
      });
    })(GetRoleCredentialsResponse = exports.GetRoleCredentialsResponse || (exports.GetRoleCredentialsResponse = {}));
    var InvalidRequestException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
      }
    };
    exports.InvalidRequestException = InvalidRequestException;
    var ResourceNotFoundException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
      }
    };
    exports.ResourceNotFoundException = ResourceNotFoundException;
    var TooManyRequestsException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "TooManyRequestsException",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
      }
    };
    exports.TooManyRequestsException = TooManyRequestsException;
    var UnauthorizedException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
      }
    };
    exports.UnauthorizedException = UnauthorizedException;
    var ListAccountRolesRequest;
    (function(ListAccountRolesRequest2) {
      ListAccountRolesRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
      });
    })(ListAccountRolesRequest = exports.ListAccountRolesRequest || (exports.ListAccountRolesRequest = {}));
    var RoleInfo;
    (function(RoleInfo2) {
      RoleInfo2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(RoleInfo = exports.RoleInfo || (exports.RoleInfo = {}));
    var ListAccountRolesResponse;
    (function(ListAccountRolesResponse2) {
      ListAccountRolesResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListAccountRolesResponse = exports.ListAccountRolesResponse || (exports.ListAccountRolesResponse = {}));
    var ListAccountsRequest;
    (function(ListAccountsRequest2) {
      ListAccountsRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
      });
    })(ListAccountsRequest = exports.ListAccountsRequest || (exports.ListAccountsRequest = {}));
    var ListAccountsResponse;
    (function(ListAccountsResponse2) {
      ListAccountsResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListAccountsResponse = exports.ListAccountsResponse || (exports.ListAccountsResponse = {}));
    var LogoutRequest;
    (function(LogoutRequest2) {
      LogoutRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
      });
    })(LogoutRequest = exports.LogoutRequest || (exports.LogoutRequest = {}));
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson1 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializeAws_restJson1LogoutCommand = exports.deserializeAws_restJson1ListAccountsCommand = exports.deserializeAws_restJson1ListAccountRolesCommand = exports.deserializeAws_restJson1GetRoleCredentialsCommand = exports.serializeAws_restJson1LogoutCommand = exports.serializeAws_restJson1ListAccountsCommand = exports.serializeAws_restJson1ListAccountRolesCommand = exports.serializeAws_restJson1GetRoleCredentialsCommand = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var SSOServiceException_1 = require_SSOServiceException();
    var serializeAws_restJson1GetRoleCredentialsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        ...isSerializableHeaderValue(input.accessToken) && { "x-amz-sso_bearer_token": input.accessToken }
      };
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/federation/credentials`;
      const query = {
        ...input.roleName !== void 0 && { role_name: input.roleName },
        ...input.accountId !== void 0 && { account_id: input.accountId }
      };
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1GetRoleCredentialsCommand = serializeAws_restJson1GetRoleCredentialsCommand;
    var serializeAws_restJson1ListAccountRolesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        ...isSerializableHeaderValue(input.accessToken) && { "x-amz-sso_bearer_token": input.accessToken }
      };
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/assignment/roles`;
      const query = {
        ...input.nextToken !== void 0 && { next_token: input.nextToken },
        ...input.maxResults !== void 0 && { max_result: input.maxResults.toString() },
        ...input.accountId !== void 0 && { account_id: input.accountId }
      };
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1ListAccountRolesCommand = serializeAws_restJson1ListAccountRolesCommand;
    var serializeAws_restJson1ListAccountsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        ...isSerializableHeaderValue(input.accessToken) && { "x-amz-sso_bearer_token": input.accessToken }
      };
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/assignment/accounts`;
      const query = {
        ...input.nextToken !== void 0 && { next_token: input.nextToken },
        ...input.maxResults !== void 0 && { max_result: input.maxResults.toString() }
      };
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1ListAccountsCommand = serializeAws_restJson1ListAccountsCommand;
    var serializeAws_restJson1LogoutCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        ...isSerializableHeaderValue(input.accessToken) && { "x-amz-sso_bearer_token": input.accessToken }
      };
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/logout`;
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1LogoutCommand = serializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetRoleCredentialsCommandError(output, context);
      }
      const contents = {
        $metadata: deserializeMetadata(output),
        roleCredentials: void 0
      };
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.roleCredentials !== void 0 && data.roleCredentials !== null) {
        contents.roleCredentials = deserializeAws_restJson1RoleCredentials(data.roleCredentials, context);
      }
      return Promise.resolve(contents);
    };
    exports.deserializeAws_restJson1GetRoleCredentialsCommand = deserializeAws_restJson1GetRoleCredentialsCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSOServiceException_1.SSOServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_restJson1ListAccountRolesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountRolesCommandError(output, context);
      }
      const contents = {
        $metadata: deserializeMetadata(output),
        nextToken: void 0,
        roleList: void 0
      };
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.nextToken !== void 0 && data.nextToken !== null) {
        contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);
      }
      if (data.roleList !== void 0 && data.roleList !== null) {
        contents.roleList = deserializeAws_restJson1RoleListType(data.roleList, context);
      }
      return Promise.resolve(contents);
    };
    exports.deserializeAws_restJson1ListAccountRolesCommand = deserializeAws_restJson1ListAccountRolesCommand;
    var deserializeAws_restJson1ListAccountRolesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSOServiceException_1.SSOServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_restJson1ListAccountsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountsCommandError(output, context);
      }
      const contents = {
        $metadata: deserializeMetadata(output),
        accountList: void 0,
        nextToken: void 0
      };
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.accountList !== void 0 && data.accountList !== null) {
        contents.accountList = deserializeAws_restJson1AccountListType(data.accountList, context);
      }
      if (data.nextToken !== void 0 && data.nextToken !== null) {
        contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);
      }
      return Promise.resolve(contents);
    };
    exports.deserializeAws_restJson1ListAccountsCommand = deserializeAws_restJson1ListAccountsCommand;
    var deserializeAws_restJson1ListAccountsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSOServiceException_1.SSOServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_restJson1LogoutCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1LogoutCommandError(output, context);
      }
      const contents = {
        $metadata: deserializeMetadata(output)
      };
      await collectBody(output.body, context);
      return Promise.resolve(contents);
    };
    exports.deserializeAws_restJson1LogoutCommand = deserializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1LogoutCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSOServiceException_1.SSOServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_restJson1InvalidRequestExceptionResponse = async (parsedOutput, context) => {
      const contents = {};
      const data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
      const contents = {};
      const data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {
      const contents = {};
      const data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1UnauthorizedExceptionResponse = async (parsedOutput, context) => {
      const contents = {};
      const data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1AccountInfo = (output, context) => {
      return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        accountName: (0, smithy_client_1.expectString)(output.accountName),
        emailAddress: (0, smithy_client_1.expectString)(output.emailAddress)
      };
    };
    var deserializeAws_restJson1AccountListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1AccountInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1RoleCredentials = (output, context) => {
      return {
        accessKeyId: (0, smithy_client_1.expectString)(output.accessKeyId),
        expiration: (0, smithy_client_1.expectLong)(output.expiration),
        secretAccessKey: (0, smithy_client_1.expectString)(output.secretAccessKey),
        sessionToken: (0, smithy_client_1.expectString)(output.sessionToken)
      };
    };
    var deserializeAws_restJson1RoleInfo = (output, context) => {
      return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        roleName: (0, smithy_client_1.expectString)(output.roleName)
      };
    };
    var deserializeAws_restJson1RoleListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1RoleInfo(entry, context);
      });
      return retVal;
    };
    var deserializeMetadata = (output) => {
      var _a;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var isSerializableHeaderValue = (value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js
var require_GetRoleCredentialsCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetRoleCredentialsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetRoleCredentialsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "GetRoleCredentialsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetRoleCredentialsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetRoleCredentialsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetRoleCredentialsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetRoleCredentialsCommand)(output, context);
      }
    };
    exports.GetRoleCredentialsCommand = GetRoleCredentialsCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js
var require_ListAccountRolesCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAccountRolesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountRolesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountRolesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountRolesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountRolesResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAccountRolesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAccountRolesCommand)(output, context);
      }
    };
    exports.ListAccountRolesCommand = ListAccountRolesCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js
var require_ListAccountsCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAccountsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAccountsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAccountsCommand)(output, context);
      }
    };
    exports.ListAccountsCommand = ListAccountsCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js
var require_LogoutCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LogoutCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var LogoutCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "LogoutCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.LogoutRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1LogoutCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1LogoutCommand)(output, context);
      }
    };
    exports.LogoutCommand = LogoutCommand;
  }
});

// node_modules/@aws-sdk/client-sso/package.json
var require_package3 = __commonJS({
  "node_modules/@aws-sdk/client-sso/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sso",
      description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
      version: "3.121.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/config-resolver": "3.110.0",
        "@aws-sdk/fetch-http-handler": "3.110.0",
        "@aws-sdk/hash-node": "3.110.0",
        "@aws-sdk/invalid-dependency": "3.110.0",
        "@aws-sdk/middleware-content-length": "3.110.0",
        "@aws-sdk/middleware-host-header": "3.110.0",
        "@aws-sdk/middleware-logger": "3.110.0",
        "@aws-sdk/middleware-recursion-detection": "3.110.0",
        "@aws-sdk/middleware-retry": "3.118.1",
        "@aws-sdk/middleware-serde": "3.110.0",
        "@aws-sdk/middleware-stack": "3.110.0",
        "@aws-sdk/middleware-user-agent": "3.110.0",
        "@aws-sdk/node-config-provider": "3.110.0",
        "@aws-sdk/node-http-handler": "3.118.1",
        "@aws-sdk/protocol-http": "3.110.0",
        "@aws-sdk/smithy-client": "3.110.0",
        "@aws-sdk/types": "3.110.0",
        "@aws-sdk/url-parser": "3.110.0",
        "@aws-sdk/util-base64-browser": "3.109.0",
        "@aws-sdk/util-base64-node": "3.55.0",
        "@aws-sdk/util-body-length-browser": "3.55.0",
        "@aws-sdk/util-body-length-node": "3.55.0",
        "@aws-sdk/util-defaults-mode-browser": "3.110.0",
        "@aws-sdk/util-defaults-mode-node": "3.110.0",
        "@aws-sdk/util-user-agent-browser": "3.110.0",
        "@aws-sdk/util-user-agent-node": "3.118.0",
        "@aws-sdk/util-utf8-browser": "3.109.0",
        "@aws-sdk/util-utf8-node": "3.109.0",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.58.0",
        "@tsconfig/recommended": "1.0.1",
        "@types/node": "^12.7.5",
        concurrently: "7.0.0",
        "downlevel-dts": "0.7.0",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      engines: {
        node: ">=12.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso"
      }
    };
  }
});

// node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js
var require_dist_cjs28 = __commonJS({
  "node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromString = exports.fromArrayBuffer = void 0;
    var is_array_buffer_1 = require_dist_cjs17();
    var buffer_1 = require("buffer");
    var fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, is_array_buffer_1.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return buffer_1.Buffer.from(input, offset, length);
    };
    exports.fromArrayBuffer = fromArrayBuffer;
    var fromString = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? buffer_1.Buffer.from(input, encoding) : buffer_1.Buffer.from(input);
    };
    exports.fromString = fromString;
  }
});

// node_modules/@aws-sdk/hash-node/dist-cjs/index.js
var require_dist_cjs29 = __commonJS({
  "node_modules/@aws-sdk/hash-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Hash = void 0;
    var util_buffer_from_1 = require_dist_cjs28();
    var buffer_1 = require("buffer");
    var crypto_1 = require("crypto");
    var Hash = class {
      constructor(algorithmIdentifier, secret) {
        this.hash = secret ? (0, crypto_1.createHmac)(algorithmIdentifier, castSourceData(secret)) : (0, crypto_1.createHash)(algorithmIdentifier);
      }
      update(toHash, encoding) {
        this.hash.update(castSourceData(toHash, encoding));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
    };
    exports.Hash = Hash;
    function castSourceData(toCast, encoding) {
      if (buffer_1.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === "string") {
        return (0, util_buffer_from_1.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, util_buffer_from_1.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(toCast);
    }
  }
});

// node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js
var require_dist_cjs30 = __commonJS({
  "node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buildQueryString = void 0;
    var util_uri_escape_1 = require_dist_cjs16();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, util_uri_escape_1.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(`${key}=${(0, util_uri_escape_1.escapeUri)(value[i])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === "string") {
            qsEntry += `=${(0, util_uri_escape_1.escapeUri)(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join("&");
    }
    exports.buildQueryString = buildQueryString;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js
var require_constants6 = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODEJS_TIMEOUT_ERROR_CODES = void 0;
    exports.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js
var require_get_transformed_headers = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTransformedHeaders = void 0;
    var getTransformedHeaders = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
      }
      return transformedHeaders;
    };
    exports.getTransformedHeaders = getTransformedHeaders;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js
var require_set_connection_timeout = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setConnectionTimeout = void 0;
    var setConnectionTimeout = (request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return;
      }
      request.on("socket", (socket) => {
        if (socket.connecting) {
          const timeoutId = setTimeout(() => {
            request.destroy();
            reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
              name: "TimeoutError"
            }));
          }, timeoutInMs);
          socket.on("connect", () => {
            clearTimeout(timeoutId);
          });
        }
      });
    };
    exports.setConnectionTimeout = setConnectionTimeout;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js
var require_set_socket_timeout = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setSocketTimeout = void 0;
    var setSocketTimeout = (request, reject, timeoutInMs = 0) => {
      request.setTimeout(timeoutInMs, () => {
        request.destroy();
        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
      });
    };
    exports.setSocketTimeout = setSocketTimeout;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js
var require_write_request_body = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.writeRequestBody = void 0;
    var stream_1 = require("stream");
    function writeRequestBody(httpRequest, request) {
      const expect = request.headers["Expect"] || request.headers["expect"];
      if (expect === "100-continue") {
        httpRequest.on("continue", () => {
          writeBody(httpRequest, request.body);
        });
      } else {
        writeBody(httpRequest, request.body);
      }
    }
    exports.writeRequestBody = writeRequestBody;
    function writeBody(httpRequest, body) {
      if (body instanceof stream_1.Readable) {
        body.pipe(httpRequest);
      } else if (body) {
        httpRequest.end(Buffer.from(body));
      } else {
        httpRequest.end();
      }
    }
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js
var require_node_http_handler = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHttpHandler = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var querystring_builder_1 = require_dist_cjs30();
    var http_1 = require("http");
    var https_1 = require("https");
    var constants_1 = require_constants6();
    var get_transformed_headers_1 = require_get_transformed_headers();
    var set_connection_timeout_1 = require_set_connection_timeout();
    var set_socket_timeout_1 = require_set_socket_timeout();
    var write_request_body_1 = require_write_request_body();
    var NodeHttpHandler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "http/1.1" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((_options) => {
              resolve(this.resolveDefaultConfig(_options));
            }).catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      resolveDefaultConfig(options) {
        const { connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          socketTimeout,
          httpAgent: httpAgent || new http_1.Agent({ keepAlive, maxSockets }),
          httpsAgent: httpsAgent || new https_1.Agent({ keepAlive, maxSockets })
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.httpAgent) === null || _b === void 0 ? void 0 : _b.destroy();
        (_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.httpsAgent) === null || _d === void 0 ? void 0 : _d.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((resolve, reject) => {
          if (!this.config) {
            throw new Error("Node HTTP request handler config is not resolved");
          }
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === "https:";
          const queryString = (0, querystring_builder_1.buildQueryString)(request.query || {});
          const nodeHttpsOptions = {
            headers: request.headers,
            host: request.hostname,
            method: request.method,
            path: queryString ? `${request.path}?${queryString}` : request.path,
            port: request.port,
            agent: isSSL ? this.config.httpsAgent : this.config.httpAgent
          };
          const requestFunc = isSSL ? https_1.request : http_1.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: res.statusCode || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(res.headers),
              body: res
            });
            resolve({ response: httpResponse });
          });
          req.on("error", (err) => {
            if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
              reject(Object.assign(err, { name: "TimeoutError" }));
            } else {
              reject(err);
            }
          });
          (0, set_connection_timeout_1.setConnectionTimeout)(req, reject, this.config.connectionTimeout);
          (0, set_socket_timeout_1.setSocketTimeout)(req, reject, this.config.socketTimeout);
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.abort();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
    };
    exports.NodeHttpHandler = NodeHttpHandler;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js
var require_node_http2_handler = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHttp2Handler = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var querystring_builder_1 = require_dist_cjs30();
    var http2_1 = require("http2");
    var get_transformed_headers_1 = require_get_transformed_headers();
    var write_request_body_1 = require_write_request_body();
    var NodeHttp2Handler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "h2" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((opts) => {
              resolve(opts || {});
            }).catch(reject);
          } else {
            resolve(options || {});
          }
        });
        this.sessionCache = /* @__PURE__ */ new Map();
      }
      destroy() {
        for (const sessions of this.sessionCache.values()) {
          sessions.forEach((session) => this.destroySession(session));
        }
        this.sessionCache.clear();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((resolve, rejectOriginal) => {
          let fulfilled = false;
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            fulfilled = true;
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            rejectOriginal(abortError);
            return;
          }
          const { hostname, method, port, protocol, path, query } = request;
          const authority = `${protocol}//${hostname}${port ? `:${port}` : ""}`;
          const session = this.getSession(authority, disableConcurrentStreams || false);
          const reject = (err) => {
            if (disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            rejectOriginal(err);
          };
          const queryString = (0, querystring_builder_1.buildQueryString)(query || {});
          const req = session.request({
            ...request.headers,
            [http2_1.constants.HTTP2_HEADER_PATH]: queryString ? `${path}?${queryString}` : path,
            [http2_1.constants.HTTP2_HEADER_METHOD]: method
          });
          session.ref();
          req.on("response", (headers) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: headers[":status"] || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(headers),
              body: req
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (disableConcurrentStreams) {
              session.close();
              this.deleteSessionFromCache(authority, session);
            }
          });
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
              timeoutError.name = "TimeoutError";
              reject(timeoutError);
            });
          }
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.close();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          req.on("frameError", (type, code, id) => {
            reject(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
          });
          req.on("error", reject);
          req.on("aborted", () => {
            reject(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));
          });
          req.on("close", () => {
            session.unref();
            if (disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              reject(new Error("Unexpected error: http2 request did not get a response"));
            }
          });
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
      getSession(authority, disableConcurrentStreams) {
        var _a;
        const sessionCache = this.sessionCache;
        const existingSessions = sessionCache.get(authority) || [];
        if (existingSessions.length > 0 && !disableConcurrentStreams)
          return existingSessions[0];
        const newSession = (0, http2_1.connect)(authority);
        newSession.unref();
        const destroySessionCb = () => {
          this.destroySession(newSession);
          this.deleteSessionFromCache(authority, newSession);
        };
        newSession.on("goaway", destroySessionCb);
        newSession.on("error", destroySessionCb);
        newSession.on("frameError", destroySessionCb);
        newSession.on("close", () => this.deleteSessionFromCache(authority, newSession));
        if ((_a = this.config) === null || _a === void 0 ? void 0 : _a.sessionTimeout) {
          newSession.setTimeout(this.config.sessionTimeout, destroySessionCb);
        }
        existingSessions.push(newSession);
        sessionCache.set(authority, existingSessions);
        return newSession;
      }
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
      deleteSessionFromCache(authority, session) {
        const existingSessions = this.sessionCache.get(authority) || [];
        if (!existingSessions.includes(session)) {
          return;
        }
        this.sessionCache.set(authority, existingSessions.filter((s) => s !== session));
      }
    };
    exports.NodeHttp2Handler = NodeHttp2Handler;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js
var require_collector = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Collector = void 0;
    var stream_1 = require("stream");
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    exports.Collector = Collector;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js
var require_stream_collector = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.streamCollector = void 0;
    var collector_1 = require_collector();
    var streamCollector = (stream) => new Promise((resolve, reject) => {
      const collector = new collector_1.Collector();
      stream.pipe(collector);
      stream.on("error", (err) => {
        collector.end();
        reject(err);
      });
      collector.on("error", reject);
      collector.on("finish", function() {
        const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
        resolve(bytes);
      });
    });
    exports.streamCollector = streamCollector;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js
var require_dist_cjs31 = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_node_http_handler(), exports);
    tslib_1.__exportStar(require_node_http2_handler(), exports);
    tslib_1.__exportStar(require_stream_collector(), exports);
  }
});

// node_modules/@aws-sdk/util-base64-node/dist-cjs/index.js
var require_dist_cjs32 = __commonJS({
  "node_modules/@aws-sdk/util-base64-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toBase64 = exports.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs28();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    function fromBase64(input) {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    }
    exports.fromBase64 = fromBase64;
    function toBase64(input) {
      return (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("base64");
    }
    exports.toBase64 = toBase64;
  }
});

// node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js
var require_calculateBodyLength = __commonJS({
  "node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.calculateBodyLength = void 0;
    var fs_1 = require("fs");
    var calculateBodyLength = (body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === "string") {
        return Buffer.from(body).length;
      } else if (typeof body.byteLength === "number") {
        return body.byteLength;
      } else if (typeof body.size === "number") {
        return body.size;
      } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return (0, fs_1.lstatSync)(body.path).size;
      } else if (typeof body.fd === "number") {
        return (0, fs_1.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    };
    exports.calculateBodyLength = calculateBodyLength;
  }
});

// node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js
var require_dist_cjs33 = __commonJS({
  "node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_calculateBodyLength(), exports);
  }
});

// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js
var require_is_crt_available = __commonJS({
  "node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isCrtAvailable = void 0;
    var isCrtAvailable = () => {
      try {
        if (typeof require === "function" && typeof module2 !== "undefined" && module2.require && require("aws-crt")) {
          return ["md/crt-avail"];
        }
        return null;
      } catch (e) {
        return null;
      }
    };
    exports.isCrtAvailable = isCrtAvailable;
  }
});

// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs34 = __commonJS({
  "node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultUserAgent = exports.UA_APP_ID_INI_NAME = exports.UA_APP_ID_ENV_NAME = void 0;
    var node_config_provider_1 = require_dist_cjs24();
    var os_1 = require("os");
    var process_1 = require("process");
    var is_crt_available_1 = require_is_crt_available();
    exports.UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
    exports.UA_APP_ID_INI_NAME = "sdk-ua-app-id";
    var defaultUserAgent = ({ serviceId, clientVersion }) => {
      const sections = [
        ["aws-sdk-js", clientVersion],
        [`os/${(0, os_1.platform)()}`, (0, os_1.release)()],
        ["lang/js"],
        ["md/nodejs", `${process_1.versions.node}`]
      ];
      const crtAvailable = (0, is_crt_available_1.isCrtAvailable)();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      if (process_1.env.AWS_EXECUTION_ENV) {
        sections.push([`exec-env/${process_1.env.AWS_EXECUTION_ENV}`]);
      }
      const appIdPromise = (0, node_config_provider_1.loadConfig)({
        environmentVariableSelector: (env) => env[exports.UA_APP_ID_ENV_NAME],
        configFileSelector: (profile) => profile[exports.UA_APP_ID_INI_NAME],
        default: void 0
      })();
      let resolvedUserAgent = void 0;
      return async () => {
        if (!resolvedUserAgent) {
          const appId = await appIdPromise;
          resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        }
        return resolvedUserAgent;
      };
    };
    exports.defaultUserAgent = defaultUserAgent;
  }
});

// node_modules/@aws-sdk/util-utf8-node/dist-cjs/index.js
var require_dist_cjs35 = __commonJS({
  "node_modules/@aws-sdk/util-utf8-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8 = exports.fromUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs28();
    var fromUtf8 = (input) => {
      const buf = (0, util_buffer_from_1.fromString)(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
    exports.fromUtf8 = fromUtf8;
    var toUtf8 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    exports.toUtf8 = toUtf8;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoints.js
var require_endpoints = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/endpoints.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultRegionInfoProvider = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var regionHash = {
      "ap-northeast-1": {
        variants: [
          {
            hostname: "portal.sso.ap-northeast-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ap-northeast-1"
      },
      "ap-northeast-2": {
        variants: [
          {
            hostname: "portal.sso.ap-northeast-2.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ap-northeast-2"
      },
      "ap-northeast-3": {
        variants: [
          {
            hostname: "portal.sso.ap-northeast-3.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ap-northeast-3"
      },
      "ap-south-1": {
        variants: [
          {
            hostname: "portal.sso.ap-south-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ap-south-1"
      },
      "ap-southeast-1": {
        variants: [
          {
            hostname: "portal.sso.ap-southeast-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ap-southeast-1"
      },
      "ap-southeast-2": {
        variants: [
          {
            hostname: "portal.sso.ap-southeast-2.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ap-southeast-2"
      },
      "ca-central-1": {
        variants: [
          {
            hostname: "portal.sso.ca-central-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ca-central-1"
      },
      "eu-central-1": {
        variants: [
          {
            hostname: "portal.sso.eu-central-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "eu-central-1"
      },
      "eu-north-1": {
        variants: [
          {
            hostname: "portal.sso.eu-north-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "eu-north-1"
      },
      "eu-south-1": {
        variants: [
          {
            hostname: "portal.sso.eu-south-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "eu-south-1"
      },
      "eu-west-1": {
        variants: [
          {
            hostname: "portal.sso.eu-west-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "eu-west-1"
      },
      "eu-west-2": {
        variants: [
          {
            hostname: "portal.sso.eu-west-2.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "eu-west-2"
      },
      "eu-west-3": {
        variants: [
          {
            hostname: "portal.sso.eu-west-3.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "eu-west-3"
      },
      "sa-east-1": {
        variants: [
          {
            hostname: "portal.sso.sa-east-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "sa-east-1"
      },
      "us-east-1": {
        variants: [
          {
            hostname: "portal.sso.us-east-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-east-1"
      },
      "us-east-2": {
        variants: [
          {
            hostname: "portal.sso.us-east-2.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-east-2"
      },
      "us-gov-east-1": {
        variants: [
          {
            hostname: "portal.sso.us-gov-east-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-gov-east-1"
      },
      "us-gov-west-1": {
        variants: [
          {
            hostname: "portal.sso.us-gov-west-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-gov-west-1"
      },
      "us-west-2": {
        variants: [
          {
            hostname: "portal.sso.us-west-2.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-west-2"
      }
    };
    var partitionHash = {
      aws: {
        regions: [
          "af-south-1",
          "ap-east-1",
          "ap-northeast-1",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "ap-southeast-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ca-central-1",
          "eu-central-1",
          "eu-north-1",
          "eu-south-1",
          "eu-west-1",
          "eu-west-2",
          "eu-west-3",
          "me-south-1",
          "sa-east-1",
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2"
        ],
        regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "portal.sso.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "portal.sso-fips.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "portal.sso-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "portal.sso.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-cn": {
        regions: ["cn-north-1", "cn-northwest-1"],
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "portal.sso.{region}.amazonaws.com.cn",
            tags: []
          },
          {
            hostname: "portal.sso-fips.{region}.amazonaws.com.cn",
            tags: ["fips"]
          },
          {
            hostname: "portal.sso-fips.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "portal.sso.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-iso": {
        regions: ["us-iso-east-1", "us-iso-west-1"],
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "portal.sso.{region}.c2s.ic.gov",
            tags: []
          },
          {
            hostname: "portal.sso-fips.{region}.c2s.ic.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-iso-b": {
        regions: ["us-isob-east-1"],
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "portal.sso.{region}.sc2s.sgov.gov",
            tags: []
          },
          {
            hostname: "portal.sso-fips.{region}.sc2s.sgov.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-us-gov": {
        regions: ["us-gov-east-1", "us-gov-west-1"],
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "portal.sso.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "portal.sso-fips.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "portal.sso-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "portal.sso.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      }
    };
    var defaultRegionInfoProvider = async (region, options) => (0, config_resolver_1.getRegionInfo)(region, {
      ...options,
      signingService: "awsssoportal",
      regionHash,
      partitionHash
    });
    exports.defaultRegionInfoProvider = defaultRegionInfoProvider;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var url_parser_1 = require_dist_cjs26();
    var endpoints_1 = require_endpoints();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e;
      return {
        apiVersion: "2019-06-10",
        disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
        logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
        regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : endpoints_1.defaultRegionInfoProvider,
        serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : "SSO",
        urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : url_parser_1.parseUrl
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js
var require_constants7 = __commonJS({
  "node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IMDS_REGION_PATH = exports.DEFAULTS_MODE_OPTIONS = exports.ENV_IMDS_DISABLED = exports.AWS_DEFAULT_REGION_ENV = exports.AWS_REGION_ENV = exports.AWS_EXECUTION_ENV = void 0;
    exports.AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
    exports.AWS_REGION_ENV = "AWS_REGION";
    exports.AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
    exports.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    exports.DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
    exports.IMDS_REGION_PATH = "/latest/meta-data/placement/region";
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js
var require_defaultsModeConfig = __commonJS({
  "node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = void 0;
    var AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
    var AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        return env[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: "legacy"
    };
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js
var require_resolveDefaultsModeConfig = __commonJS({
  "node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveDefaultsModeConfig = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var credential_provider_imds_1 = require_dist_cjs27();
    var node_config_provider_1 = require_dist_cjs24();
    var property_provider_1 = require_dist_cjs14();
    var constants_1 = require_constants7();
    var defaultsModeConfig_1 = require_defaultsModeConfig();
    var resolveDefaultsModeConfig = ({ region = (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS), defaultsMode = (0, node_config_provider_1.loadConfig)(defaultsModeConfig_1.NODE_DEFAULTS_MODE_CONFIG_OPTIONS) } = {}) => (0, property_provider_1.memoize)(async () => {
      const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
      switch (mode === null || mode === void 0 ? void 0 : mode.toLowerCase()) {
        case "auto":
          return resolveNodeDefaultsModeAuto(region);
        case "in-region":
        case "cross-region":
        case "mobile":
        case "standard":
        case "legacy":
          return Promise.resolve(mode === null || mode === void 0 ? void 0 : mode.toLocaleLowerCase());
        case void 0:
          return Promise.resolve("legacy");
        default:
          throw new Error(`Invalid parameter for "defaultsMode", expect ${constants_1.DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
      }
    });
    exports.resolveDefaultsModeConfig = resolveDefaultsModeConfig;
    var resolveNodeDefaultsModeAuto = async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return "standard";
        }
        if (resolvedRegion === inferredRegion) {
          return "in-region";
        } else {
          return "cross-region";
        }
      }
      return "standard";
    };
    var inferPhysicalRegion = async () => {
      var _a;
      if (process.env[constants_1.AWS_EXECUTION_ENV] && (process.env[constants_1.AWS_REGION_ENV] || process.env[constants_1.AWS_DEFAULT_REGION_ENV])) {
        return (_a = process.env[constants_1.AWS_REGION_ENV]) !== null && _a !== void 0 ? _a : process.env[constants_1.AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[constants_1.ENV_IMDS_DISABLED]) {
        try {
          const endpoint = await (0, credential_provider_imds_1.getInstanceMetadataEndpoint)();
          return (await (0, credential_provider_imds_1.httpRequest)({ ...endpoint, path: constants_1.IMDS_REGION_PATH })).toString();
        } catch (e) {
        }
      }
    };
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js
var require_dist_cjs36 = __commonJS({
  "node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_resolveDefaultsModeConfig(), exports);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js
var require_runtimeConfig = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib();
    var package_json_1 = tslib_1.__importDefault(require_package3());
    var config_resolver_1 = require_dist_cjs7();
    var hash_node_1 = require_dist_cjs29();
    var middleware_retry_1 = require_dist_cjs13();
    var node_config_provider_1 = require_dist_cjs24();
    var node_http_handler_1 = require_dist_cjs31();
    var util_base64_node_1 = require_dist_cjs32();
    var util_body_length_node_1 = require_dist_cjs33();
    var util_user_agent_node_1 = require_dist_cjs34();
    var util_utf8_node_1 = require_dist_cjs35();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared();
    var smithy_client_1 = require_dist_cjs3();
    var util_defaults_mode_node_1 = require_dist_cjs36();
    var smithy_client_2 = require_dist_cjs3();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : util_base64_node_1.fromBase64,
        base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : util_base64_node_1.toBase64,
        bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: (_d = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _d !== void 0 ? _d : (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: (_e = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _e !== void 0 ? _e : (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (_f = config === null || config === void 0 ? void 0 : config.region) !== null && _f !== void 0 ? _f : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (_g = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _g !== void 0 ? _g : new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (_h = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _h !== void 0 ? _h : (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || middleware_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: (_j = config === null || config === void 0 ? void 0 : config.sha256) !== null && _j !== void 0 ? _j : hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (_k = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _k !== void 0 ? _k : node_http_handler_1.streamCollector,
        useDualstackEndpoint: (_l = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _l !== void 0 ? _l : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (_m = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _m !== void 0 ? _m : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder: (_o = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _o !== void 0 ? _o : util_utf8_node_1.fromUtf8,
        utf8Encoder: (_p = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _p !== void 0 ? _p : util_utf8_node_1.toUtf8
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js
var require_SSOClient = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOClient = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var middleware_content_length_1 = require_dist_cjs8();
    var middleware_host_header_1 = require_dist_cjs9();
    var middleware_logger_1 = require_dist_cjs10();
    var middleware_recursion_detection_1 = require_dist_cjs11();
    var middleware_retry_1 = require_dist_cjs13();
    var middleware_user_agent_1 = require_dist_cjs20();
    var smithy_client_1 = require_dist_cjs3();
    var runtimeConfig_1 = require_runtimeConfig();
    var SSOClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, config_resolver_1.resolveRegionConfig)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveEndpointsConfig)(_config_1);
        const _config_3 = (0, middleware_retry_1.resolveRetryConfig)(_config_2);
        const _config_4 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_3);
        const _config_5 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_4);
        super(_config_5);
        this.config = _config_5;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.SSOClient = SSOClient;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js
var require_SSO = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSO = void 0;
    var GetRoleCredentialsCommand_1 = require_GetRoleCredentialsCommand();
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var LogoutCommand_1 = require_LogoutCommand();
    var SSOClient_1 = require_SSOClient();
    var SSO = class extends SSOClient_1.SSOClient {
      getRoleCredentials(args, optionsOrCb, cb) {
        const command = new GetRoleCredentialsCommand_1.GetRoleCredentialsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccountRoles(args, optionsOrCb, cb) {
        const command = new ListAccountRolesCommand_1.ListAccountRolesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccounts(args, optionsOrCb, cb) {
        const command = new ListAccountsCommand_1.ListAccountsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      logout(args, optionsOrCb, cb) {
        const command = new LogoutCommand_1.LogoutCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.SSO = SSO;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js
var require_commands = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_GetRoleCredentialsCommand(), exports);
    tslib_1.__exportStar(require_ListAccountRolesCommand(), exports);
    tslib_1.__exportStar(require_ListAccountsCommand(), exports);
    tslib_1.__exportStar(require_LogoutCommand(), exports);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js
var require_models = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_models_03(), exports);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js
var require_Interfaces = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js
var require_ListAccountRolesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAccountRoles = void 0;
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var SSO_1 = require_SSO();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountRolesCommand_1.ListAccountRolesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAccountRoles(input, ...args);
    };
    async function* paginateListAccountRoles(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSO_1.SSO) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAccountRoles = paginateListAccountRoles;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js
var require_ListAccountsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAccounts = void 0;
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var SSO_1 = require_SSO();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountsCommand_1.ListAccountsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAccounts(input, ...args);
    };
    async function* paginateListAccounts(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSO_1.SSO) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAccounts = paginateListAccounts;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js
var require_pagination = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_Interfaces(), exports);
    tslib_1.__exportStar(require_ListAccountRolesPaginator(), exports);
    tslib_1.__exportStar(require_ListAccountsPaginator(), exports);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/index.js
var require_dist_cjs37 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOServiceException = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_SSO(), exports);
    tslib_1.__exportStar(require_SSOClient(), exports);
    tslib_1.__exportStar(require_commands(), exports);
    tslib_1.__exportStar(require_models(), exports);
    tslib_1.__exportStar(require_pagination(), exports);
    var SSOServiceException_1 = require_SSOServiceException();
    Object.defineProperty(exports, "SSOServiceException", { enumerable: true, get: function() {
      return SSOServiceException_1.SSOServiceException;
    } });
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js
var require_resolveSSOCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSSOCredentials = void 0;
    var client_sso_1 = require_dist_cjs37();
    var property_provider_1 = require_dist_cjs14();
    var shared_ini_file_loader_1 = require_dist_cjs23();
    var EXPIRE_WINDOW_MS = 15 * 60 * 1e3;
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var resolveSSOCredentials = async ({ ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient }) => {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      try {
        token = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoStartUrl);
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= EXPIRE_WINDOW_MS) {
        throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { accessToken } = token;
      const sso = ssoClient || new client_sso_1.SSOClient({ region: ssoRegion });
      let ssoResp;
      try {
        ssoResp = await sso.send(new client_sso_1.GetRoleCredentialsCommand({
          accountId: ssoAccountId,
          roleName: ssoRoleName,
          accessToken
        }));
      } catch (e) {
        throw property_provider_1.CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new property_provider_1.CredentialsProviderError("SSO returns an invalid temporary credential.", SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration) };
    };
    exports.resolveSSOCredentials = resolveSSOCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js
var require_validateSsoProfile = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateSsoProfile = void 0;
    var property_provider_1 = require_dist_cjs14();
    var validateSsoProfile = (profile) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new property_provider_1.CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);
      }
      return profile;
    };
    exports.validateSsoProfile = validateSsoProfile;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js
var require_fromSSO = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSSO = void 0;
    var property_provider_1 = require_dist_cjs14();
    var shared_ini_file_loader_1 = require_dist_cjs23();
    var isSsoProfile_1 = require_isSsoProfile();
    var resolveSSOCredentials_1 = require_resolveSSOCredentials();
    var validateSsoProfile_1 = require_validateSsoProfile();
    var fromSSO = (init = {}) => async () => {
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient } = init;
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName) {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
        const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
        const profile = profiles[profileName];
        if (!(0, isSsoProfile_1.isSsoProfile)(profile)) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);
        }
        const { sso_start_url, sso_account_id, sso_region, sso_role_name } = (0, validateSsoProfile_1.validateSsoProfile)(profile);
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
          ssoStartUrl: sso_start_url,
          ssoAccountId: sso_account_id,
          ssoRegion: sso_region,
          ssoRoleName: sso_role_name,
          ssoClient
        });
      } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
        throw new property_provider_1.CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"');
      } else {
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({ ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient });
      }
    };
    exports.fromSSO = fromSSO;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js
var require_types4 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js
var require_dist_cjs38 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromSSO(), exports);
    tslib_1.__exportStar(require_isSsoProfile(), exports);
    tslib_1.__exportStar(require_types4(), exports);
    tslib_1.__exportStar(require_validateSsoProfile(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js
var require_resolveSsoCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSsoCredentials = exports.isSsoProfile = void 0;
    var credential_provider_sso_1 = require_dist_cjs38();
    var credential_provider_sso_2 = require_dist_cjs38();
    Object.defineProperty(exports, "isSsoProfile", { enumerable: true, get: function() {
      return credential_provider_sso_2.isSsoProfile;
    } });
    var resolveSsoCredentials = (data) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = (0, credential_provider_sso_1.validateSsoProfile)(data);
      return (0, credential_provider_sso_1.fromSSO)({
        ssoStartUrl: sso_start_url,
        ssoAccountId: sso_account_id,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name
      })();
    };
    exports.resolveSsoCredentials = resolveSsoCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js
var require_resolveStaticCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveStaticCredentials = exports.isStaticCredsProfile = void 0;
    var isStaticCredsProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1;
    exports.isStaticCredsProfile = isStaticCredsProfile;
    var resolveStaticCredentials = (profile) => Promise.resolve({
      accessKeyId: profile.aws_access_key_id,
      secretAccessKey: profile.aws_secret_access_key,
      sessionToken: profile.aws_session_token
    });
    exports.resolveStaticCredentials = resolveStaticCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js
var require_fromWebToken = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromWebToken = void 0;
    var property_provider_1 = require_dist_cjs14();
    var fromWebToken = (init) => () => {
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds, roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        throw new property_provider_1.CredentialsProviderError(`Role Arn '${roleArn}' needs to be assumed with web identity, but no role assumption callback was provided.`, false);
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName !== null && roleSessionName !== void 0 ? roleSessionName : `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds
      });
    };
    exports.fromWebToken = fromWebToken;
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js
var require_fromTokenFile = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromTokenFile = void 0;
    var property_provider_1 = require_dist_cjs14();
    var fs_1 = require("fs");
    var fromWebToken_1 = require_fromWebToken();
    var ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
    var ENV_ROLE_ARN = "AWS_ROLE_ARN";
    var ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
    var fromTokenFile = (init = {}) => async () => {
      return resolveTokenFile(init);
    };
    exports.fromTokenFile = fromTokenFile;
    var resolveTokenFile = (init) => {
      var _a, _b, _c;
      const webIdentityTokenFile = (_a = init === null || init === void 0 ? void 0 : init.webIdentityTokenFile) !== null && _a !== void 0 ? _a : process.env[ENV_TOKEN_FILE];
      const roleArn = (_b = init === null || init === void 0 ? void 0 : init.roleArn) !== null && _b !== void 0 ? _b : process.env[ENV_ROLE_ARN];
      const roleSessionName = (_c = init === null || init === void 0 ? void 0 : init.roleSessionName) !== null && _c !== void 0 ? _c : process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new property_provider_1.CredentialsProviderError("Web identity configuration not specified");
      }
      return (0, fromWebToken_1.fromWebToken)({
        ...init,
        webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: "ascii" }),
        roleArn,
        roleSessionName
      })();
    };
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js
var require_dist_cjs39 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromTokenFile(), exports);
    tslib_1.__exportStar(require_fromWebToken(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js
var require_resolveWebIdentityCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveWebIdentityCredentials = exports.isWebIdentityProfile = void 0;
    var credential_provider_web_identity_1 = require_dist_cjs39();
    var isWebIdentityProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1;
    exports.isWebIdentityProfile = isWebIdentityProfile;
    var resolveWebIdentityCredentials = async (profile, options) => (0, credential_provider_web_identity_1.fromTokenFile)({
      webIdentityTokenFile: profile.web_identity_token_file,
      roleArn: profile.role_arn,
      roleSessionName: profile.role_session_name,
      roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity
    })();
    exports.resolveWebIdentityCredentials = resolveWebIdentityCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js
var require_resolveProfileData = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveProfileData = void 0;
    var property_provider_1 = require_dist_cjs14();
    var resolveAssumeRoleCredentials_1 = require_resolveAssumeRoleCredentials();
    var resolveSsoCredentials_1 = require_resolveSsoCredentials();
    var resolveStaticCredentials_1 = require_resolveStaticCredentials();
    var resolveWebIdentityCredentials_1 = require_resolveWebIdentityCredentials();
    var resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && (0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveAssumeRoleCredentials_1.isAssumeRoleProfile)(data)) {
        return (0, resolveAssumeRoleCredentials_1.resolveAssumeRoleCredentials)(profileName, profiles, options, visitedProfiles);
      }
      if ((0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveWebIdentityCredentials_1.isWebIdentityProfile)(data)) {
        return (0, resolveWebIdentityCredentials_1.resolveWebIdentityCredentials)(data, options);
      }
      if ((0, resolveSsoCredentials_1.isSsoProfile)(data)) {
        return (0, resolveSsoCredentials_1.resolveSsoCredentials)(data);
      }
      throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);
    };
    exports.resolveProfileData = resolveProfileData;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js
var require_fromIni = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromIni = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs23();
    var resolveProfileData_1 = require_resolveProfileData();
    var fromIni = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProfileData_1.resolveProfileData)((0, shared_ini_file_loader_1.getProfileName)(init), profiles, init);
    };
    exports.fromIni = fromIni;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js
var require_dist_cjs40 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromIni(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js
var require_getValidatedProcessCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getValidatedProcessCredentials = void 0;
    var getValidatedProcessCredentials = (profileName, data) => {
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      return {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...data.SessionToken && { sessionToken: data.SessionToken },
        ...data.Expiration && { expiration: new Date(data.Expiration) }
      };
    };
    exports.getValidatedProcessCredentials = getValidatedProcessCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveProcessCredentials = void 0;
    var property_provider_1 = require_dist_cjs14();
    var child_process_1 = require("child_process");
    var util_1 = require("util");
    var getValidatedProcessCredentials_1 = require_getValidatedProcessCredentials();
    var resolveProcessCredentials = async (profileName, profiles) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== void 0) {
          const execPromise = (0, util_1.promisify)(child_process_1.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch (_a) {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return (0, getValidatedProcessCredentials_1.getValidatedProcessCredentials)(profileName, data);
          } catch (error) {
            throw new property_provider_1.CredentialsProviderError(error.message);
          }
        } else {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);
        }
      } else {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);
      }
    };
    exports.resolveProcessCredentials = resolveProcessCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js
var require_fromProcess = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromProcess = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs23();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials();
    var fromProcess = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProcessCredentials_1.resolveProcessCredentials)((0, shared_ini_file_loader_1.getProfileName)(init), profiles);
    };
    exports.fromProcess = fromProcess;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js
var require_dist_cjs41 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromProcess(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js
var require_remoteProvider = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.remoteProvider = exports.ENV_IMDS_DISABLED = void 0;
    var credential_provider_imds_1 = require_dist_cjs27();
    var property_provider_1 = require_dist_cjs14();
    exports.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    var remoteProvider = (init) => {
      if (process.env[credential_provider_imds_1.ENV_CMDS_RELATIVE_URI] || process.env[credential_provider_imds_1.ENV_CMDS_FULL_URI]) {
        return (0, credential_provider_imds_1.fromContainerMetadata)(init);
      }
      if (process.env[exports.ENV_IMDS_DISABLED]) {
        return async () => {
          throw new property_provider_1.CredentialsProviderError("EC2 Instance Metadata Service access disabled");
        };
      }
      return (0, credential_provider_imds_1.fromInstanceMetadata)(init);
    };
    exports.remoteProvider = remoteProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js
var require_defaultProvider = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultProvider = void 0;
    var credential_provider_env_1 = require_dist_cjs22();
    var credential_provider_ini_1 = require_dist_cjs40();
    var credential_provider_process_1 = require_dist_cjs41();
    var credential_provider_sso_1 = require_dist_cjs38();
    var credential_provider_web_identity_1 = require_dist_cjs39();
    var property_provider_1 = require_dist_cjs14();
    var shared_ini_file_loader_1 = require_dist_cjs23();
    var remoteProvider_1 = require_remoteProvider();
    var defaultProvider = (init = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)(...init.profile || process.env[shared_ini_file_loader_1.ENV_PROFILE] ? [] : [(0, credential_provider_env_1.fromEnv)()], (0, credential_provider_sso_1.fromSSO)(init), (0, credential_provider_ini_1.fromIni)(init), (0, credential_provider_process_1.fromProcess)(init), (0, credential_provider_web_identity_1.fromTokenFile)(init), (0, remoteProvider_1.remoteProvider)(init), async () => {
      throw new property_provider_1.CredentialsProviderError("Could not load credentials from any providers", false);
    }), (credentials) => credentials.expiration !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5, (credentials) => credentials.expiration !== void 0);
    exports.defaultProvider = defaultProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js
var require_dist_cjs42 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_defaultProvider(), exports);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoints.js
var require_endpoints2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/endpoints.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultRegionInfoProvider = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var regionHash = {
      "aws-global": {
        variants: [
          {
            hostname: "sts.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-east-1"
      },
      "us-east-1": {
        variants: [
          {
            hostname: "sts-fips.us-east-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-east-2": {
        variants: [
          {
            hostname: "sts-fips.us-east-2.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-gov-east-1": {
        variants: [
          {
            hostname: "sts.us-gov-east-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-gov-west-1": {
        variants: [
          {
            hostname: "sts.us-gov-west-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-west-1": {
        variants: [
          {
            hostname: "sts-fips.us-west-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-west-2": {
        variants: [
          {
            hostname: "sts-fips.us-west-2.amazonaws.com",
            tags: ["fips"]
          }
        ]
      }
    };
    var partitionHash = {
      aws: {
        regions: [
          "af-south-1",
          "ap-east-1",
          "ap-northeast-1",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "ap-southeast-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "aws-global",
          "ca-central-1",
          "eu-central-1",
          "eu-north-1",
          "eu-south-1",
          "eu-west-1",
          "eu-west-2",
          "eu-west-3",
          "me-south-1",
          "sa-east-1",
          "us-east-1",
          "us-east-1-fips",
          "us-east-2",
          "us-east-2-fips",
          "us-west-1",
          "us-west-1-fips",
          "us-west-2",
          "us-west-2-fips"
        ],
        regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "sts.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "sts-fips.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "sts-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "sts.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-cn": {
        regions: ["cn-north-1", "cn-northwest-1"],
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "sts.{region}.amazonaws.com.cn",
            tags: []
          },
          {
            hostname: "sts-fips.{region}.amazonaws.com.cn",
            tags: ["fips"]
          },
          {
            hostname: "sts-fips.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "sts.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-iso": {
        regions: ["us-iso-east-1", "us-iso-west-1"],
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "sts.{region}.c2s.ic.gov",
            tags: []
          },
          {
            hostname: "sts-fips.{region}.c2s.ic.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-iso-b": {
        regions: ["us-isob-east-1"],
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "sts.{region}.sc2s.sgov.gov",
            tags: []
          },
          {
            hostname: "sts-fips.{region}.sc2s.sgov.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-us-gov": {
        regions: ["us-gov-east-1", "us-gov-east-1-fips", "us-gov-west-1", "us-gov-west-1-fips"],
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "sts.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "sts.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "sts-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "sts.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      }
    };
    var defaultRegionInfoProvider = async (region, options) => (0, config_resolver_1.getRegionInfo)(region, {
      ...options,
      signingService: "sts",
      regionHash,
      partitionHash
    });
    exports.defaultRegionInfoProvider = defaultRegionInfoProvider;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var url_parser_1 = require_dist_cjs26();
    var endpoints_1 = require_endpoints2();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e;
      return {
        apiVersion: "2011-06-15",
        disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
        logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
        regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : endpoints_1.defaultRegionInfoProvider,
        serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : "STS",
        urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : url_parser_1.parseUrl
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js
var require_runtimeConfig2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib();
    var package_json_1 = tslib_1.__importDefault(require_package2());
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var config_resolver_1 = require_dist_cjs7();
    var credential_provider_node_1 = require_dist_cjs42();
    var hash_node_1 = require_dist_cjs29();
    var middleware_retry_1 = require_dist_cjs13();
    var node_config_provider_1 = require_dist_cjs24();
    var node_http_handler_1 = require_dist_cjs31();
    var util_base64_node_1 = require_dist_cjs32();
    var util_body_length_node_1 = require_dist_cjs33();
    var util_user_agent_node_1 = require_dist_cjs34();
    var util_utf8_node_1 = require_dist_cjs35();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
    var smithy_client_1 = require_dist_cjs3();
    var util_defaults_mode_node_1 = require_dist_cjs36();
    var smithy_client_2 = require_dist_cjs3();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : util_base64_node_1.fromBase64,
        base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : util_base64_node_1.toBase64,
        bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null && _d !== void 0 ? _d : (0, defaultStsRoleAssumers_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _e !== void 0 ? _e : (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: (_f = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _f !== void 0 ? _f : (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (_g = config === null || config === void 0 ? void 0 : config.region) !== null && _g !== void 0 ? _g : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (_h = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _h !== void 0 ? _h : new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (_j = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _j !== void 0 ? _j : (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || middleware_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: (_k = config === null || config === void 0 ? void 0 : config.sha256) !== null && _k !== void 0 ? _k : hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (_l = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _l !== void 0 ? _l : node_http_handler_1.streamCollector,
        useDualstackEndpoint: (_m = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _m !== void 0 ? _m : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (_o = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _o !== void 0 ? _o : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder: (_p = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _p !== void 0 ? _p : util_utf8_node_1.fromUtf8,
        utf8Encoder: (_q = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _q !== void 0 ? _q : util_utf8_node_1.toUtf8
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js
var require_STSClient = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSClient = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var middleware_content_length_1 = require_dist_cjs8();
    var middleware_host_header_1 = require_dist_cjs9();
    var middleware_logger_1 = require_dist_cjs10();
    var middleware_recursion_detection_1 = require_dist_cjs11();
    var middleware_retry_1 = require_dist_cjs13();
    var middleware_sdk_sts_1 = require_dist_cjs21();
    var middleware_user_agent_1 = require_dist_cjs20();
    var smithy_client_1 = require_dist_cjs3();
    var runtimeConfig_1 = require_runtimeConfig2();
    var STSClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, config_resolver_1.resolveRegionConfig)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveEndpointsConfig)(_config_1);
        const _config_3 = (0, middleware_retry_1.resolveRetryConfig)(_config_2);
        const _config_4 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_3);
        const _config_5 = (0, middleware_sdk_sts_1.resolveStsAuthConfig)(_config_4, { stsClientCtor: STSClient });
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.STSClient = STSClient;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/STS.js
var require_STS = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/STS.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STS = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithSAMLCommand_1 = require_AssumeRoleWithSAMLCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var DecodeAuthorizationMessageCommand_1 = require_DecodeAuthorizationMessageCommand();
    var GetAccessKeyInfoCommand_1 = require_GetAccessKeyInfoCommand();
    var GetCallerIdentityCommand_1 = require_GetCallerIdentityCommand();
    var GetFederationTokenCommand_1 = require_GetFederationTokenCommand();
    var GetSessionTokenCommand_1 = require_GetSessionTokenCommand();
    var STSClient_1 = require_STSClient();
    var STS = class extends STSClient_1.STSClient {
      assumeRole(args, optionsOrCb, cb) {
        const command = new AssumeRoleCommand_1.AssumeRoleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      assumeRoleWithSAML(args, optionsOrCb, cb) {
        const command = new AssumeRoleWithSAMLCommand_1.AssumeRoleWithSAMLCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      assumeRoleWithWebIdentity(args, optionsOrCb, cb) {
        const command = new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      decodeAuthorizationMessage(args, optionsOrCb, cb) {
        const command = new DecodeAuthorizationMessageCommand_1.DecodeAuthorizationMessageCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getAccessKeyInfo(args, optionsOrCb, cb) {
        const command = new GetAccessKeyInfoCommand_1.GetAccessKeyInfoCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getCallerIdentity(args, optionsOrCb, cb) {
        const command = new GetCallerIdentityCommand_1.GetCallerIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getFederationToken(args, optionsOrCb, cb) {
        const command = new GetFederationTokenCommand_1.GetFederationTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getSessionToken(args, optionsOrCb, cb) {
        const command = new GetSessionTokenCommand_1.GetSessionTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.STS = STS;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js
var require_commands2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_AssumeRoleCommand(), exports);
    tslib_1.__exportStar(require_AssumeRoleWithSAMLCommand(), exports);
    tslib_1.__exportStar(require_AssumeRoleWithWebIdentityCommand(), exports);
    tslib_1.__exportStar(require_DecodeAuthorizationMessageCommand(), exports);
    tslib_1.__exportStar(require_GetAccessKeyInfoCommand(), exports);
    tslib_1.__exportStar(require_GetCallerIdentityCommand(), exports);
    tslib_1.__exportStar(require_GetFederationTokenCommand(), exports);
    tslib_1.__exportStar(require_GetSessionTokenCommand(), exports);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js
var require_defaultRoleAssumers = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateDefaultCredentialProvider = exports.getDefaultRoleAssumerWithWebIdentity = exports.getDefaultRoleAssumer = void 0;
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var STSClient_1 = require_STSClient();
    var getDefaultRoleAssumer = (stsOptions = {}) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumer)(stsOptions, STSClient_1.STSClient);
    exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumerWithWebIdentity)(stsOptions, STSClient_1.STSClient);
    exports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider({
      roleAssumer: (0, exports.getDefaultRoleAssumer)(input),
      roleAssumerWithWebIdentity: (0, exports.getDefaultRoleAssumerWithWebIdentity)(input),
      ...input
    });
    exports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js
var require_models2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_models_02(), exports);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/index.js
var require_dist_cjs43 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSServiceException = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_STS(), exports);
    tslib_1.__exportStar(require_STSClient(), exports);
    tslib_1.__exportStar(require_commands2(), exports);
    tslib_1.__exportStar(require_defaultRoleAssumers(), exports);
    tslib_1.__exportStar(require_models2(), exports);
    var STSServiceException_1 = require_STSServiceException();
    Object.defineProperty(exports, "STSServiceException", { enumerable: true, get: function() {
      return STSServiceException_1.STSServiceException;
    } });
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/endpoints.js
var require_endpoints3 = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/endpoints.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultRegionInfoProvider = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var regionHash = {
      "af-south-1": {
        variants: [
          {
            hostname: "kms-fips.af-south-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "ap-east-1": {
        variants: [
          {
            hostname: "kms-fips.ap-east-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "ap-northeast-1": {
        variants: [
          {
            hostname: "kms-fips.ap-northeast-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "ap-northeast-2": {
        variants: [
          {
            hostname: "kms-fips.ap-northeast-2.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "ap-northeast-3": {
        variants: [
          {
            hostname: "kms-fips.ap-northeast-3.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "ap-south-1": {
        variants: [
          {
            hostname: "kms-fips.ap-south-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "ap-southeast-1": {
        variants: [
          {
            hostname: "kms-fips.ap-southeast-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "ap-southeast-2": {
        variants: [
          {
            hostname: "kms-fips.ap-southeast-2.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "ap-southeast-3": {
        variants: [
          {
            hostname: "kms-fips.ap-southeast-3.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "ca-central-1": {
        variants: [
          {
            hostname: "kms-fips.ca-central-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "eu-central-1": {
        variants: [
          {
            hostname: "kms-fips.eu-central-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "eu-north-1": {
        variants: [
          {
            hostname: "kms-fips.eu-north-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "eu-south-1": {
        variants: [
          {
            hostname: "kms-fips.eu-south-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "eu-west-1": {
        variants: [
          {
            hostname: "kms-fips.eu-west-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "eu-west-2": {
        variants: [
          {
            hostname: "kms-fips.eu-west-2.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "eu-west-3": {
        variants: [
          {
            hostname: "kms-fips.eu-west-3.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "me-south-1": {
        variants: [
          {
            hostname: "kms-fips.me-south-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "sa-east-1": {
        variants: [
          {
            hostname: "kms-fips.sa-east-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-east-1": {
        variants: [
          {
            hostname: "kms-fips.us-east-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-east-2": {
        variants: [
          {
            hostname: "kms-fips.us-east-2.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-gov-east-1": {
        variants: [
          {
            hostname: "kms-fips.us-gov-east-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-gov-west-1": {
        variants: [
          {
            hostname: "kms-fips.us-gov-west-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-iso-east-1": {
        variants: [
          {
            hostname: "kms-fips.us-iso-east-1.c2s.ic.gov",
            tags: ["fips"]
          }
        ]
      },
      "us-iso-west-1": {
        variants: [
          {
            hostname: "kms-fips.us-iso-west-1.c2s.ic.gov",
            tags: ["fips"]
          }
        ]
      },
      "us-isob-east-1": {
        variants: [
          {
            hostname: "kms-fips.us-isob-east-1.sc2s.sgov.gov",
            tags: ["fips"]
          }
        ]
      },
      "us-west-1": {
        variants: [
          {
            hostname: "kms-fips.us-west-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-west-2": {
        variants: [
          {
            hostname: "kms-fips.us-west-2.amazonaws.com",
            tags: ["fips"]
          }
        ]
      }
    };
    var partitionHash = {
      aws: {
        regions: [
          "af-south-1",
          "af-south-1-fips",
          "ap-east-1",
          "ap-east-1-fips",
          "ap-northeast-1",
          "ap-northeast-1-fips",
          "ap-northeast-2",
          "ap-northeast-2-fips",
          "ap-northeast-3",
          "ap-northeast-3-fips",
          "ap-south-1",
          "ap-south-1-fips",
          "ap-southeast-1",
          "ap-southeast-1-fips",
          "ap-southeast-2",
          "ap-southeast-2-fips",
          "ap-southeast-3",
          "ap-southeast-3-fips",
          "ca-central-1",
          "ca-central-1-fips",
          "eu-central-1",
          "eu-central-1-fips",
          "eu-north-1",
          "eu-north-1-fips",
          "eu-south-1",
          "eu-south-1-fips",
          "eu-west-1",
          "eu-west-1-fips",
          "eu-west-2",
          "eu-west-2-fips",
          "eu-west-3",
          "eu-west-3-fips",
          "me-south-1",
          "me-south-1-fips",
          "sa-east-1",
          "sa-east-1-fips",
          "us-east-1",
          "us-east-1-fips",
          "us-east-2",
          "us-east-2-fips",
          "us-west-1",
          "us-west-1-fips",
          "us-west-2",
          "us-west-2-fips"
        ],
        regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "kms.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "kms-fips.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "kms-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "kms.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-cn": {
        regions: ["cn-north-1", "cn-northwest-1"],
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "kms.{region}.amazonaws.com.cn",
            tags: []
          },
          {
            hostname: "kms-fips.{region}.amazonaws.com.cn",
            tags: ["fips"]
          },
          {
            hostname: "kms-fips.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "kms.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-iso": {
        regions: ["ProdFips", "us-iso-east-1", "us-iso-east-1-fips", "us-iso-west-1", "us-iso-west-1-fips"],
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "kms.{region}.c2s.ic.gov",
            tags: []
          },
          {
            hostname: "kms-fips.{region}.c2s.ic.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-iso-b": {
        regions: ["ProdFips", "us-isob-east-1", "us-isob-east-1-fips"],
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "kms.{region}.sc2s.sgov.gov",
            tags: []
          },
          {
            hostname: "kms-fips.{region}.sc2s.sgov.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-us-gov": {
        regions: ["ProdFips", "us-gov-east-1", "us-gov-east-1-fips", "us-gov-west-1", "us-gov-west-1-fips"],
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "kms.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "kms-fips.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "kms-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "kms.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      }
    };
    var defaultRegionInfoProvider = async (region, options) => (0, config_resolver_1.getRegionInfo)(region, {
      ...options,
      signingService: "kms",
      regionHash,
      partitionHash
    });
    exports.defaultRegionInfoProvider = defaultRegionInfoProvider;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared3 = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var url_parser_1 = require_dist_cjs26();
    var endpoints_1 = require_endpoints3();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e;
      return {
        apiVersion: "2014-11-01",
        disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
        logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
        regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : endpoints_1.defaultRegionInfoProvider,
        serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : "KMS",
        urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : url_parser_1.parseUrl
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/runtimeConfig.js
var require_runtimeConfig3 = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib();
    var package_json_1 = tslib_1.__importDefault(require_package());
    var client_sts_1 = require_dist_cjs43();
    var config_resolver_1 = require_dist_cjs7();
    var credential_provider_node_1 = require_dist_cjs42();
    var hash_node_1 = require_dist_cjs29();
    var middleware_retry_1 = require_dist_cjs13();
    var node_config_provider_1 = require_dist_cjs24();
    var node_http_handler_1 = require_dist_cjs31();
    var util_base64_node_1 = require_dist_cjs32();
    var util_body_length_node_1 = require_dist_cjs33();
    var util_user_agent_node_1 = require_dist_cjs34();
    var util_utf8_node_1 = require_dist_cjs35();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
    var smithy_client_1 = require_dist_cjs3();
    var util_defaults_mode_node_1 = require_dist_cjs36();
    var smithy_client_2 = require_dist_cjs3();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : util_base64_node_1.fromBase64,
        base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : util_base64_node_1.toBase64,
        bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null && _d !== void 0 ? _d : (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _e !== void 0 ? _e : (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: (_f = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _f !== void 0 ? _f : (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (_g = config === null || config === void 0 ? void 0 : config.region) !== null && _g !== void 0 ? _g : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (_h = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _h !== void 0 ? _h : new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (_j = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _j !== void 0 ? _j : (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || middleware_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: (_k = config === null || config === void 0 ? void 0 : config.sha256) !== null && _k !== void 0 ? _k : hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (_l = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _l !== void 0 ? _l : node_http_handler_1.streamCollector,
        useDualstackEndpoint: (_m = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _m !== void 0 ? _m : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (_o = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _o !== void 0 ? _o : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder: (_p = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _p !== void 0 ? _p : util_utf8_node_1.fromUtf8,
        utf8Encoder: (_q = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _q !== void 0 ? _q : util_utf8_node_1.toUtf8
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/KMSClient.js
var require_KMSClient = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/KMSClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KMSClient = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var middleware_content_length_1 = require_dist_cjs8();
    var middleware_host_header_1 = require_dist_cjs9();
    var middleware_logger_1 = require_dist_cjs10();
    var middleware_recursion_detection_1 = require_dist_cjs11();
    var middleware_retry_1 = require_dist_cjs13();
    var middleware_signing_1 = require_dist_cjs19();
    var middleware_user_agent_1 = require_dist_cjs20();
    var smithy_client_1 = require_dist_cjs3();
    var runtimeConfig_1 = require_runtimeConfig3();
    var KMSClient2 = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, config_resolver_1.resolveRegionConfig)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveEndpointsConfig)(_config_1);
        const _config_3 = (0, middleware_retry_1.resolveRetryConfig)(_config_2);
        const _config_4 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_3);
        const _config_5 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.KMSClient = KMSClient2;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/KMS.js
var require_KMS = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/KMS.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KMS = void 0;
    var CancelKeyDeletionCommand_1 = require_CancelKeyDeletionCommand();
    var ConnectCustomKeyStoreCommand_1 = require_ConnectCustomKeyStoreCommand();
    var CreateAliasCommand_1 = require_CreateAliasCommand();
    var CreateCustomKeyStoreCommand_1 = require_CreateCustomKeyStoreCommand();
    var CreateGrantCommand_1 = require_CreateGrantCommand();
    var CreateKeyCommand_1 = require_CreateKeyCommand();
    var DecryptCommand_1 = require_DecryptCommand();
    var DeleteAliasCommand_1 = require_DeleteAliasCommand();
    var DeleteCustomKeyStoreCommand_1 = require_DeleteCustomKeyStoreCommand();
    var DeleteImportedKeyMaterialCommand_1 = require_DeleteImportedKeyMaterialCommand();
    var DescribeCustomKeyStoresCommand_1 = require_DescribeCustomKeyStoresCommand();
    var DescribeKeyCommand_1 = require_DescribeKeyCommand();
    var DisableKeyCommand_1 = require_DisableKeyCommand();
    var DisableKeyRotationCommand_1 = require_DisableKeyRotationCommand();
    var DisconnectCustomKeyStoreCommand_1 = require_DisconnectCustomKeyStoreCommand();
    var EnableKeyCommand_1 = require_EnableKeyCommand();
    var EnableKeyRotationCommand_1 = require_EnableKeyRotationCommand();
    var EncryptCommand_1 = require_EncryptCommand();
    var GenerateDataKeyCommand_1 = require_GenerateDataKeyCommand();
    var GenerateDataKeyPairCommand_1 = require_GenerateDataKeyPairCommand();
    var GenerateDataKeyPairWithoutPlaintextCommand_1 = require_GenerateDataKeyPairWithoutPlaintextCommand();
    var GenerateDataKeyWithoutPlaintextCommand_1 = require_GenerateDataKeyWithoutPlaintextCommand();
    var GenerateMacCommand_1 = require_GenerateMacCommand();
    var GenerateRandomCommand_1 = require_GenerateRandomCommand();
    var GetKeyPolicyCommand_1 = require_GetKeyPolicyCommand();
    var GetKeyRotationStatusCommand_1 = require_GetKeyRotationStatusCommand();
    var GetParametersForImportCommand_1 = require_GetParametersForImportCommand();
    var GetPublicKeyCommand_1 = require_GetPublicKeyCommand();
    var ImportKeyMaterialCommand_1 = require_ImportKeyMaterialCommand();
    var ListAliasesCommand_1 = require_ListAliasesCommand();
    var ListGrantsCommand_1 = require_ListGrantsCommand();
    var ListKeyPoliciesCommand_1 = require_ListKeyPoliciesCommand();
    var ListKeysCommand_1 = require_ListKeysCommand();
    var ListResourceTagsCommand_1 = require_ListResourceTagsCommand();
    var ListRetirableGrantsCommand_1 = require_ListRetirableGrantsCommand();
    var PutKeyPolicyCommand_1 = require_PutKeyPolicyCommand();
    var ReEncryptCommand_1 = require_ReEncryptCommand();
    var ReplicateKeyCommand_1 = require_ReplicateKeyCommand();
    var RetireGrantCommand_1 = require_RetireGrantCommand();
    var RevokeGrantCommand_1 = require_RevokeGrantCommand();
    var ScheduleKeyDeletionCommand_1 = require_ScheduleKeyDeletionCommand();
    var SignCommand_1 = require_SignCommand();
    var TagResourceCommand_1 = require_TagResourceCommand();
    var UntagResourceCommand_1 = require_UntagResourceCommand();
    var UpdateAliasCommand_1 = require_UpdateAliasCommand();
    var UpdateCustomKeyStoreCommand_1 = require_UpdateCustomKeyStoreCommand();
    var UpdateKeyDescriptionCommand_1 = require_UpdateKeyDescriptionCommand();
    var UpdatePrimaryRegionCommand_1 = require_UpdatePrimaryRegionCommand();
    var VerifyCommand_1 = require_VerifyCommand();
    var VerifyMacCommand_1 = require_VerifyMacCommand();
    var KMSClient_1 = require_KMSClient();
    var KMS = class extends KMSClient_1.KMSClient {
      cancelKeyDeletion(args, optionsOrCb, cb) {
        const command = new CancelKeyDeletionCommand_1.CancelKeyDeletionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      connectCustomKeyStore(args, optionsOrCb, cb) {
        const command = new ConnectCustomKeyStoreCommand_1.ConnectCustomKeyStoreCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createAlias(args, optionsOrCb, cb) {
        const command = new CreateAliasCommand_1.CreateAliasCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createCustomKeyStore(args, optionsOrCb, cb) {
        const command = new CreateCustomKeyStoreCommand_1.CreateCustomKeyStoreCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createGrant(args, optionsOrCb, cb) {
        const command = new CreateGrantCommand_1.CreateGrantCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createKey(args, optionsOrCb, cb) {
        const command = new CreateKeyCommand_1.CreateKeyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      decrypt(args, optionsOrCb, cb) {
        const command = new DecryptCommand_1.DecryptCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteAlias(args, optionsOrCb, cb) {
        const command = new DeleteAliasCommand_1.DeleteAliasCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteCustomKeyStore(args, optionsOrCb, cb) {
        const command = new DeleteCustomKeyStoreCommand_1.DeleteCustomKeyStoreCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteImportedKeyMaterial(args, optionsOrCb, cb) {
        const command = new DeleteImportedKeyMaterialCommand_1.DeleteImportedKeyMaterialCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeCustomKeyStores(args, optionsOrCb, cb) {
        const command = new DescribeCustomKeyStoresCommand_1.DescribeCustomKeyStoresCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeKey(args, optionsOrCb, cb) {
        const command = new DescribeKeyCommand_1.DescribeKeyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      disableKey(args, optionsOrCb, cb) {
        const command = new DisableKeyCommand_1.DisableKeyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      disableKeyRotation(args, optionsOrCb, cb) {
        const command = new DisableKeyRotationCommand_1.DisableKeyRotationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      disconnectCustomKeyStore(args, optionsOrCb, cb) {
        const command = new DisconnectCustomKeyStoreCommand_1.DisconnectCustomKeyStoreCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      enableKey(args, optionsOrCb, cb) {
        const command = new EnableKeyCommand_1.EnableKeyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      enableKeyRotation(args, optionsOrCb, cb) {
        const command = new EnableKeyRotationCommand_1.EnableKeyRotationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      encrypt(args, optionsOrCb, cb) {
        const command = new EncryptCommand_1.EncryptCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      generateDataKey(args, optionsOrCb, cb) {
        const command = new GenerateDataKeyCommand_1.GenerateDataKeyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      generateDataKeyPair(args, optionsOrCb, cb) {
        const command = new GenerateDataKeyPairCommand_1.GenerateDataKeyPairCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      generateDataKeyPairWithoutPlaintext(args, optionsOrCb, cb) {
        const command = new GenerateDataKeyPairWithoutPlaintextCommand_1.GenerateDataKeyPairWithoutPlaintextCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      generateDataKeyWithoutPlaintext(args, optionsOrCb, cb) {
        const command = new GenerateDataKeyWithoutPlaintextCommand_1.GenerateDataKeyWithoutPlaintextCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      generateMac(args, optionsOrCb, cb) {
        const command = new GenerateMacCommand_1.GenerateMacCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      generateRandom(args, optionsOrCb, cb) {
        const command = new GenerateRandomCommand_1.GenerateRandomCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getKeyPolicy(args, optionsOrCb, cb) {
        const command = new GetKeyPolicyCommand_1.GetKeyPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getKeyRotationStatus(args, optionsOrCb, cb) {
        const command = new GetKeyRotationStatusCommand_1.GetKeyRotationStatusCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getParametersForImport(args, optionsOrCb, cb) {
        const command = new GetParametersForImportCommand_1.GetParametersForImportCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getPublicKey(args, optionsOrCb, cb) {
        const command = new GetPublicKeyCommand_1.GetPublicKeyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      importKeyMaterial(args, optionsOrCb, cb) {
        const command = new ImportKeyMaterialCommand_1.ImportKeyMaterialCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAliases(args, optionsOrCb, cb) {
        const command = new ListAliasesCommand_1.ListAliasesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listGrants(args, optionsOrCb, cb) {
        const command = new ListGrantsCommand_1.ListGrantsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listKeyPolicies(args, optionsOrCb, cb) {
        const command = new ListKeyPoliciesCommand_1.ListKeyPoliciesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listKeys(args, optionsOrCb, cb) {
        const command = new ListKeysCommand_1.ListKeysCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listResourceTags(args, optionsOrCb, cb) {
        const command = new ListResourceTagsCommand_1.ListResourceTagsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listRetirableGrants(args, optionsOrCb, cb) {
        const command = new ListRetirableGrantsCommand_1.ListRetirableGrantsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putKeyPolicy(args, optionsOrCb, cb) {
        const command = new PutKeyPolicyCommand_1.PutKeyPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      reEncrypt(args, optionsOrCb, cb) {
        const command = new ReEncryptCommand_1.ReEncryptCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      replicateKey(args, optionsOrCb, cb) {
        const command = new ReplicateKeyCommand_1.ReplicateKeyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      retireGrant(args, optionsOrCb, cb) {
        const command = new RetireGrantCommand_1.RetireGrantCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      revokeGrant(args, optionsOrCb, cb) {
        const command = new RevokeGrantCommand_1.RevokeGrantCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      scheduleKeyDeletion(args, optionsOrCb, cb) {
        const command = new ScheduleKeyDeletionCommand_1.ScheduleKeyDeletionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      sign(args, optionsOrCb, cb) {
        const command = new SignCommand_1.SignCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      tagResource(args, optionsOrCb, cb) {
        const command = new TagResourceCommand_1.TagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      untagResource(args, optionsOrCb, cb) {
        const command = new UntagResourceCommand_1.UntagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateAlias(args, optionsOrCb, cb) {
        const command = new UpdateAliasCommand_1.UpdateAliasCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateCustomKeyStore(args, optionsOrCb, cb) {
        const command = new UpdateCustomKeyStoreCommand_1.UpdateCustomKeyStoreCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateKeyDescription(args, optionsOrCb, cb) {
        const command = new UpdateKeyDescriptionCommand_1.UpdateKeyDescriptionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updatePrimaryRegion(args, optionsOrCb, cb) {
        const command = new UpdatePrimaryRegionCommand_1.UpdatePrimaryRegionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      verify(args, optionsOrCb, cb) {
        const command = new VerifyCommand_1.VerifyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      verifyMac(args, optionsOrCb, cb) {
        const command = new VerifyMacCommand_1.VerifyMacCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.KMS = KMS;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/commands/index.js
var require_commands3 = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_CancelKeyDeletionCommand(), exports);
    tslib_1.__exportStar(require_ConnectCustomKeyStoreCommand(), exports);
    tslib_1.__exportStar(require_CreateAliasCommand(), exports);
    tslib_1.__exportStar(require_CreateCustomKeyStoreCommand(), exports);
    tslib_1.__exportStar(require_CreateGrantCommand(), exports);
    tslib_1.__exportStar(require_CreateKeyCommand(), exports);
    tslib_1.__exportStar(require_DecryptCommand(), exports);
    tslib_1.__exportStar(require_DeleteAliasCommand(), exports);
    tslib_1.__exportStar(require_DeleteCustomKeyStoreCommand(), exports);
    tslib_1.__exportStar(require_DeleteImportedKeyMaterialCommand(), exports);
    tslib_1.__exportStar(require_DescribeCustomKeyStoresCommand(), exports);
    tslib_1.__exportStar(require_DescribeKeyCommand(), exports);
    tslib_1.__exportStar(require_DisableKeyCommand(), exports);
    tslib_1.__exportStar(require_DisableKeyRotationCommand(), exports);
    tslib_1.__exportStar(require_DisconnectCustomKeyStoreCommand(), exports);
    tslib_1.__exportStar(require_EnableKeyCommand(), exports);
    tslib_1.__exportStar(require_EnableKeyRotationCommand(), exports);
    tslib_1.__exportStar(require_EncryptCommand(), exports);
    tslib_1.__exportStar(require_GenerateDataKeyCommand(), exports);
    tslib_1.__exportStar(require_GenerateDataKeyPairCommand(), exports);
    tslib_1.__exportStar(require_GenerateDataKeyPairWithoutPlaintextCommand(), exports);
    tslib_1.__exportStar(require_GenerateDataKeyWithoutPlaintextCommand(), exports);
    tslib_1.__exportStar(require_GenerateMacCommand(), exports);
    tslib_1.__exportStar(require_GenerateRandomCommand(), exports);
    tslib_1.__exportStar(require_GetKeyPolicyCommand(), exports);
    tslib_1.__exportStar(require_GetKeyRotationStatusCommand(), exports);
    tslib_1.__exportStar(require_GetParametersForImportCommand(), exports);
    tslib_1.__exportStar(require_GetPublicKeyCommand(), exports);
    tslib_1.__exportStar(require_ImportKeyMaterialCommand(), exports);
    tslib_1.__exportStar(require_ListAliasesCommand(), exports);
    tslib_1.__exportStar(require_ListGrantsCommand(), exports);
    tslib_1.__exportStar(require_ListKeyPoliciesCommand(), exports);
    tslib_1.__exportStar(require_ListKeysCommand(), exports);
    tslib_1.__exportStar(require_ListResourceTagsCommand(), exports);
    tslib_1.__exportStar(require_ListRetirableGrantsCommand(), exports);
    tslib_1.__exportStar(require_PutKeyPolicyCommand(), exports);
    tslib_1.__exportStar(require_ReEncryptCommand(), exports);
    tslib_1.__exportStar(require_ReplicateKeyCommand(), exports);
    tslib_1.__exportStar(require_RetireGrantCommand(), exports);
    tslib_1.__exportStar(require_RevokeGrantCommand(), exports);
    tslib_1.__exportStar(require_ScheduleKeyDeletionCommand(), exports);
    tslib_1.__exportStar(require_SignCommand(), exports);
    tslib_1.__exportStar(require_TagResourceCommand(), exports);
    tslib_1.__exportStar(require_UntagResourceCommand(), exports);
    tslib_1.__exportStar(require_UpdateAliasCommand(), exports);
    tslib_1.__exportStar(require_UpdateCustomKeyStoreCommand(), exports);
    tslib_1.__exportStar(require_UpdateKeyDescriptionCommand(), exports);
    tslib_1.__exportStar(require_UpdatePrimaryRegionCommand(), exports);
    tslib_1.__exportStar(require_VerifyCommand(), exports);
    tslib_1.__exportStar(require_VerifyMacCommand(), exports);
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/models/index.js
var require_models3 = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_models_0(), exports);
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/pagination/Interfaces.js
var require_Interfaces2 = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/pagination/ListAliasesPaginator.js
var require_ListAliasesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/pagination/ListAliasesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAliases = void 0;
    var ListAliasesCommand_1 = require_ListAliasesCommand();
    var KMS_1 = require_KMS();
    var KMSClient_1 = require_KMSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAliasesCommand_1.ListAliasesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAliases(input, ...args);
    };
    async function* paginateListAliases(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["Limit"] = config.pageSize;
        if (config.client instanceof KMS_1.KMS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof KMSClient_1.KMSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected KMS | KMSClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAliases = paginateListAliases;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/pagination/ListGrantsPaginator.js
var require_ListGrantsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/pagination/ListGrantsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListGrants = void 0;
    var ListGrantsCommand_1 = require_ListGrantsCommand();
    var KMS_1 = require_KMS();
    var KMSClient_1 = require_KMSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListGrantsCommand_1.ListGrantsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listGrants(input, ...args);
    };
    async function* paginateListGrants(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["Limit"] = config.pageSize;
        if (config.client instanceof KMS_1.KMS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof KMSClient_1.KMSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected KMS | KMSClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListGrants = paginateListGrants;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/pagination/ListKeyPoliciesPaginator.js
var require_ListKeyPoliciesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/pagination/ListKeyPoliciesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListKeyPolicies = void 0;
    var ListKeyPoliciesCommand_1 = require_ListKeyPoliciesCommand();
    var KMS_1 = require_KMS();
    var KMSClient_1 = require_KMSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListKeyPoliciesCommand_1.ListKeyPoliciesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listKeyPolicies(input, ...args);
    };
    async function* paginateListKeyPolicies(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["Limit"] = config.pageSize;
        if (config.client instanceof KMS_1.KMS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof KMSClient_1.KMSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected KMS | KMSClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListKeyPolicies = paginateListKeyPolicies;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/pagination/ListKeysPaginator.js
var require_ListKeysPaginator = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/pagination/ListKeysPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListKeys = void 0;
    var ListKeysCommand_1 = require_ListKeysCommand();
    var KMS_1 = require_KMS();
    var KMSClient_1 = require_KMSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListKeysCommand_1.ListKeysCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listKeys(input, ...args);
    };
    async function* paginateListKeys(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["Limit"] = config.pageSize;
        if (config.client instanceof KMS_1.KMS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof KMSClient_1.KMSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected KMS | KMSClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListKeys = paginateListKeys;
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/pagination/index.js
var require_pagination2 = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_Interfaces2(), exports);
    tslib_1.__exportStar(require_ListAliasesPaginator(), exports);
    tslib_1.__exportStar(require_ListGrantsPaginator(), exports);
    tslib_1.__exportStar(require_ListKeyPoliciesPaginator(), exports);
    tslib_1.__exportStar(require_ListKeysPaginator(), exports);
  }
});

// node_modules/@aws-sdk/client-kms/dist-cjs/index.js
var require_dist_cjs44 = __commonJS({
  "node_modules/@aws-sdk/client-kms/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KMSServiceException = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_KMS(), exports);
    tslib_1.__exportStar(require_KMSClient(), exports);
    tslib_1.__exportStar(require_commands3(), exports);
    tslib_1.__exportStar(require_models3(), exports);
    tslib_1.__exportStar(require_pagination2(), exports);
    var KMSServiceException_1 = require_KMSServiceException();
    Object.defineProperty(exports, "KMSServiceException", { enumerable: true, get: function() {
      return KMSServiceException_1.KMSServiceException;
    } });
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/models/SSMServiceException.js
var require_SSMServiceException = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/models/SSMServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSMServiceException = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var SSMServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SSMServiceException.prototype);
      }
    };
    exports.SSMServiceException = SSMServiceException;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_0.js
var require_models_04 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvalidTargetMaps = exports.InvalidTarget = exports.InvalidSchedule = exports.InvalidOutputLocation = exports.InvalidDocumentVersion = exports.InvalidDocument = exports.CreateAssociationResult = exports.AssociationDescription = exports.AssociationStatus = exports.AssociationStatusName = exports.AssociationOverview = exports.CreateAssociationRequest = exports.Target = exports.TargetLocation = exports.AssociationSyncCompliance = exports.InstanceAssociationOutputLocation = exports.S3OutputLocation = exports.AssociationComplianceSeverity = exports.AssociationLimitExceeded = exports.AssociationAlreadyExists = exports.InvalidParameters = exports.CreateActivationResult = exports.CreateActivationRequest = exports.RegistrationMetadataItem = exports.DoesNotExistException = exports.CancelMaintenanceWindowExecutionResult = exports.CancelMaintenanceWindowExecutionRequest = exports.InvalidInstanceId = exports.InvalidCommandId = exports.DuplicateInstanceId = exports.CancelCommandResult = exports.CancelCommandRequest = exports.OpsItemRelatedItemAlreadyExistsException = exports.OpsItemNotFoundException = exports.OpsItemLimitExceededException = exports.OpsItemInvalidParameterException = exports.AssociateOpsItemRelatedItemResponse = exports.AssociateOpsItemRelatedItemRequest = exports.AlreadyExistsException = exports.TooManyUpdates = exports.TooManyTagsError = exports.InvalidResourceType = exports.InvalidResourceId = exports.InternalServerError = exports.AddTagsToResourceResult = exports.AddTagsToResourceRequest = exports.ResourceTypeForTagging = exports.Activation = exports.Tag = exports.AccountSharingInfo = void 0;
    exports.OperatingSystem = exports.PatchRuleGroup = exports.PatchRule = exports.PatchFilterGroup = exports.PatchFilter = exports.PatchFilterKey = exports.PatchComplianceLevel = exports.OpsMetadataTooManyUpdatesException = exports.OpsMetadataLimitExceededException = exports.OpsMetadataInvalidArgumentException = exports.OpsMetadataAlreadyExistsException = exports.CreateOpsMetadataResult = exports.CreateOpsMetadataRequest = exports.MetadataValue = exports.OpsItemAlreadyExistsException = exports.CreateOpsItemResponse = exports.CreateOpsItemRequest = exports.RelatedOpsItem = exports.OpsItemDataValue = exports.OpsItemDataType = exports.OpsItemNotification = exports.ResourceLimitExceededException = exports.IdempotentParameterMismatch = exports.CreateMaintenanceWindowResult = exports.CreateMaintenanceWindowRequest = exports.MaxDocumentSizeExceeded = exports.InvalidDocumentSchemaVersion = exports.InvalidDocumentContent = exports.DocumentLimitExceeded = exports.DocumentAlreadyExists = exports.CreateDocumentResult = exports.DocumentDescription = exports.DocumentStatus = exports.ReviewInformation = exports.ReviewStatus = exports.PlatformType = exports.DocumentParameter = exports.DocumentHashType = exports.AttachmentInformation = exports.CreateDocumentRequest = exports.DocumentRequires = exports.DocumentType = exports.DocumentFormat = exports.AttachmentsSource = exports.AttachmentsSourceKey = exports.CreateAssociationBatchResult = exports.FailedCreateAssociation = exports.CreateAssociationBatchRequest = exports.CreateAssociationBatchRequestEntry = exports.UnsupportedPlatformType = void 0;
    exports.DeleteResourceDataSyncResult = exports.DeleteResourceDataSyncRequest = exports.ResourceInUseException = exports.DeletePatchBaselineResult = exports.DeletePatchBaselineRequest = exports.DeleteParametersResult = exports.DeleteParametersRequest = exports.ParameterNotFound = exports.DeleteParameterResult = exports.DeleteParameterRequest = exports.OpsMetadataNotFoundException = exports.DeleteOpsMetadataResult = exports.DeleteOpsMetadataRequest = exports.DeleteMaintenanceWindowResult = exports.DeleteMaintenanceWindowRequest = exports.InvalidTypeNameException = exports.InvalidOptionException = exports.InvalidInventoryRequestException = exports.InvalidDeleteInventoryParametersException = exports.DeleteInventoryResult = exports.InventoryDeletionSummary = exports.InventoryDeletionSummaryItem = exports.DeleteInventoryRequest = exports.InventorySchemaDeleteOption = exports.InvalidDocumentOperation = exports.DeleteDocumentResult = exports.DeleteDocumentRequest = exports.AssociatedInstances = exports.DeleteAssociationResult = exports.DeleteAssociationRequest = exports.AssociationDoesNotExist = exports.InvalidActivationId = exports.InvalidActivation = exports.DeleteActivationResult = exports.DeleteActivationRequest = exports.ResourceDataSyncInvalidConfigurationException = exports.ResourceDataSyncCountExceededException = exports.ResourceDataSyncAlreadyExistsException = exports.CreateResourceDataSyncResult = exports.CreateResourceDataSyncRequest = exports.ResourceDataSyncSource = exports.ResourceDataSyncAwsOrganizationsSource = exports.ResourceDataSyncOrganizationalUnit = exports.ResourceDataSyncS3Destination = exports.ResourceDataSyncS3Format = exports.ResourceDataSyncDestinationDataSharing = exports.CreatePatchBaselineResult = exports.CreatePatchBaselineRequest = exports.PatchSource = exports.PatchAction = void 0;
    exports.FailureDetails = exports.DescribeAutomationStepExecutionsRequest = exports.StepExecutionFilter = exports.StepExecutionFilterKey = exports.AutomationExecutionNotFoundException = exports.InvalidFilterValue = exports.InvalidFilterKey = exports.DescribeAutomationExecutionsResult = exports.AutomationExecutionMetadata = exports.Runbook = exports.ResolvedTargets = exports.ExecutionMode = exports.AutomationType = exports.AutomationSubtype = exports.AutomationExecutionStatus = exports.DescribeAutomationExecutionsRequest = exports.AutomationExecutionFilter = exports.AutomationExecutionFilterKey = exports.DescribeAssociationExecutionTargetsResult = exports.AssociationExecutionTarget = exports.OutputSource = exports.DescribeAssociationExecutionTargetsRequest = exports.AssociationExecutionTargetsFilter = exports.AssociationExecutionTargetsFilterKey = exports.AssociationExecutionDoesNotExist = exports.DescribeAssociationExecutionsResult = exports.AssociationExecution = exports.DescribeAssociationExecutionsRequest = exports.AssociationExecutionFilter = exports.AssociationFilterOperatorType = exports.AssociationExecutionFilterKey = exports.InvalidAssociationVersion = exports.DescribeAssociationResult = exports.DescribeAssociationRequest = exports.InvalidNextToken = exports.InvalidFilter = exports.DescribeActivationsResult = exports.DescribeActivationsRequest = exports.DescribeActivationsFilter = exports.DescribeActivationsFilterKeys = exports.DeregisterTaskFromMaintenanceWindowResult = exports.DeregisterTaskFromMaintenanceWindowRequest = exports.TargetInUseException = exports.DeregisterTargetFromMaintenanceWindowResult = exports.DeregisterTargetFromMaintenanceWindowRequest = exports.DeregisterPatchBaselineForPatchGroupResult = exports.DeregisterPatchBaselineForPatchGroupRequest = exports.DeregisterManagedInstanceResult = exports.DeregisterManagedInstanceRequest = exports.ResourceDataSyncNotFoundException = void 0;
    exports.DescribeInstancePatchStatesForPatchGroupResult = exports.DescribeInstancePatchStatesForPatchGroupRequest = exports.InstancePatchStateFilter = exports.InstancePatchStateOperatorType = exports.DescribeInstancePatchStatesResult = exports.InstancePatchState = exports.RebootOption = exports.PatchOperationType = exports.DescribeInstancePatchStatesRequest = exports.DescribeInstancePatchesResult = exports.PatchComplianceData = exports.PatchComplianceDataState = exports.DescribeInstancePatchesRequest = exports.InvalidInstanceInformationFilterValue = exports.DescribeInstanceInformationResult = exports.InstanceInformation = exports.SourceType = exports.ResourceType = exports.PingStatus = exports.InstanceAggregatedAssociationOverview = exports.DescribeInstanceInformationRequest = exports.InstanceInformationFilter = exports.InstanceInformationFilterKey = exports.InstanceInformationStringFilter = exports.DescribeInstanceAssociationsStatusResult = exports.InstanceAssociationStatusInfo = exports.InstanceAssociationOutputUrl = exports.S3OutputUrl = exports.DescribeInstanceAssociationsStatusRequest = exports.UnsupportedOperatingSystem = exports.DescribeEffectivePatchesForPatchBaselineResult = exports.EffectivePatch = exports.PatchStatus = exports.PatchDeploymentStatus = exports.DescribeEffectivePatchesForPatchBaselineRequest = exports.DescribeEffectiveInstanceAssociationsResult = exports.InstanceAssociation = exports.DescribeEffectiveInstanceAssociationsRequest = exports.InvalidPermissionType = exports.DescribeDocumentPermissionResponse = exports.DescribeDocumentPermissionRequest = exports.DocumentPermissionType = exports.DescribeDocumentResult = exports.DescribeDocumentRequest = exports.DescribeAvailablePatchesResult = exports.Patch = exports.DescribeAvailablePatchesRequest = exports.PatchOrchestratorFilter = exports.DescribeAutomationStepExecutionsResult = exports.StepExecution = void 0;
    exports.ParameterInlinePolicy = exports.DescribeParametersRequest = exports.ParameterStringFilter = exports.ParametersFilter = exports.ParametersFilterKey = exports.DescribeOpsItemsResponse = exports.OpsItemSummary = exports.OpsItemStatus = exports.DescribeOpsItemsRequest = exports.OpsItemFilter = exports.OpsItemFilterOperator = exports.OpsItemFilterKey = exports.DescribeMaintenanceWindowTasksResult = exports.MaintenanceWindowTask = exports.MaintenanceWindowTaskParameterValueExpression = exports.LoggingInfo = exports.MaintenanceWindowTaskCutoffBehavior = exports.DescribeMaintenanceWindowTasksRequest = exports.DescribeMaintenanceWindowTargetsResult = exports.MaintenanceWindowTarget = exports.DescribeMaintenanceWindowTargetsRequest = exports.DescribeMaintenanceWindowsForTargetResult = exports.MaintenanceWindowIdentityForTarget = exports.DescribeMaintenanceWindowsForTargetRequest = exports.DescribeMaintenanceWindowScheduleResult = exports.ScheduledWindowExecution = exports.DescribeMaintenanceWindowScheduleRequest = exports.MaintenanceWindowResourceType = exports.DescribeMaintenanceWindowsResult = exports.MaintenanceWindowIdentity = exports.DescribeMaintenanceWindowsRequest = exports.DescribeMaintenanceWindowExecutionTasksResult = exports.MaintenanceWindowExecutionTaskIdentity = exports.DescribeMaintenanceWindowExecutionTasksRequest = exports.DescribeMaintenanceWindowExecutionTaskInvocationsResult = exports.MaintenanceWindowExecutionTaskInvocationIdentity = exports.MaintenanceWindowTaskType = exports.DescribeMaintenanceWindowExecutionTaskInvocationsRequest = exports.DescribeMaintenanceWindowExecutionsResult = exports.MaintenanceWindowExecution = exports.MaintenanceWindowExecutionStatus = exports.DescribeMaintenanceWindowExecutionsRequest = exports.MaintenanceWindowFilter = exports.InvalidDeletionIdException = exports.DescribeInventoryDeletionsResult = exports.InventoryDeletionStatusItem = exports.InventoryDeletionStatus = exports.DescribeInventoryDeletionsRequest = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var SSMServiceException_1 = require_SSMServiceException();
    var AccountSharingInfo;
    (function(AccountSharingInfo2) {
      AccountSharingInfo2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AccountSharingInfo = exports.AccountSharingInfo || (exports.AccountSharingInfo = {}));
    var Tag;
    (function(Tag2) {
      Tag2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(Tag = exports.Tag || (exports.Tag = {}));
    var Activation;
    (function(Activation2) {
      Activation2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(Activation = exports.Activation || (exports.Activation = {}));
    var ResourceTypeForTagging;
    (function(ResourceTypeForTagging2) {
      ResourceTypeForTagging2["AUTOMATION"] = "Automation";
      ResourceTypeForTagging2["DOCUMENT"] = "Document";
      ResourceTypeForTagging2["MAINTENANCE_WINDOW"] = "MaintenanceWindow";
      ResourceTypeForTagging2["MANAGED_INSTANCE"] = "ManagedInstance";
      ResourceTypeForTagging2["OPSMETADATA"] = "OpsMetadata";
      ResourceTypeForTagging2["OPS_ITEM"] = "OpsItem";
      ResourceTypeForTagging2["PARAMETER"] = "Parameter";
      ResourceTypeForTagging2["PATCH_BASELINE"] = "PatchBaseline";
    })(ResourceTypeForTagging = exports.ResourceTypeForTagging || (exports.ResourceTypeForTagging = {}));
    var AddTagsToResourceRequest;
    (function(AddTagsToResourceRequest2) {
      AddTagsToResourceRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AddTagsToResourceRequest = exports.AddTagsToResourceRequest || (exports.AddTagsToResourceRequest = {}));
    var AddTagsToResourceResult;
    (function(AddTagsToResourceResult2) {
      AddTagsToResourceResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AddTagsToResourceResult = exports.AddTagsToResourceResult || (exports.AddTagsToResourceResult = {}));
    var InternalServerError = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InternalServerError",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerError";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerError.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InternalServerError = InternalServerError;
    var InvalidResourceId = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidResourceId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidResourceId";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidResourceId.prototype);
      }
    };
    exports.InvalidResourceId = InvalidResourceId;
    var InvalidResourceType = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidResourceType",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidResourceType";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidResourceType.prototype);
      }
    };
    exports.InvalidResourceType = InvalidResourceType;
    var TooManyTagsError = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "TooManyTagsError",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyTagsError";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsError.prototype);
      }
    };
    exports.TooManyTagsError = TooManyTagsError;
    var TooManyUpdates = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "TooManyUpdates",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyUpdates";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyUpdates.prototype);
        this.Message = opts.Message;
      }
    };
    exports.TooManyUpdates = TooManyUpdates;
    var AlreadyExistsException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "AlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AlreadyExistsException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AlreadyExistsException = AlreadyExistsException;
    var AssociateOpsItemRelatedItemRequest;
    (function(AssociateOpsItemRelatedItemRequest2) {
      AssociateOpsItemRelatedItemRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AssociateOpsItemRelatedItemRequest = exports.AssociateOpsItemRelatedItemRequest || (exports.AssociateOpsItemRelatedItemRequest = {}));
    var AssociateOpsItemRelatedItemResponse;
    (function(AssociateOpsItemRelatedItemResponse2) {
      AssociateOpsItemRelatedItemResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AssociateOpsItemRelatedItemResponse = exports.AssociateOpsItemRelatedItemResponse || (exports.AssociateOpsItemRelatedItemResponse = {}));
    var OpsItemInvalidParameterException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemInvalidParameterException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemInvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemInvalidParameterException.prototype);
        this.ParameterNames = opts.ParameterNames;
        this.Message = opts.Message;
      }
    };
    exports.OpsItemInvalidParameterException = OpsItemInvalidParameterException;
    var OpsItemLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemLimitExceededException.prototype);
        this.ResourceTypes = opts.ResourceTypes;
        this.Limit = opts.Limit;
        this.LimitType = opts.LimitType;
        this.Message = opts.Message;
      }
    };
    exports.OpsItemLimitExceededException = OpsItemLimitExceededException;
    var OpsItemNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.OpsItemNotFoundException = OpsItemNotFoundException;
    var OpsItemRelatedItemAlreadyExistsException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemRelatedItemAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemRelatedItemAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemRelatedItemAlreadyExistsException.prototype);
        this.Message = opts.Message;
        this.ResourceUri = opts.ResourceUri;
        this.OpsItemId = opts.OpsItemId;
      }
    };
    exports.OpsItemRelatedItemAlreadyExistsException = OpsItemRelatedItemAlreadyExistsException;
    var CancelCommandRequest;
    (function(CancelCommandRequest2) {
      CancelCommandRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CancelCommandRequest = exports.CancelCommandRequest || (exports.CancelCommandRequest = {}));
    var CancelCommandResult;
    (function(CancelCommandResult2) {
      CancelCommandResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CancelCommandResult = exports.CancelCommandResult || (exports.CancelCommandResult = {}));
    var DuplicateInstanceId = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DuplicateInstanceId",
          $fault: "client",
          ...opts
        });
        this.name = "DuplicateInstanceId";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateInstanceId.prototype);
      }
    };
    exports.DuplicateInstanceId = DuplicateInstanceId;
    var InvalidCommandId = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidCommandId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidCommandId";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidCommandId.prototype);
      }
    };
    exports.InvalidCommandId = InvalidCommandId;
    var InvalidInstanceId = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidInstanceId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInstanceId";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInstanceId.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidInstanceId = InvalidInstanceId;
    var CancelMaintenanceWindowExecutionRequest;
    (function(CancelMaintenanceWindowExecutionRequest2) {
      CancelMaintenanceWindowExecutionRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CancelMaintenanceWindowExecutionRequest = exports.CancelMaintenanceWindowExecutionRequest || (exports.CancelMaintenanceWindowExecutionRequest = {}));
    var CancelMaintenanceWindowExecutionResult;
    (function(CancelMaintenanceWindowExecutionResult2) {
      CancelMaintenanceWindowExecutionResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CancelMaintenanceWindowExecutionResult = exports.CancelMaintenanceWindowExecutionResult || (exports.CancelMaintenanceWindowExecutionResult = {}));
    var DoesNotExistException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DoesNotExistException",
          $fault: "client",
          ...opts
        });
        this.name = "DoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DoesNotExistException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.DoesNotExistException = DoesNotExistException;
    var RegistrationMetadataItem;
    (function(RegistrationMetadataItem2) {
      RegistrationMetadataItem2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(RegistrationMetadataItem = exports.RegistrationMetadataItem || (exports.RegistrationMetadataItem = {}));
    var CreateActivationRequest;
    (function(CreateActivationRequest2) {
      CreateActivationRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CreateActivationRequest = exports.CreateActivationRequest || (exports.CreateActivationRequest = {}));
    var CreateActivationResult;
    (function(CreateActivationResult2) {
      CreateActivationResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CreateActivationResult = exports.CreateActivationResult || (exports.CreateActivationResult = {}));
    var InvalidParameters = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidParameters",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidParameters";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameters.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidParameters = InvalidParameters;
    var AssociationAlreadyExists = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociationAlreadyExists",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociationAlreadyExists.prototype);
      }
    };
    exports.AssociationAlreadyExists = AssociationAlreadyExists;
    var AssociationLimitExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociationLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociationLimitExceeded.prototype);
      }
    };
    exports.AssociationLimitExceeded = AssociationLimitExceeded;
    var AssociationComplianceSeverity;
    (function(AssociationComplianceSeverity2) {
      AssociationComplianceSeverity2["Critical"] = "CRITICAL";
      AssociationComplianceSeverity2["High"] = "HIGH";
      AssociationComplianceSeverity2["Low"] = "LOW";
      AssociationComplianceSeverity2["Medium"] = "MEDIUM";
      AssociationComplianceSeverity2["Unspecified"] = "UNSPECIFIED";
    })(AssociationComplianceSeverity = exports.AssociationComplianceSeverity || (exports.AssociationComplianceSeverity = {}));
    var S3OutputLocation;
    (function(S3OutputLocation2) {
      S3OutputLocation2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(S3OutputLocation = exports.S3OutputLocation || (exports.S3OutputLocation = {}));
    var InstanceAssociationOutputLocation;
    (function(InstanceAssociationOutputLocation2) {
      InstanceAssociationOutputLocation2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(InstanceAssociationOutputLocation = exports.InstanceAssociationOutputLocation || (exports.InstanceAssociationOutputLocation = {}));
    var AssociationSyncCompliance;
    (function(AssociationSyncCompliance2) {
      AssociationSyncCompliance2["Auto"] = "AUTO";
      AssociationSyncCompliance2["Manual"] = "MANUAL";
    })(AssociationSyncCompliance = exports.AssociationSyncCompliance || (exports.AssociationSyncCompliance = {}));
    var TargetLocation;
    (function(TargetLocation2) {
      TargetLocation2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(TargetLocation = exports.TargetLocation || (exports.TargetLocation = {}));
    var Target;
    (function(Target2) {
      Target2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(Target = exports.Target || (exports.Target = {}));
    var CreateAssociationRequest;
    (function(CreateAssociationRequest2) {
      CreateAssociationRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
      });
    })(CreateAssociationRequest = exports.CreateAssociationRequest || (exports.CreateAssociationRequest = {}));
    var AssociationOverview;
    (function(AssociationOverview2) {
      AssociationOverview2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AssociationOverview = exports.AssociationOverview || (exports.AssociationOverview = {}));
    var AssociationStatusName;
    (function(AssociationStatusName2) {
      AssociationStatusName2["Failed"] = "Failed";
      AssociationStatusName2["Pending"] = "Pending";
      AssociationStatusName2["Success"] = "Success";
    })(AssociationStatusName = exports.AssociationStatusName || (exports.AssociationStatusName = {}));
    var AssociationStatus;
    (function(AssociationStatus2) {
      AssociationStatus2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AssociationStatus = exports.AssociationStatus || (exports.AssociationStatus = {}));
    var AssociationDescription;
    (function(AssociationDescription2) {
      AssociationDescription2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
      });
    })(AssociationDescription = exports.AssociationDescription || (exports.AssociationDescription = {}));
    var CreateAssociationResult;
    (function(CreateAssociationResult2) {
      CreateAssociationResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.AssociationDescription && {
          AssociationDescription: AssociationDescription.filterSensitiveLog(obj.AssociationDescription)
        }
      });
    })(CreateAssociationResult = exports.CreateAssociationResult || (exports.CreateAssociationResult = {}));
    var InvalidDocument = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocument",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocument";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocument.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDocument = InvalidDocument;
    var InvalidDocumentVersion = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocumentVersion",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentVersion";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocumentVersion.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDocumentVersion = InvalidDocumentVersion;
    var InvalidOutputLocation = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidOutputLocation",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidOutputLocation";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOutputLocation.prototype);
      }
    };
    exports.InvalidOutputLocation = InvalidOutputLocation;
    var InvalidSchedule = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidSchedule",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidSchedule";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSchedule.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidSchedule = InvalidSchedule;
    var InvalidTarget = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidTarget",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTarget";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTarget.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidTarget = InvalidTarget;
    var InvalidTargetMaps = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidTargetMaps",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTargetMaps";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTargetMaps.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidTargetMaps = InvalidTargetMaps;
    var UnsupportedPlatformType = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedPlatformType",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedPlatformType";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedPlatformType.prototype);
        this.Message = opts.Message;
      }
    };
    exports.UnsupportedPlatformType = UnsupportedPlatformType;
    var CreateAssociationBatchRequestEntry;
    (function(CreateAssociationBatchRequestEntry2) {
      CreateAssociationBatchRequestEntry2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
      });
    })(CreateAssociationBatchRequestEntry = exports.CreateAssociationBatchRequestEntry || (exports.CreateAssociationBatchRequestEntry = {}));
    var CreateAssociationBatchRequest;
    (function(CreateAssociationBatchRequest2) {
      CreateAssociationBatchRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Entries && {
          Entries: obj.Entries.map((item) => CreateAssociationBatchRequestEntry.filterSensitiveLog(item))
        }
      });
    })(CreateAssociationBatchRequest = exports.CreateAssociationBatchRequest || (exports.CreateAssociationBatchRequest = {}));
    var FailedCreateAssociation;
    (function(FailedCreateAssociation2) {
      FailedCreateAssociation2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Entry && { Entry: CreateAssociationBatchRequestEntry.filterSensitiveLog(obj.Entry) }
      });
    })(FailedCreateAssociation = exports.FailedCreateAssociation || (exports.FailedCreateAssociation = {}));
    var CreateAssociationBatchResult;
    (function(CreateAssociationBatchResult2) {
      CreateAssociationBatchResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Successful && {
          Successful: obj.Successful.map((item) => AssociationDescription.filterSensitiveLog(item))
        },
        ...obj.Failed && { Failed: obj.Failed.map((item) => FailedCreateAssociation.filterSensitiveLog(item)) }
      });
    })(CreateAssociationBatchResult = exports.CreateAssociationBatchResult || (exports.CreateAssociationBatchResult = {}));
    var AttachmentsSourceKey;
    (function(AttachmentsSourceKey2) {
      AttachmentsSourceKey2["AttachmentReference"] = "AttachmentReference";
      AttachmentsSourceKey2["S3FileUrl"] = "S3FileUrl";
      AttachmentsSourceKey2["SourceUrl"] = "SourceUrl";
    })(AttachmentsSourceKey = exports.AttachmentsSourceKey || (exports.AttachmentsSourceKey = {}));
    var AttachmentsSource;
    (function(AttachmentsSource2) {
      AttachmentsSource2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AttachmentsSource = exports.AttachmentsSource || (exports.AttachmentsSource = {}));
    var DocumentFormat;
    (function(DocumentFormat2) {
      DocumentFormat2["JSON"] = "JSON";
      DocumentFormat2["TEXT"] = "TEXT";
      DocumentFormat2["YAML"] = "YAML";
    })(DocumentFormat = exports.DocumentFormat || (exports.DocumentFormat = {}));
    var DocumentType;
    (function(DocumentType2) {
      DocumentType2["ApplicationConfiguration"] = "ApplicationConfiguration";
      DocumentType2["ApplicationConfigurationSchema"] = "ApplicationConfigurationSchema";
      DocumentType2["Automation"] = "Automation";
      DocumentType2["ChangeCalendar"] = "ChangeCalendar";
      DocumentType2["ChangeTemplate"] = "Automation.ChangeTemplate";
      DocumentType2["Command"] = "Command";
      DocumentType2["DeploymentStrategy"] = "DeploymentStrategy";
      DocumentType2["Package"] = "Package";
      DocumentType2["Policy"] = "Policy";
      DocumentType2["ProblemAnalysis"] = "ProblemAnalysis";
      DocumentType2["ProblemAnalysisTemplate"] = "ProblemAnalysisTemplate";
      DocumentType2["Session"] = "Session";
    })(DocumentType = exports.DocumentType || (exports.DocumentType = {}));
    var DocumentRequires;
    (function(DocumentRequires2) {
      DocumentRequires2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DocumentRequires = exports.DocumentRequires || (exports.DocumentRequires = {}));
    var CreateDocumentRequest;
    (function(CreateDocumentRequest2) {
      CreateDocumentRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CreateDocumentRequest = exports.CreateDocumentRequest || (exports.CreateDocumentRequest = {}));
    var AttachmentInformation;
    (function(AttachmentInformation2) {
      AttachmentInformation2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AttachmentInformation = exports.AttachmentInformation || (exports.AttachmentInformation = {}));
    var DocumentHashType;
    (function(DocumentHashType2) {
      DocumentHashType2["SHA1"] = "Sha1";
      DocumentHashType2["SHA256"] = "Sha256";
    })(DocumentHashType = exports.DocumentHashType || (exports.DocumentHashType = {}));
    var DocumentParameter;
    (function(DocumentParameter2) {
      DocumentParameter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DocumentParameter = exports.DocumentParameter || (exports.DocumentParameter = {}));
    var PlatformType;
    (function(PlatformType2) {
      PlatformType2["LINUX"] = "Linux";
      PlatformType2["MACOS"] = "MacOS";
      PlatformType2["WINDOWS"] = "Windows";
    })(PlatformType = exports.PlatformType || (exports.PlatformType = {}));
    var ReviewStatus;
    (function(ReviewStatus2) {
      ReviewStatus2["APPROVED"] = "APPROVED";
      ReviewStatus2["NOT_REVIEWED"] = "NOT_REVIEWED";
      ReviewStatus2["PENDING"] = "PENDING";
      ReviewStatus2["REJECTED"] = "REJECTED";
    })(ReviewStatus = exports.ReviewStatus || (exports.ReviewStatus = {}));
    var ReviewInformation;
    (function(ReviewInformation2) {
      ReviewInformation2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ReviewInformation = exports.ReviewInformation || (exports.ReviewInformation = {}));
    var DocumentStatus;
    (function(DocumentStatus2) {
      DocumentStatus2["Active"] = "Active";
      DocumentStatus2["Creating"] = "Creating";
      DocumentStatus2["Deleting"] = "Deleting";
      DocumentStatus2["Failed"] = "Failed";
      DocumentStatus2["Updating"] = "Updating";
    })(DocumentStatus = exports.DocumentStatus || (exports.DocumentStatus = {}));
    var DocumentDescription;
    (function(DocumentDescription2) {
      DocumentDescription2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DocumentDescription = exports.DocumentDescription || (exports.DocumentDescription = {}));
    var CreateDocumentResult;
    (function(CreateDocumentResult2) {
      CreateDocumentResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CreateDocumentResult = exports.CreateDocumentResult || (exports.CreateDocumentResult = {}));
    var DocumentAlreadyExists = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DocumentAlreadyExists",
          $fault: "client",
          ...opts
        });
        this.name = "DocumentAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, DocumentAlreadyExists.prototype);
        this.Message = opts.Message;
      }
    };
    exports.DocumentAlreadyExists = DocumentAlreadyExists;
    var DocumentLimitExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DocumentLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "DocumentLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, DocumentLimitExceeded.prototype);
        this.Message = opts.Message;
      }
    };
    exports.DocumentLimitExceeded = DocumentLimitExceeded;
    var InvalidDocumentContent = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocumentContent",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentContent";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocumentContent.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDocumentContent = InvalidDocumentContent;
    var InvalidDocumentSchemaVersion = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocumentSchemaVersion",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentSchemaVersion";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocumentSchemaVersion.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDocumentSchemaVersion = InvalidDocumentSchemaVersion;
    var MaxDocumentSizeExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "MaxDocumentSizeExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "MaxDocumentSizeExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaxDocumentSizeExceeded.prototype);
        this.Message = opts.Message;
      }
    };
    exports.MaxDocumentSizeExceeded = MaxDocumentSizeExceeded;
    var CreateMaintenanceWindowRequest;
    (function(CreateMaintenanceWindowRequest2) {
      CreateMaintenanceWindowRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
      });
    })(CreateMaintenanceWindowRequest = exports.CreateMaintenanceWindowRequest || (exports.CreateMaintenanceWindowRequest = {}));
    var CreateMaintenanceWindowResult;
    (function(CreateMaintenanceWindowResult2) {
      CreateMaintenanceWindowResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CreateMaintenanceWindowResult = exports.CreateMaintenanceWindowResult || (exports.CreateMaintenanceWindowResult = {}));
    var IdempotentParameterMismatch = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "IdempotentParameterMismatch",
          $fault: "client",
          ...opts
        });
        this.name = "IdempotentParameterMismatch";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdempotentParameterMismatch.prototype);
        this.Message = opts.Message;
      }
    };
    exports.IdempotentParameterMismatch = IdempotentParameterMismatch;
    var ResourceLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ResourceLimitExceededException = ResourceLimitExceededException;
    var OpsItemNotification;
    (function(OpsItemNotification2) {
      OpsItemNotification2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(OpsItemNotification = exports.OpsItemNotification || (exports.OpsItemNotification = {}));
    var OpsItemDataType;
    (function(OpsItemDataType2) {
      OpsItemDataType2["SEARCHABLE_STRING"] = "SearchableString";
      OpsItemDataType2["STRING"] = "String";
    })(OpsItemDataType = exports.OpsItemDataType || (exports.OpsItemDataType = {}));
    var OpsItemDataValue;
    (function(OpsItemDataValue2) {
      OpsItemDataValue2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(OpsItemDataValue = exports.OpsItemDataValue || (exports.OpsItemDataValue = {}));
    var RelatedOpsItem;
    (function(RelatedOpsItem2) {
      RelatedOpsItem2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(RelatedOpsItem = exports.RelatedOpsItem || (exports.RelatedOpsItem = {}));
    var CreateOpsItemRequest;
    (function(CreateOpsItemRequest2) {
      CreateOpsItemRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CreateOpsItemRequest = exports.CreateOpsItemRequest || (exports.CreateOpsItemRequest = {}));
    var CreateOpsItemResponse;
    (function(CreateOpsItemResponse2) {
      CreateOpsItemResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CreateOpsItemResponse = exports.CreateOpsItemResponse || (exports.CreateOpsItemResponse = {}));
    var OpsItemAlreadyExistsException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemAlreadyExistsException.prototype);
        this.Message = opts.Message;
        this.OpsItemId = opts.OpsItemId;
      }
    };
    exports.OpsItemAlreadyExistsException = OpsItemAlreadyExistsException;
    var MetadataValue;
    (function(MetadataValue2) {
      MetadataValue2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(MetadataValue = exports.MetadataValue || (exports.MetadataValue = {}));
    var CreateOpsMetadataRequest;
    (function(CreateOpsMetadataRequest2) {
      CreateOpsMetadataRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CreateOpsMetadataRequest = exports.CreateOpsMetadataRequest || (exports.CreateOpsMetadataRequest = {}));
    var CreateOpsMetadataResult;
    (function(CreateOpsMetadataResult2) {
      CreateOpsMetadataResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CreateOpsMetadataResult = exports.CreateOpsMetadataResult || (exports.CreateOpsMetadataResult = {}));
    var OpsMetadataAlreadyExistsException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataAlreadyExistsException.prototype);
      }
    };
    exports.OpsMetadataAlreadyExistsException = OpsMetadataAlreadyExistsException;
    var OpsMetadataInvalidArgumentException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataInvalidArgumentException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataInvalidArgumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataInvalidArgumentException.prototype);
      }
    };
    exports.OpsMetadataInvalidArgumentException = OpsMetadataInvalidArgumentException;
    var OpsMetadataLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataLimitExceededException.prototype);
      }
    };
    exports.OpsMetadataLimitExceededException = OpsMetadataLimitExceededException;
    var OpsMetadataTooManyUpdatesException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataTooManyUpdatesException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataTooManyUpdatesException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataTooManyUpdatesException.prototype);
      }
    };
    exports.OpsMetadataTooManyUpdatesException = OpsMetadataTooManyUpdatesException;
    var PatchComplianceLevel;
    (function(PatchComplianceLevel2) {
      PatchComplianceLevel2["Critical"] = "CRITICAL";
      PatchComplianceLevel2["High"] = "HIGH";
      PatchComplianceLevel2["Informational"] = "INFORMATIONAL";
      PatchComplianceLevel2["Low"] = "LOW";
      PatchComplianceLevel2["Medium"] = "MEDIUM";
      PatchComplianceLevel2["Unspecified"] = "UNSPECIFIED";
    })(PatchComplianceLevel = exports.PatchComplianceLevel || (exports.PatchComplianceLevel = {}));
    var PatchFilterKey;
    (function(PatchFilterKey2) {
      PatchFilterKey2["AdvisoryId"] = "ADVISORY_ID";
      PatchFilterKey2["Arch"] = "ARCH";
      PatchFilterKey2["BugzillaId"] = "BUGZILLA_ID";
      PatchFilterKey2["CVEId"] = "CVE_ID";
      PatchFilterKey2["Classification"] = "CLASSIFICATION";
      PatchFilterKey2["Epoch"] = "EPOCH";
      PatchFilterKey2["MsrcSeverity"] = "MSRC_SEVERITY";
      PatchFilterKey2["Name"] = "NAME";
      PatchFilterKey2["PatchId"] = "PATCH_ID";
      PatchFilterKey2["PatchSet"] = "PATCH_SET";
      PatchFilterKey2["Priority"] = "PRIORITY";
      PatchFilterKey2["Product"] = "PRODUCT";
      PatchFilterKey2["ProductFamily"] = "PRODUCT_FAMILY";
      PatchFilterKey2["Release"] = "RELEASE";
      PatchFilterKey2["Repository"] = "REPOSITORY";
      PatchFilterKey2["Section"] = "SECTION";
      PatchFilterKey2["Security"] = "SECURITY";
      PatchFilterKey2["Severity"] = "SEVERITY";
      PatchFilterKey2["Version"] = "VERSION";
    })(PatchFilterKey = exports.PatchFilterKey || (exports.PatchFilterKey = {}));
    var PatchFilter;
    (function(PatchFilter2) {
      PatchFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(PatchFilter = exports.PatchFilter || (exports.PatchFilter = {}));
    var PatchFilterGroup;
    (function(PatchFilterGroup2) {
      PatchFilterGroup2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(PatchFilterGroup = exports.PatchFilterGroup || (exports.PatchFilterGroup = {}));
    var PatchRule;
    (function(PatchRule2) {
      PatchRule2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(PatchRule = exports.PatchRule || (exports.PatchRule = {}));
    var PatchRuleGroup;
    (function(PatchRuleGroup2) {
      PatchRuleGroup2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(PatchRuleGroup = exports.PatchRuleGroup || (exports.PatchRuleGroup = {}));
    var OperatingSystem;
    (function(OperatingSystem2) {
      OperatingSystem2["AmazonLinux"] = "AMAZON_LINUX";
      OperatingSystem2["AmazonLinux2"] = "AMAZON_LINUX_2";
      OperatingSystem2["CentOS"] = "CENTOS";
      OperatingSystem2["Debian"] = "DEBIAN";
      OperatingSystem2["MacOS"] = "MACOS";
      OperatingSystem2["OracleLinux"] = "ORACLE_LINUX";
      OperatingSystem2["Raspbian"] = "RASPBIAN";
      OperatingSystem2["RedhatEnterpriseLinux"] = "REDHAT_ENTERPRISE_LINUX";
      OperatingSystem2["Rocky_Linux"] = "ROCKY_LINUX";
      OperatingSystem2["Suse"] = "SUSE";
      OperatingSystem2["Ubuntu"] = "UBUNTU";
      OperatingSystem2["Windows"] = "WINDOWS";
    })(OperatingSystem = exports.OperatingSystem || (exports.OperatingSystem = {}));
    var PatchAction;
    (function(PatchAction2) {
      PatchAction2["AllowAsDependency"] = "ALLOW_AS_DEPENDENCY";
      PatchAction2["Block"] = "BLOCK";
    })(PatchAction = exports.PatchAction || (exports.PatchAction = {}));
    var PatchSource;
    (function(PatchSource2) {
      PatchSource2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Configuration && { Configuration: smithy_client_1.SENSITIVE_STRING }
      });
    })(PatchSource = exports.PatchSource || (exports.PatchSource = {}));
    var CreatePatchBaselineRequest;
    (function(CreatePatchBaselineRequest2) {
      CreatePatchBaselineRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Sources && { Sources: obj.Sources.map((item) => PatchSource.filterSensitiveLog(item)) }
      });
    })(CreatePatchBaselineRequest = exports.CreatePatchBaselineRequest || (exports.CreatePatchBaselineRequest = {}));
    var CreatePatchBaselineResult;
    (function(CreatePatchBaselineResult2) {
      CreatePatchBaselineResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CreatePatchBaselineResult = exports.CreatePatchBaselineResult || (exports.CreatePatchBaselineResult = {}));
    var ResourceDataSyncDestinationDataSharing;
    (function(ResourceDataSyncDestinationDataSharing2) {
      ResourceDataSyncDestinationDataSharing2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ResourceDataSyncDestinationDataSharing = exports.ResourceDataSyncDestinationDataSharing || (exports.ResourceDataSyncDestinationDataSharing = {}));
    var ResourceDataSyncS3Format;
    (function(ResourceDataSyncS3Format2) {
      ResourceDataSyncS3Format2["JSON_SERDE"] = "JsonSerDe";
    })(ResourceDataSyncS3Format = exports.ResourceDataSyncS3Format || (exports.ResourceDataSyncS3Format = {}));
    var ResourceDataSyncS3Destination;
    (function(ResourceDataSyncS3Destination2) {
      ResourceDataSyncS3Destination2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ResourceDataSyncS3Destination = exports.ResourceDataSyncS3Destination || (exports.ResourceDataSyncS3Destination = {}));
    var ResourceDataSyncOrganizationalUnit;
    (function(ResourceDataSyncOrganizationalUnit2) {
      ResourceDataSyncOrganizationalUnit2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ResourceDataSyncOrganizationalUnit = exports.ResourceDataSyncOrganizationalUnit || (exports.ResourceDataSyncOrganizationalUnit = {}));
    var ResourceDataSyncAwsOrganizationsSource;
    (function(ResourceDataSyncAwsOrganizationsSource2) {
      ResourceDataSyncAwsOrganizationsSource2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ResourceDataSyncAwsOrganizationsSource = exports.ResourceDataSyncAwsOrganizationsSource || (exports.ResourceDataSyncAwsOrganizationsSource = {}));
    var ResourceDataSyncSource;
    (function(ResourceDataSyncSource2) {
      ResourceDataSyncSource2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ResourceDataSyncSource = exports.ResourceDataSyncSource || (exports.ResourceDataSyncSource = {}));
    var CreateResourceDataSyncRequest;
    (function(CreateResourceDataSyncRequest2) {
      CreateResourceDataSyncRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CreateResourceDataSyncRequest = exports.CreateResourceDataSyncRequest || (exports.CreateResourceDataSyncRequest = {}));
    var CreateResourceDataSyncResult;
    (function(CreateResourceDataSyncResult2) {
      CreateResourceDataSyncResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CreateResourceDataSyncResult = exports.CreateResourceDataSyncResult || (exports.CreateResourceDataSyncResult = {}));
    var ResourceDataSyncAlreadyExistsException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceDataSyncAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceDataSyncAlreadyExistsException.prototype);
        this.SyncName = opts.SyncName;
      }
    };
    exports.ResourceDataSyncAlreadyExistsException = ResourceDataSyncAlreadyExistsException;
    var ResourceDataSyncCountExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceDataSyncCountExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncCountExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceDataSyncCountExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ResourceDataSyncCountExceededException = ResourceDataSyncCountExceededException;
    var ResourceDataSyncInvalidConfigurationException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceDataSyncInvalidConfigurationException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncInvalidConfigurationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceDataSyncInvalidConfigurationException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ResourceDataSyncInvalidConfigurationException = ResourceDataSyncInvalidConfigurationException;
    var DeleteActivationRequest;
    (function(DeleteActivationRequest2) {
      DeleteActivationRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeleteActivationRequest = exports.DeleteActivationRequest || (exports.DeleteActivationRequest = {}));
    var DeleteActivationResult;
    (function(DeleteActivationResult2) {
      DeleteActivationResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeleteActivationResult = exports.DeleteActivationResult || (exports.DeleteActivationResult = {}));
    var InvalidActivation = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidActivation",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidActivation";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidActivation.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidActivation = InvalidActivation;
    var InvalidActivationId = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidActivationId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidActivationId";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidActivationId.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidActivationId = InvalidActivationId;
    var AssociationDoesNotExist = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociationDoesNotExist",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationDoesNotExist";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociationDoesNotExist.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AssociationDoesNotExist = AssociationDoesNotExist;
    var DeleteAssociationRequest;
    (function(DeleteAssociationRequest2) {
      DeleteAssociationRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeleteAssociationRequest = exports.DeleteAssociationRequest || (exports.DeleteAssociationRequest = {}));
    var DeleteAssociationResult;
    (function(DeleteAssociationResult2) {
      DeleteAssociationResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeleteAssociationResult = exports.DeleteAssociationResult || (exports.DeleteAssociationResult = {}));
    var AssociatedInstances = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociatedInstances",
          $fault: "client",
          ...opts
        });
        this.name = "AssociatedInstances";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociatedInstances.prototype);
      }
    };
    exports.AssociatedInstances = AssociatedInstances;
    var DeleteDocumentRequest;
    (function(DeleteDocumentRequest2) {
      DeleteDocumentRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeleteDocumentRequest = exports.DeleteDocumentRequest || (exports.DeleteDocumentRequest = {}));
    var DeleteDocumentResult;
    (function(DeleteDocumentResult2) {
      DeleteDocumentResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeleteDocumentResult = exports.DeleteDocumentResult || (exports.DeleteDocumentResult = {}));
    var InvalidDocumentOperation = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocumentOperation",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentOperation";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocumentOperation.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDocumentOperation = InvalidDocumentOperation;
    var InventorySchemaDeleteOption;
    (function(InventorySchemaDeleteOption2) {
      InventorySchemaDeleteOption2["DELETE_SCHEMA"] = "DeleteSchema";
      InventorySchemaDeleteOption2["DISABLE_SCHEMA"] = "DisableSchema";
    })(InventorySchemaDeleteOption = exports.InventorySchemaDeleteOption || (exports.InventorySchemaDeleteOption = {}));
    var DeleteInventoryRequest;
    (function(DeleteInventoryRequest2) {
      DeleteInventoryRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeleteInventoryRequest = exports.DeleteInventoryRequest || (exports.DeleteInventoryRequest = {}));
    var InventoryDeletionSummaryItem;
    (function(InventoryDeletionSummaryItem2) {
      InventoryDeletionSummaryItem2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(InventoryDeletionSummaryItem = exports.InventoryDeletionSummaryItem || (exports.InventoryDeletionSummaryItem = {}));
    var InventoryDeletionSummary;
    (function(InventoryDeletionSummary2) {
      InventoryDeletionSummary2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(InventoryDeletionSummary = exports.InventoryDeletionSummary || (exports.InventoryDeletionSummary = {}));
    var DeleteInventoryResult;
    (function(DeleteInventoryResult2) {
      DeleteInventoryResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeleteInventoryResult = exports.DeleteInventoryResult || (exports.DeleteInventoryResult = {}));
    var InvalidDeleteInventoryParametersException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDeleteInventoryParametersException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDeleteInventoryParametersException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeleteInventoryParametersException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDeleteInventoryParametersException = InvalidDeleteInventoryParametersException;
    var InvalidInventoryRequestException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidInventoryRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInventoryRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInventoryRequestException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidInventoryRequestException = InvalidInventoryRequestException;
    var InvalidOptionException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidOptionException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidOptionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOptionException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidOptionException = InvalidOptionException;
    var InvalidTypeNameException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidTypeNameException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTypeNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTypeNameException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidTypeNameException = InvalidTypeNameException;
    var DeleteMaintenanceWindowRequest;
    (function(DeleteMaintenanceWindowRequest2) {
      DeleteMaintenanceWindowRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeleteMaintenanceWindowRequest = exports.DeleteMaintenanceWindowRequest || (exports.DeleteMaintenanceWindowRequest = {}));
    var DeleteMaintenanceWindowResult;
    (function(DeleteMaintenanceWindowResult2) {
      DeleteMaintenanceWindowResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeleteMaintenanceWindowResult = exports.DeleteMaintenanceWindowResult || (exports.DeleteMaintenanceWindowResult = {}));
    var DeleteOpsMetadataRequest;
    (function(DeleteOpsMetadataRequest2) {
      DeleteOpsMetadataRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeleteOpsMetadataRequest = exports.DeleteOpsMetadataRequest || (exports.DeleteOpsMetadataRequest = {}));
    var DeleteOpsMetadataResult;
    (function(DeleteOpsMetadataResult2) {
      DeleteOpsMetadataResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeleteOpsMetadataResult = exports.DeleteOpsMetadataResult || (exports.DeleteOpsMetadataResult = {}));
    var OpsMetadataNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataNotFoundException.prototype);
      }
    };
    exports.OpsMetadataNotFoundException = OpsMetadataNotFoundException;
    var DeleteParameterRequest;
    (function(DeleteParameterRequest2) {
      DeleteParameterRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeleteParameterRequest = exports.DeleteParameterRequest || (exports.DeleteParameterRequest = {}));
    var DeleteParameterResult;
    (function(DeleteParameterResult2) {
      DeleteParameterResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeleteParameterResult = exports.DeleteParameterResult || (exports.DeleteParameterResult = {}));
    var ParameterNotFound = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterNotFound",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterNotFound.prototype);
      }
    };
    exports.ParameterNotFound = ParameterNotFound;
    var DeleteParametersRequest;
    (function(DeleteParametersRequest2) {
      DeleteParametersRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeleteParametersRequest = exports.DeleteParametersRequest || (exports.DeleteParametersRequest = {}));
    var DeleteParametersResult;
    (function(DeleteParametersResult2) {
      DeleteParametersResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeleteParametersResult = exports.DeleteParametersResult || (exports.DeleteParametersResult = {}));
    var DeletePatchBaselineRequest;
    (function(DeletePatchBaselineRequest2) {
      DeletePatchBaselineRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeletePatchBaselineRequest = exports.DeletePatchBaselineRequest || (exports.DeletePatchBaselineRequest = {}));
    var DeletePatchBaselineResult;
    (function(DeletePatchBaselineResult2) {
      DeletePatchBaselineResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeletePatchBaselineResult = exports.DeletePatchBaselineResult || (exports.DeletePatchBaselineResult = {}));
    var ResourceInUseException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceInUseException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ResourceInUseException = ResourceInUseException;
    var DeleteResourceDataSyncRequest;
    (function(DeleteResourceDataSyncRequest2) {
      DeleteResourceDataSyncRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeleteResourceDataSyncRequest = exports.DeleteResourceDataSyncRequest || (exports.DeleteResourceDataSyncRequest = {}));
    var DeleteResourceDataSyncResult;
    (function(DeleteResourceDataSyncResult2) {
      DeleteResourceDataSyncResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeleteResourceDataSyncResult = exports.DeleteResourceDataSyncResult || (exports.DeleteResourceDataSyncResult = {}));
    var ResourceDataSyncNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceDataSyncNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceDataSyncNotFoundException.prototype);
        this.SyncName = opts.SyncName;
        this.SyncType = opts.SyncType;
        this.Message = opts.Message;
      }
    };
    exports.ResourceDataSyncNotFoundException = ResourceDataSyncNotFoundException;
    var DeregisterManagedInstanceRequest;
    (function(DeregisterManagedInstanceRequest2) {
      DeregisterManagedInstanceRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeregisterManagedInstanceRequest = exports.DeregisterManagedInstanceRequest || (exports.DeregisterManagedInstanceRequest = {}));
    var DeregisterManagedInstanceResult;
    (function(DeregisterManagedInstanceResult2) {
      DeregisterManagedInstanceResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeregisterManagedInstanceResult = exports.DeregisterManagedInstanceResult || (exports.DeregisterManagedInstanceResult = {}));
    var DeregisterPatchBaselineForPatchGroupRequest;
    (function(DeregisterPatchBaselineForPatchGroupRequest2) {
      DeregisterPatchBaselineForPatchGroupRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeregisterPatchBaselineForPatchGroupRequest = exports.DeregisterPatchBaselineForPatchGroupRequest || (exports.DeregisterPatchBaselineForPatchGroupRequest = {}));
    var DeregisterPatchBaselineForPatchGroupResult;
    (function(DeregisterPatchBaselineForPatchGroupResult2) {
      DeregisterPatchBaselineForPatchGroupResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeregisterPatchBaselineForPatchGroupResult = exports.DeregisterPatchBaselineForPatchGroupResult || (exports.DeregisterPatchBaselineForPatchGroupResult = {}));
    var DeregisterTargetFromMaintenanceWindowRequest;
    (function(DeregisterTargetFromMaintenanceWindowRequest2) {
      DeregisterTargetFromMaintenanceWindowRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeregisterTargetFromMaintenanceWindowRequest = exports.DeregisterTargetFromMaintenanceWindowRequest || (exports.DeregisterTargetFromMaintenanceWindowRequest = {}));
    var DeregisterTargetFromMaintenanceWindowResult;
    (function(DeregisterTargetFromMaintenanceWindowResult2) {
      DeregisterTargetFromMaintenanceWindowResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeregisterTargetFromMaintenanceWindowResult = exports.DeregisterTargetFromMaintenanceWindowResult || (exports.DeregisterTargetFromMaintenanceWindowResult = {}));
    var TargetInUseException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "TargetInUseException",
          $fault: "client",
          ...opts
        });
        this.name = "TargetInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TargetInUseException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.TargetInUseException = TargetInUseException;
    var DeregisterTaskFromMaintenanceWindowRequest;
    (function(DeregisterTaskFromMaintenanceWindowRequest2) {
      DeregisterTaskFromMaintenanceWindowRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeregisterTaskFromMaintenanceWindowRequest = exports.DeregisterTaskFromMaintenanceWindowRequest || (exports.DeregisterTaskFromMaintenanceWindowRequest = {}));
    var DeregisterTaskFromMaintenanceWindowResult;
    (function(DeregisterTaskFromMaintenanceWindowResult2) {
      DeregisterTaskFromMaintenanceWindowResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DeregisterTaskFromMaintenanceWindowResult = exports.DeregisterTaskFromMaintenanceWindowResult || (exports.DeregisterTaskFromMaintenanceWindowResult = {}));
    var DescribeActivationsFilterKeys;
    (function(DescribeActivationsFilterKeys2) {
      DescribeActivationsFilterKeys2["ACTIVATION_IDS"] = "ActivationIds";
      DescribeActivationsFilterKeys2["DEFAULT_INSTANCE_NAME"] = "DefaultInstanceName";
      DescribeActivationsFilterKeys2["IAM_ROLE"] = "IamRole";
    })(DescribeActivationsFilterKeys = exports.DescribeActivationsFilterKeys || (exports.DescribeActivationsFilterKeys = {}));
    var DescribeActivationsFilter;
    (function(DescribeActivationsFilter2) {
      DescribeActivationsFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeActivationsFilter = exports.DescribeActivationsFilter || (exports.DescribeActivationsFilter = {}));
    var DescribeActivationsRequest;
    (function(DescribeActivationsRequest2) {
      DescribeActivationsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeActivationsRequest = exports.DescribeActivationsRequest || (exports.DescribeActivationsRequest = {}));
    var DescribeActivationsResult;
    (function(DescribeActivationsResult2) {
      DescribeActivationsResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeActivationsResult = exports.DescribeActivationsResult || (exports.DescribeActivationsResult = {}));
    var InvalidFilter = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidFilter",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidFilter";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFilter.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidFilter = InvalidFilter;
    var InvalidNextToken = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidNextToken",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidNextToken";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextToken.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidNextToken = InvalidNextToken;
    var DescribeAssociationRequest;
    (function(DescribeAssociationRequest2) {
      DescribeAssociationRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeAssociationRequest = exports.DescribeAssociationRequest || (exports.DescribeAssociationRequest = {}));
    var DescribeAssociationResult;
    (function(DescribeAssociationResult2) {
      DescribeAssociationResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.AssociationDescription && {
          AssociationDescription: AssociationDescription.filterSensitiveLog(obj.AssociationDescription)
        }
      });
    })(DescribeAssociationResult = exports.DescribeAssociationResult || (exports.DescribeAssociationResult = {}));
    var InvalidAssociationVersion = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAssociationVersion",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAssociationVersion";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAssociationVersion.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidAssociationVersion = InvalidAssociationVersion;
    var AssociationExecutionFilterKey;
    (function(AssociationExecutionFilterKey2) {
      AssociationExecutionFilterKey2["CreatedTime"] = "CreatedTime";
      AssociationExecutionFilterKey2["ExecutionId"] = "ExecutionId";
      AssociationExecutionFilterKey2["Status"] = "Status";
    })(AssociationExecutionFilterKey = exports.AssociationExecutionFilterKey || (exports.AssociationExecutionFilterKey = {}));
    var AssociationFilterOperatorType;
    (function(AssociationFilterOperatorType2) {
      AssociationFilterOperatorType2["Equal"] = "EQUAL";
      AssociationFilterOperatorType2["GreaterThan"] = "GREATER_THAN";
      AssociationFilterOperatorType2["LessThan"] = "LESS_THAN";
    })(AssociationFilterOperatorType = exports.AssociationFilterOperatorType || (exports.AssociationFilterOperatorType = {}));
    var AssociationExecutionFilter;
    (function(AssociationExecutionFilter2) {
      AssociationExecutionFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AssociationExecutionFilter = exports.AssociationExecutionFilter || (exports.AssociationExecutionFilter = {}));
    var DescribeAssociationExecutionsRequest;
    (function(DescribeAssociationExecutionsRequest2) {
      DescribeAssociationExecutionsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeAssociationExecutionsRequest = exports.DescribeAssociationExecutionsRequest || (exports.DescribeAssociationExecutionsRequest = {}));
    var AssociationExecution;
    (function(AssociationExecution2) {
      AssociationExecution2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AssociationExecution = exports.AssociationExecution || (exports.AssociationExecution = {}));
    var DescribeAssociationExecutionsResult;
    (function(DescribeAssociationExecutionsResult2) {
      DescribeAssociationExecutionsResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeAssociationExecutionsResult = exports.DescribeAssociationExecutionsResult || (exports.DescribeAssociationExecutionsResult = {}));
    var AssociationExecutionDoesNotExist = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociationExecutionDoesNotExist",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationExecutionDoesNotExist";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociationExecutionDoesNotExist.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AssociationExecutionDoesNotExist = AssociationExecutionDoesNotExist;
    var AssociationExecutionTargetsFilterKey;
    (function(AssociationExecutionTargetsFilterKey2) {
      AssociationExecutionTargetsFilterKey2["ResourceId"] = "ResourceId";
      AssociationExecutionTargetsFilterKey2["ResourceType"] = "ResourceType";
      AssociationExecutionTargetsFilterKey2["Status"] = "Status";
    })(AssociationExecutionTargetsFilterKey = exports.AssociationExecutionTargetsFilterKey || (exports.AssociationExecutionTargetsFilterKey = {}));
    var AssociationExecutionTargetsFilter;
    (function(AssociationExecutionTargetsFilter2) {
      AssociationExecutionTargetsFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AssociationExecutionTargetsFilter = exports.AssociationExecutionTargetsFilter || (exports.AssociationExecutionTargetsFilter = {}));
    var DescribeAssociationExecutionTargetsRequest;
    (function(DescribeAssociationExecutionTargetsRequest2) {
      DescribeAssociationExecutionTargetsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeAssociationExecutionTargetsRequest = exports.DescribeAssociationExecutionTargetsRequest || (exports.DescribeAssociationExecutionTargetsRequest = {}));
    var OutputSource;
    (function(OutputSource2) {
      OutputSource2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(OutputSource = exports.OutputSource || (exports.OutputSource = {}));
    var AssociationExecutionTarget;
    (function(AssociationExecutionTarget2) {
      AssociationExecutionTarget2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AssociationExecutionTarget = exports.AssociationExecutionTarget || (exports.AssociationExecutionTarget = {}));
    var DescribeAssociationExecutionTargetsResult;
    (function(DescribeAssociationExecutionTargetsResult2) {
      DescribeAssociationExecutionTargetsResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeAssociationExecutionTargetsResult = exports.DescribeAssociationExecutionTargetsResult || (exports.DescribeAssociationExecutionTargetsResult = {}));
    var AutomationExecutionFilterKey;
    (function(AutomationExecutionFilterKey2) {
      AutomationExecutionFilterKey2["AUTOMATION_SUBTYPE"] = "AutomationSubtype";
      AutomationExecutionFilterKey2["AUTOMATION_TYPE"] = "AutomationType";
      AutomationExecutionFilterKey2["CURRENT_ACTION"] = "CurrentAction";
      AutomationExecutionFilterKey2["DOCUMENT_NAME_PREFIX"] = "DocumentNamePrefix";
      AutomationExecutionFilterKey2["EXECUTION_ID"] = "ExecutionId";
      AutomationExecutionFilterKey2["EXECUTION_STATUS"] = "ExecutionStatus";
      AutomationExecutionFilterKey2["OPS_ITEM_ID"] = "OpsItemId";
      AutomationExecutionFilterKey2["PARENT_EXECUTION_ID"] = "ParentExecutionId";
      AutomationExecutionFilterKey2["START_TIME_AFTER"] = "StartTimeAfter";
      AutomationExecutionFilterKey2["START_TIME_BEFORE"] = "StartTimeBefore";
      AutomationExecutionFilterKey2["TAG_KEY"] = "TagKey";
      AutomationExecutionFilterKey2["TARGET_RESOURCE_GROUP"] = "TargetResourceGroup";
    })(AutomationExecutionFilterKey = exports.AutomationExecutionFilterKey || (exports.AutomationExecutionFilterKey = {}));
    var AutomationExecutionFilter;
    (function(AutomationExecutionFilter2) {
      AutomationExecutionFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AutomationExecutionFilter = exports.AutomationExecutionFilter || (exports.AutomationExecutionFilter = {}));
    var DescribeAutomationExecutionsRequest;
    (function(DescribeAutomationExecutionsRequest2) {
      DescribeAutomationExecutionsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeAutomationExecutionsRequest = exports.DescribeAutomationExecutionsRequest || (exports.DescribeAutomationExecutionsRequest = {}));
    var AutomationExecutionStatus;
    (function(AutomationExecutionStatus2) {
      AutomationExecutionStatus2["APPROVED"] = "Approved";
      AutomationExecutionStatus2["CANCELLED"] = "Cancelled";
      AutomationExecutionStatus2["CANCELLING"] = "Cancelling";
      AutomationExecutionStatus2["CHANGE_CALENDAR_OVERRIDE_APPROVED"] = "ChangeCalendarOverrideApproved";
      AutomationExecutionStatus2["CHANGE_CALENDAR_OVERRIDE_REJECTED"] = "ChangeCalendarOverrideRejected";
      AutomationExecutionStatus2["COMPLETED_WITH_FAILURE"] = "CompletedWithFailure";
      AutomationExecutionStatus2["COMPLETED_WITH_SUCCESS"] = "CompletedWithSuccess";
      AutomationExecutionStatus2["FAILED"] = "Failed";
      AutomationExecutionStatus2["INPROGRESS"] = "InProgress";
      AutomationExecutionStatus2["PENDING"] = "Pending";
      AutomationExecutionStatus2["PENDING_APPROVAL"] = "PendingApproval";
      AutomationExecutionStatus2["PENDING_CHANGE_CALENDAR_OVERRIDE"] = "PendingChangeCalendarOverride";
      AutomationExecutionStatus2["REJECTED"] = "Rejected";
      AutomationExecutionStatus2["RUNBOOK_INPROGRESS"] = "RunbookInProgress";
      AutomationExecutionStatus2["SCHEDULED"] = "Scheduled";
      AutomationExecutionStatus2["SUCCESS"] = "Success";
      AutomationExecutionStatus2["TIMEDOUT"] = "TimedOut";
      AutomationExecutionStatus2["WAITING"] = "Waiting";
    })(AutomationExecutionStatus = exports.AutomationExecutionStatus || (exports.AutomationExecutionStatus = {}));
    var AutomationSubtype;
    (function(AutomationSubtype2) {
      AutomationSubtype2["ChangeRequest"] = "ChangeRequest";
    })(AutomationSubtype = exports.AutomationSubtype || (exports.AutomationSubtype = {}));
    var AutomationType;
    (function(AutomationType2) {
      AutomationType2["CrossAccount"] = "CrossAccount";
      AutomationType2["Local"] = "Local";
    })(AutomationType = exports.AutomationType || (exports.AutomationType = {}));
    var ExecutionMode;
    (function(ExecutionMode2) {
      ExecutionMode2["Auto"] = "Auto";
      ExecutionMode2["Interactive"] = "Interactive";
    })(ExecutionMode = exports.ExecutionMode || (exports.ExecutionMode = {}));
    var ResolvedTargets;
    (function(ResolvedTargets2) {
      ResolvedTargets2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ResolvedTargets = exports.ResolvedTargets || (exports.ResolvedTargets = {}));
    var Runbook;
    (function(Runbook2) {
      Runbook2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(Runbook = exports.Runbook || (exports.Runbook = {}));
    var AutomationExecutionMetadata;
    (function(AutomationExecutionMetadata2) {
      AutomationExecutionMetadata2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AutomationExecutionMetadata = exports.AutomationExecutionMetadata || (exports.AutomationExecutionMetadata = {}));
    var DescribeAutomationExecutionsResult;
    (function(DescribeAutomationExecutionsResult2) {
      DescribeAutomationExecutionsResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeAutomationExecutionsResult = exports.DescribeAutomationExecutionsResult || (exports.DescribeAutomationExecutionsResult = {}));
    var InvalidFilterKey = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidFilterKey",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidFilterKey";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFilterKey.prototype);
      }
    };
    exports.InvalidFilterKey = InvalidFilterKey;
    var InvalidFilterValue = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidFilterValue",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidFilterValue";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFilterValue.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidFilterValue = InvalidFilterValue;
    var AutomationExecutionNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationExecutionNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationExecutionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationExecutionNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AutomationExecutionNotFoundException = AutomationExecutionNotFoundException;
    var StepExecutionFilterKey;
    (function(StepExecutionFilterKey2) {
      StepExecutionFilterKey2["ACTION"] = "Action";
      StepExecutionFilterKey2["START_TIME_AFTER"] = "StartTimeAfter";
      StepExecutionFilterKey2["START_TIME_BEFORE"] = "StartTimeBefore";
      StepExecutionFilterKey2["STEP_EXECUTION_ID"] = "StepExecutionId";
      StepExecutionFilterKey2["STEP_EXECUTION_STATUS"] = "StepExecutionStatus";
      StepExecutionFilterKey2["STEP_NAME"] = "StepName";
    })(StepExecutionFilterKey = exports.StepExecutionFilterKey || (exports.StepExecutionFilterKey = {}));
    var StepExecutionFilter;
    (function(StepExecutionFilter2) {
      StepExecutionFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(StepExecutionFilter = exports.StepExecutionFilter || (exports.StepExecutionFilter = {}));
    var DescribeAutomationStepExecutionsRequest;
    (function(DescribeAutomationStepExecutionsRequest2) {
      DescribeAutomationStepExecutionsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeAutomationStepExecutionsRequest = exports.DescribeAutomationStepExecutionsRequest || (exports.DescribeAutomationStepExecutionsRequest = {}));
    var FailureDetails;
    (function(FailureDetails2) {
      FailureDetails2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(FailureDetails = exports.FailureDetails || (exports.FailureDetails = {}));
    var StepExecution;
    (function(StepExecution2) {
      StepExecution2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(StepExecution = exports.StepExecution || (exports.StepExecution = {}));
    var DescribeAutomationStepExecutionsResult;
    (function(DescribeAutomationStepExecutionsResult2) {
      DescribeAutomationStepExecutionsResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeAutomationStepExecutionsResult = exports.DescribeAutomationStepExecutionsResult || (exports.DescribeAutomationStepExecutionsResult = {}));
    var PatchOrchestratorFilter;
    (function(PatchOrchestratorFilter2) {
      PatchOrchestratorFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(PatchOrchestratorFilter = exports.PatchOrchestratorFilter || (exports.PatchOrchestratorFilter = {}));
    var DescribeAvailablePatchesRequest;
    (function(DescribeAvailablePatchesRequest2) {
      DescribeAvailablePatchesRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeAvailablePatchesRequest = exports.DescribeAvailablePatchesRequest || (exports.DescribeAvailablePatchesRequest = {}));
    var Patch;
    (function(Patch2) {
      Patch2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(Patch = exports.Patch || (exports.Patch = {}));
    var DescribeAvailablePatchesResult;
    (function(DescribeAvailablePatchesResult2) {
      DescribeAvailablePatchesResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeAvailablePatchesResult = exports.DescribeAvailablePatchesResult || (exports.DescribeAvailablePatchesResult = {}));
    var DescribeDocumentRequest;
    (function(DescribeDocumentRequest2) {
      DescribeDocumentRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeDocumentRequest = exports.DescribeDocumentRequest || (exports.DescribeDocumentRequest = {}));
    var DescribeDocumentResult;
    (function(DescribeDocumentResult2) {
      DescribeDocumentResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeDocumentResult = exports.DescribeDocumentResult || (exports.DescribeDocumentResult = {}));
    var DocumentPermissionType;
    (function(DocumentPermissionType2) {
      DocumentPermissionType2["SHARE"] = "Share";
    })(DocumentPermissionType = exports.DocumentPermissionType || (exports.DocumentPermissionType = {}));
    var DescribeDocumentPermissionRequest;
    (function(DescribeDocumentPermissionRequest2) {
      DescribeDocumentPermissionRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeDocumentPermissionRequest = exports.DescribeDocumentPermissionRequest || (exports.DescribeDocumentPermissionRequest = {}));
    var DescribeDocumentPermissionResponse;
    (function(DescribeDocumentPermissionResponse2) {
      DescribeDocumentPermissionResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeDocumentPermissionResponse = exports.DescribeDocumentPermissionResponse || (exports.DescribeDocumentPermissionResponse = {}));
    var InvalidPermissionType = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidPermissionType",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidPermissionType";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPermissionType.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidPermissionType = InvalidPermissionType;
    var DescribeEffectiveInstanceAssociationsRequest;
    (function(DescribeEffectiveInstanceAssociationsRequest2) {
      DescribeEffectiveInstanceAssociationsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeEffectiveInstanceAssociationsRequest = exports.DescribeEffectiveInstanceAssociationsRequest || (exports.DescribeEffectiveInstanceAssociationsRequest = {}));
    var InstanceAssociation;
    (function(InstanceAssociation2) {
      InstanceAssociation2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(InstanceAssociation = exports.InstanceAssociation || (exports.InstanceAssociation = {}));
    var DescribeEffectiveInstanceAssociationsResult;
    (function(DescribeEffectiveInstanceAssociationsResult2) {
      DescribeEffectiveInstanceAssociationsResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeEffectiveInstanceAssociationsResult = exports.DescribeEffectiveInstanceAssociationsResult || (exports.DescribeEffectiveInstanceAssociationsResult = {}));
    var DescribeEffectivePatchesForPatchBaselineRequest;
    (function(DescribeEffectivePatchesForPatchBaselineRequest2) {
      DescribeEffectivePatchesForPatchBaselineRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeEffectivePatchesForPatchBaselineRequest = exports.DescribeEffectivePatchesForPatchBaselineRequest || (exports.DescribeEffectivePatchesForPatchBaselineRequest = {}));
    var PatchDeploymentStatus;
    (function(PatchDeploymentStatus2) {
      PatchDeploymentStatus2["Approved"] = "APPROVED";
      PatchDeploymentStatus2["ExplicitApproved"] = "EXPLICIT_APPROVED";
      PatchDeploymentStatus2["ExplicitRejected"] = "EXPLICIT_REJECTED";
      PatchDeploymentStatus2["PendingApproval"] = "PENDING_APPROVAL";
    })(PatchDeploymentStatus = exports.PatchDeploymentStatus || (exports.PatchDeploymentStatus = {}));
    var PatchStatus;
    (function(PatchStatus2) {
      PatchStatus2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(PatchStatus = exports.PatchStatus || (exports.PatchStatus = {}));
    var EffectivePatch;
    (function(EffectivePatch2) {
      EffectivePatch2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(EffectivePatch = exports.EffectivePatch || (exports.EffectivePatch = {}));
    var DescribeEffectivePatchesForPatchBaselineResult;
    (function(DescribeEffectivePatchesForPatchBaselineResult2) {
      DescribeEffectivePatchesForPatchBaselineResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeEffectivePatchesForPatchBaselineResult = exports.DescribeEffectivePatchesForPatchBaselineResult || (exports.DescribeEffectivePatchesForPatchBaselineResult = {}));
    var UnsupportedOperatingSystem = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedOperatingSystem",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedOperatingSystem";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedOperatingSystem.prototype);
        this.Message = opts.Message;
      }
    };
    exports.UnsupportedOperatingSystem = UnsupportedOperatingSystem;
    var DescribeInstanceAssociationsStatusRequest;
    (function(DescribeInstanceAssociationsStatusRequest2) {
      DescribeInstanceAssociationsStatusRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeInstanceAssociationsStatusRequest = exports.DescribeInstanceAssociationsStatusRequest || (exports.DescribeInstanceAssociationsStatusRequest = {}));
    var S3OutputUrl;
    (function(S3OutputUrl2) {
      S3OutputUrl2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(S3OutputUrl = exports.S3OutputUrl || (exports.S3OutputUrl = {}));
    var InstanceAssociationOutputUrl;
    (function(InstanceAssociationOutputUrl2) {
      InstanceAssociationOutputUrl2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(InstanceAssociationOutputUrl = exports.InstanceAssociationOutputUrl || (exports.InstanceAssociationOutputUrl = {}));
    var InstanceAssociationStatusInfo;
    (function(InstanceAssociationStatusInfo2) {
      InstanceAssociationStatusInfo2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(InstanceAssociationStatusInfo = exports.InstanceAssociationStatusInfo || (exports.InstanceAssociationStatusInfo = {}));
    var DescribeInstanceAssociationsStatusResult;
    (function(DescribeInstanceAssociationsStatusResult2) {
      DescribeInstanceAssociationsStatusResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeInstanceAssociationsStatusResult = exports.DescribeInstanceAssociationsStatusResult || (exports.DescribeInstanceAssociationsStatusResult = {}));
    var InstanceInformationStringFilter;
    (function(InstanceInformationStringFilter2) {
      InstanceInformationStringFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(InstanceInformationStringFilter = exports.InstanceInformationStringFilter || (exports.InstanceInformationStringFilter = {}));
    var InstanceInformationFilterKey;
    (function(InstanceInformationFilterKey2) {
      InstanceInformationFilterKey2["ACTIVATION_IDS"] = "ActivationIds";
      InstanceInformationFilterKey2["AGENT_VERSION"] = "AgentVersion";
      InstanceInformationFilterKey2["ASSOCIATION_STATUS"] = "AssociationStatus";
      InstanceInformationFilterKey2["IAM_ROLE"] = "IamRole";
      InstanceInformationFilterKey2["INSTANCE_IDS"] = "InstanceIds";
      InstanceInformationFilterKey2["PING_STATUS"] = "PingStatus";
      InstanceInformationFilterKey2["PLATFORM_TYPES"] = "PlatformTypes";
      InstanceInformationFilterKey2["RESOURCE_TYPE"] = "ResourceType";
    })(InstanceInformationFilterKey = exports.InstanceInformationFilterKey || (exports.InstanceInformationFilterKey = {}));
    var InstanceInformationFilter;
    (function(InstanceInformationFilter2) {
      InstanceInformationFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(InstanceInformationFilter = exports.InstanceInformationFilter || (exports.InstanceInformationFilter = {}));
    var DescribeInstanceInformationRequest;
    (function(DescribeInstanceInformationRequest2) {
      DescribeInstanceInformationRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeInstanceInformationRequest = exports.DescribeInstanceInformationRequest || (exports.DescribeInstanceInformationRequest = {}));
    var InstanceAggregatedAssociationOverview;
    (function(InstanceAggregatedAssociationOverview2) {
      InstanceAggregatedAssociationOverview2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(InstanceAggregatedAssociationOverview = exports.InstanceAggregatedAssociationOverview || (exports.InstanceAggregatedAssociationOverview = {}));
    var PingStatus;
    (function(PingStatus2) {
      PingStatus2["CONNECTION_LOST"] = "ConnectionLost";
      PingStatus2["INACTIVE"] = "Inactive";
      PingStatus2["ONLINE"] = "Online";
    })(PingStatus = exports.PingStatus || (exports.PingStatus = {}));
    var ResourceType;
    (function(ResourceType2) {
      ResourceType2["DOCUMENT"] = "Document";
      ResourceType2["EC2_INSTANCE"] = "EC2Instance";
      ResourceType2["MANAGED_INSTANCE"] = "ManagedInstance";
    })(ResourceType = exports.ResourceType || (exports.ResourceType = {}));
    var SourceType;
    (function(SourceType2) {
      SourceType2["AWS_EC2_INSTANCE"] = "AWS::EC2::Instance";
      SourceType2["AWS_IOT_THING"] = "AWS::IoT::Thing";
      SourceType2["AWS_SSM_MANAGEDINSTANCE"] = "AWS::SSM::ManagedInstance";
    })(SourceType = exports.SourceType || (exports.SourceType = {}));
    var InstanceInformation;
    (function(InstanceInformation2) {
      InstanceInformation2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(InstanceInformation = exports.InstanceInformation || (exports.InstanceInformation = {}));
    var DescribeInstanceInformationResult;
    (function(DescribeInstanceInformationResult2) {
      DescribeInstanceInformationResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeInstanceInformationResult = exports.DescribeInstanceInformationResult || (exports.DescribeInstanceInformationResult = {}));
    var InvalidInstanceInformationFilterValue = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidInstanceInformationFilterValue",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInstanceInformationFilterValue";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInstanceInformationFilterValue.prototype);
      }
    };
    exports.InvalidInstanceInformationFilterValue = InvalidInstanceInformationFilterValue;
    var DescribeInstancePatchesRequest;
    (function(DescribeInstancePatchesRequest2) {
      DescribeInstancePatchesRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeInstancePatchesRequest = exports.DescribeInstancePatchesRequest || (exports.DescribeInstancePatchesRequest = {}));
    var PatchComplianceDataState;
    (function(PatchComplianceDataState2) {
      PatchComplianceDataState2["Failed"] = "FAILED";
      PatchComplianceDataState2["Installed"] = "INSTALLED";
      PatchComplianceDataState2["InstalledOther"] = "INSTALLED_OTHER";
      PatchComplianceDataState2["InstalledPendingReboot"] = "INSTALLED_PENDING_REBOOT";
      PatchComplianceDataState2["InstalledRejected"] = "INSTALLED_REJECTED";
      PatchComplianceDataState2["Missing"] = "MISSING";
      PatchComplianceDataState2["NotApplicable"] = "NOT_APPLICABLE";
    })(PatchComplianceDataState = exports.PatchComplianceDataState || (exports.PatchComplianceDataState = {}));
    var PatchComplianceData;
    (function(PatchComplianceData2) {
      PatchComplianceData2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(PatchComplianceData = exports.PatchComplianceData || (exports.PatchComplianceData = {}));
    var DescribeInstancePatchesResult;
    (function(DescribeInstancePatchesResult2) {
      DescribeInstancePatchesResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeInstancePatchesResult = exports.DescribeInstancePatchesResult || (exports.DescribeInstancePatchesResult = {}));
    var DescribeInstancePatchStatesRequest;
    (function(DescribeInstancePatchStatesRequest2) {
      DescribeInstancePatchStatesRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeInstancePatchStatesRequest = exports.DescribeInstancePatchStatesRequest || (exports.DescribeInstancePatchStatesRequest = {}));
    var PatchOperationType;
    (function(PatchOperationType2) {
      PatchOperationType2["INSTALL"] = "Install";
      PatchOperationType2["SCAN"] = "Scan";
    })(PatchOperationType = exports.PatchOperationType || (exports.PatchOperationType = {}));
    var RebootOption;
    (function(RebootOption2) {
      RebootOption2["NO_REBOOT"] = "NoReboot";
      RebootOption2["REBOOT_IF_NEEDED"] = "RebootIfNeeded";
    })(RebootOption = exports.RebootOption || (exports.RebootOption = {}));
    var InstancePatchState;
    (function(InstancePatchState2) {
      InstancePatchState2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING }
      });
    })(InstancePatchState = exports.InstancePatchState || (exports.InstancePatchState = {}));
    var DescribeInstancePatchStatesResult;
    (function(DescribeInstancePatchStatesResult2) {
      DescribeInstancePatchStatesResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.InstancePatchStates && {
          InstancePatchStates: obj.InstancePatchStates.map((item) => InstancePatchState.filterSensitiveLog(item))
        }
      });
    })(DescribeInstancePatchStatesResult = exports.DescribeInstancePatchStatesResult || (exports.DescribeInstancePatchStatesResult = {}));
    var InstancePatchStateOperatorType;
    (function(InstancePatchStateOperatorType2) {
      InstancePatchStateOperatorType2["EQUAL"] = "Equal";
      InstancePatchStateOperatorType2["GREATER_THAN"] = "GreaterThan";
      InstancePatchStateOperatorType2["LESS_THAN"] = "LessThan";
      InstancePatchStateOperatorType2["NOT_EQUAL"] = "NotEqual";
    })(InstancePatchStateOperatorType = exports.InstancePatchStateOperatorType || (exports.InstancePatchStateOperatorType = {}));
    var InstancePatchStateFilter;
    (function(InstancePatchStateFilter2) {
      InstancePatchStateFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(InstancePatchStateFilter = exports.InstancePatchStateFilter || (exports.InstancePatchStateFilter = {}));
    var DescribeInstancePatchStatesForPatchGroupRequest;
    (function(DescribeInstancePatchStatesForPatchGroupRequest2) {
      DescribeInstancePatchStatesForPatchGroupRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeInstancePatchStatesForPatchGroupRequest = exports.DescribeInstancePatchStatesForPatchGroupRequest || (exports.DescribeInstancePatchStatesForPatchGroupRequest = {}));
    var DescribeInstancePatchStatesForPatchGroupResult;
    (function(DescribeInstancePatchStatesForPatchGroupResult2) {
      DescribeInstancePatchStatesForPatchGroupResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.InstancePatchStates && {
          InstancePatchStates: obj.InstancePatchStates.map((item) => InstancePatchState.filterSensitiveLog(item))
        }
      });
    })(DescribeInstancePatchStatesForPatchGroupResult = exports.DescribeInstancePatchStatesForPatchGroupResult || (exports.DescribeInstancePatchStatesForPatchGroupResult = {}));
    var DescribeInventoryDeletionsRequest;
    (function(DescribeInventoryDeletionsRequest2) {
      DescribeInventoryDeletionsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeInventoryDeletionsRequest = exports.DescribeInventoryDeletionsRequest || (exports.DescribeInventoryDeletionsRequest = {}));
    var InventoryDeletionStatus;
    (function(InventoryDeletionStatus2) {
      InventoryDeletionStatus2["COMPLETE"] = "Complete";
      InventoryDeletionStatus2["IN_PROGRESS"] = "InProgress";
    })(InventoryDeletionStatus = exports.InventoryDeletionStatus || (exports.InventoryDeletionStatus = {}));
    var InventoryDeletionStatusItem;
    (function(InventoryDeletionStatusItem2) {
      InventoryDeletionStatusItem2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(InventoryDeletionStatusItem = exports.InventoryDeletionStatusItem || (exports.InventoryDeletionStatusItem = {}));
    var DescribeInventoryDeletionsResult;
    (function(DescribeInventoryDeletionsResult2) {
      DescribeInventoryDeletionsResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeInventoryDeletionsResult = exports.DescribeInventoryDeletionsResult || (exports.DescribeInventoryDeletionsResult = {}));
    var InvalidDeletionIdException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDeletionIdException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDeletionIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeletionIdException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDeletionIdException = InvalidDeletionIdException;
    var MaintenanceWindowFilter;
    (function(MaintenanceWindowFilter2) {
      MaintenanceWindowFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(MaintenanceWindowFilter = exports.MaintenanceWindowFilter || (exports.MaintenanceWindowFilter = {}));
    var DescribeMaintenanceWindowExecutionsRequest;
    (function(DescribeMaintenanceWindowExecutionsRequest2) {
      DescribeMaintenanceWindowExecutionsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeMaintenanceWindowExecutionsRequest = exports.DescribeMaintenanceWindowExecutionsRequest || (exports.DescribeMaintenanceWindowExecutionsRequest = {}));
    var MaintenanceWindowExecutionStatus;
    (function(MaintenanceWindowExecutionStatus2) {
      MaintenanceWindowExecutionStatus2["Cancelled"] = "CANCELLED";
      MaintenanceWindowExecutionStatus2["Cancelling"] = "CANCELLING";
      MaintenanceWindowExecutionStatus2["Failed"] = "FAILED";
      MaintenanceWindowExecutionStatus2["InProgress"] = "IN_PROGRESS";
      MaintenanceWindowExecutionStatus2["Pending"] = "PENDING";
      MaintenanceWindowExecutionStatus2["SkippedOverlapping"] = "SKIPPED_OVERLAPPING";
      MaintenanceWindowExecutionStatus2["Success"] = "SUCCESS";
      MaintenanceWindowExecutionStatus2["TimedOut"] = "TIMED_OUT";
    })(MaintenanceWindowExecutionStatus = exports.MaintenanceWindowExecutionStatus || (exports.MaintenanceWindowExecutionStatus = {}));
    var MaintenanceWindowExecution;
    (function(MaintenanceWindowExecution2) {
      MaintenanceWindowExecution2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(MaintenanceWindowExecution = exports.MaintenanceWindowExecution || (exports.MaintenanceWindowExecution = {}));
    var DescribeMaintenanceWindowExecutionsResult;
    (function(DescribeMaintenanceWindowExecutionsResult2) {
      DescribeMaintenanceWindowExecutionsResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeMaintenanceWindowExecutionsResult = exports.DescribeMaintenanceWindowExecutionsResult || (exports.DescribeMaintenanceWindowExecutionsResult = {}));
    var DescribeMaintenanceWindowExecutionTaskInvocationsRequest;
    (function(DescribeMaintenanceWindowExecutionTaskInvocationsRequest2) {
      DescribeMaintenanceWindowExecutionTaskInvocationsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeMaintenanceWindowExecutionTaskInvocationsRequest = exports.DescribeMaintenanceWindowExecutionTaskInvocationsRequest || (exports.DescribeMaintenanceWindowExecutionTaskInvocationsRequest = {}));
    var MaintenanceWindowTaskType;
    (function(MaintenanceWindowTaskType2) {
      MaintenanceWindowTaskType2["Automation"] = "AUTOMATION";
      MaintenanceWindowTaskType2["Lambda"] = "LAMBDA";
      MaintenanceWindowTaskType2["RunCommand"] = "RUN_COMMAND";
      MaintenanceWindowTaskType2["StepFunctions"] = "STEP_FUNCTIONS";
    })(MaintenanceWindowTaskType = exports.MaintenanceWindowTaskType || (exports.MaintenanceWindowTaskType = {}));
    var MaintenanceWindowExecutionTaskInvocationIdentity;
    (function(MaintenanceWindowExecutionTaskInvocationIdentity2) {
      MaintenanceWindowExecutionTaskInvocationIdentity2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING },
        ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING }
      });
    })(MaintenanceWindowExecutionTaskInvocationIdentity = exports.MaintenanceWindowExecutionTaskInvocationIdentity || (exports.MaintenanceWindowExecutionTaskInvocationIdentity = {}));
    var DescribeMaintenanceWindowExecutionTaskInvocationsResult;
    (function(DescribeMaintenanceWindowExecutionTaskInvocationsResult2) {
      DescribeMaintenanceWindowExecutionTaskInvocationsResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.WindowExecutionTaskInvocationIdentities && {
          WindowExecutionTaskInvocationIdentities: obj.WindowExecutionTaskInvocationIdentities.map((item) => MaintenanceWindowExecutionTaskInvocationIdentity.filterSensitiveLog(item))
        }
      });
    })(DescribeMaintenanceWindowExecutionTaskInvocationsResult = exports.DescribeMaintenanceWindowExecutionTaskInvocationsResult || (exports.DescribeMaintenanceWindowExecutionTaskInvocationsResult = {}));
    var DescribeMaintenanceWindowExecutionTasksRequest;
    (function(DescribeMaintenanceWindowExecutionTasksRequest2) {
      DescribeMaintenanceWindowExecutionTasksRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeMaintenanceWindowExecutionTasksRequest = exports.DescribeMaintenanceWindowExecutionTasksRequest || (exports.DescribeMaintenanceWindowExecutionTasksRequest = {}));
    var MaintenanceWindowExecutionTaskIdentity;
    (function(MaintenanceWindowExecutionTaskIdentity2) {
      MaintenanceWindowExecutionTaskIdentity2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(MaintenanceWindowExecutionTaskIdentity = exports.MaintenanceWindowExecutionTaskIdentity || (exports.MaintenanceWindowExecutionTaskIdentity = {}));
    var DescribeMaintenanceWindowExecutionTasksResult;
    (function(DescribeMaintenanceWindowExecutionTasksResult2) {
      DescribeMaintenanceWindowExecutionTasksResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeMaintenanceWindowExecutionTasksResult = exports.DescribeMaintenanceWindowExecutionTasksResult || (exports.DescribeMaintenanceWindowExecutionTasksResult = {}));
    var DescribeMaintenanceWindowsRequest;
    (function(DescribeMaintenanceWindowsRequest2) {
      DescribeMaintenanceWindowsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeMaintenanceWindowsRequest = exports.DescribeMaintenanceWindowsRequest || (exports.DescribeMaintenanceWindowsRequest = {}));
    var MaintenanceWindowIdentity;
    (function(MaintenanceWindowIdentity2) {
      MaintenanceWindowIdentity2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
      });
    })(MaintenanceWindowIdentity = exports.MaintenanceWindowIdentity || (exports.MaintenanceWindowIdentity = {}));
    var DescribeMaintenanceWindowsResult;
    (function(DescribeMaintenanceWindowsResult2) {
      DescribeMaintenanceWindowsResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.WindowIdentities && {
          WindowIdentities: obj.WindowIdentities.map((item) => MaintenanceWindowIdentity.filterSensitiveLog(item))
        }
      });
    })(DescribeMaintenanceWindowsResult = exports.DescribeMaintenanceWindowsResult || (exports.DescribeMaintenanceWindowsResult = {}));
    var MaintenanceWindowResourceType;
    (function(MaintenanceWindowResourceType2) {
      MaintenanceWindowResourceType2["Instance"] = "INSTANCE";
      MaintenanceWindowResourceType2["ResourceGroup"] = "RESOURCE_GROUP";
    })(MaintenanceWindowResourceType = exports.MaintenanceWindowResourceType || (exports.MaintenanceWindowResourceType = {}));
    var DescribeMaintenanceWindowScheduleRequest;
    (function(DescribeMaintenanceWindowScheduleRequest2) {
      DescribeMaintenanceWindowScheduleRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeMaintenanceWindowScheduleRequest = exports.DescribeMaintenanceWindowScheduleRequest || (exports.DescribeMaintenanceWindowScheduleRequest = {}));
    var ScheduledWindowExecution;
    (function(ScheduledWindowExecution2) {
      ScheduledWindowExecution2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ScheduledWindowExecution = exports.ScheduledWindowExecution || (exports.ScheduledWindowExecution = {}));
    var DescribeMaintenanceWindowScheduleResult;
    (function(DescribeMaintenanceWindowScheduleResult2) {
      DescribeMaintenanceWindowScheduleResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeMaintenanceWindowScheduleResult = exports.DescribeMaintenanceWindowScheduleResult || (exports.DescribeMaintenanceWindowScheduleResult = {}));
    var DescribeMaintenanceWindowsForTargetRequest;
    (function(DescribeMaintenanceWindowsForTargetRequest2) {
      DescribeMaintenanceWindowsForTargetRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeMaintenanceWindowsForTargetRequest = exports.DescribeMaintenanceWindowsForTargetRequest || (exports.DescribeMaintenanceWindowsForTargetRequest = {}));
    var MaintenanceWindowIdentityForTarget;
    (function(MaintenanceWindowIdentityForTarget2) {
      MaintenanceWindowIdentityForTarget2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(MaintenanceWindowIdentityForTarget = exports.MaintenanceWindowIdentityForTarget || (exports.MaintenanceWindowIdentityForTarget = {}));
    var DescribeMaintenanceWindowsForTargetResult;
    (function(DescribeMaintenanceWindowsForTargetResult2) {
      DescribeMaintenanceWindowsForTargetResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeMaintenanceWindowsForTargetResult = exports.DescribeMaintenanceWindowsForTargetResult || (exports.DescribeMaintenanceWindowsForTargetResult = {}));
    var DescribeMaintenanceWindowTargetsRequest;
    (function(DescribeMaintenanceWindowTargetsRequest2) {
      DescribeMaintenanceWindowTargetsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeMaintenanceWindowTargetsRequest = exports.DescribeMaintenanceWindowTargetsRequest || (exports.DescribeMaintenanceWindowTargetsRequest = {}));
    var MaintenanceWindowTarget;
    (function(MaintenanceWindowTarget2) {
      MaintenanceWindowTarget2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING },
        ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
      });
    })(MaintenanceWindowTarget = exports.MaintenanceWindowTarget || (exports.MaintenanceWindowTarget = {}));
    var DescribeMaintenanceWindowTargetsResult;
    (function(DescribeMaintenanceWindowTargetsResult2) {
      DescribeMaintenanceWindowTargetsResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Targets && { Targets: obj.Targets.map((item) => MaintenanceWindowTarget.filterSensitiveLog(item)) }
      });
    })(DescribeMaintenanceWindowTargetsResult = exports.DescribeMaintenanceWindowTargetsResult || (exports.DescribeMaintenanceWindowTargetsResult = {}));
    var DescribeMaintenanceWindowTasksRequest;
    (function(DescribeMaintenanceWindowTasksRequest2) {
      DescribeMaintenanceWindowTasksRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeMaintenanceWindowTasksRequest = exports.DescribeMaintenanceWindowTasksRequest || (exports.DescribeMaintenanceWindowTasksRequest = {}));
    var MaintenanceWindowTaskCutoffBehavior;
    (function(MaintenanceWindowTaskCutoffBehavior2) {
      MaintenanceWindowTaskCutoffBehavior2["CancelTask"] = "CANCEL_TASK";
      MaintenanceWindowTaskCutoffBehavior2["ContinueTask"] = "CONTINUE_TASK";
    })(MaintenanceWindowTaskCutoffBehavior = exports.MaintenanceWindowTaskCutoffBehavior || (exports.MaintenanceWindowTaskCutoffBehavior = {}));
    var LoggingInfo;
    (function(LoggingInfo2) {
      LoggingInfo2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(LoggingInfo = exports.LoggingInfo || (exports.LoggingInfo = {}));
    var MaintenanceWindowTaskParameterValueExpression;
    (function(MaintenanceWindowTaskParameterValueExpression2) {
      MaintenanceWindowTaskParameterValueExpression2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Values && { Values: smithy_client_1.SENSITIVE_STRING }
      });
    })(MaintenanceWindowTaskParameterValueExpression = exports.MaintenanceWindowTaskParameterValueExpression || (exports.MaintenanceWindowTaskParameterValueExpression = {}));
    var MaintenanceWindowTask;
    (function(MaintenanceWindowTask2) {
      MaintenanceWindowTask2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING },
        ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
      });
    })(MaintenanceWindowTask = exports.MaintenanceWindowTask || (exports.MaintenanceWindowTask = {}));
    var DescribeMaintenanceWindowTasksResult;
    (function(DescribeMaintenanceWindowTasksResult2) {
      DescribeMaintenanceWindowTasksResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Tasks && { Tasks: obj.Tasks.map((item) => MaintenanceWindowTask.filterSensitiveLog(item)) }
      });
    })(DescribeMaintenanceWindowTasksResult = exports.DescribeMaintenanceWindowTasksResult || (exports.DescribeMaintenanceWindowTasksResult = {}));
    var OpsItemFilterKey;
    (function(OpsItemFilterKey2) {
      OpsItemFilterKey2["ACTUAL_END_TIME"] = "ActualEndTime";
      OpsItemFilterKey2["ACTUAL_START_TIME"] = "ActualStartTime";
      OpsItemFilterKey2["AUTOMATION_ID"] = "AutomationId";
      OpsItemFilterKey2["CATEGORY"] = "Category";
      OpsItemFilterKey2["CHANGE_REQUEST_APPROVER_ARN"] = "ChangeRequestByApproverArn";
      OpsItemFilterKey2["CHANGE_REQUEST_APPROVER_NAME"] = "ChangeRequestByApproverName";
      OpsItemFilterKey2["CHANGE_REQUEST_REQUESTER_ARN"] = "ChangeRequestByRequesterArn";
      OpsItemFilterKey2["CHANGE_REQUEST_REQUESTER_NAME"] = "ChangeRequestByRequesterName";
      OpsItemFilterKey2["CHANGE_REQUEST_TARGETS_RESOURCE_GROUP"] = "ChangeRequestByTargetsResourceGroup";
      OpsItemFilterKey2["CHANGE_REQUEST_TEMPLATE"] = "ChangeRequestByTemplate";
      OpsItemFilterKey2["CREATED_BY"] = "CreatedBy";
      OpsItemFilterKey2["CREATED_TIME"] = "CreatedTime";
      OpsItemFilterKey2["INSIGHT_TYPE"] = "InsightByType";
      OpsItemFilterKey2["LAST_MODIFIED_TIME"] = "LastModifiedTime";
      OpsItemFilterKey2["OPERATIONAL_DATA"] = "OperationalData";
      OpsItemFilterKey2["OPERATIONAL_DATA_KEY"] = "OperationalDataKey";
      OpsItemFilterKey2["OPERATIONAL_DATA_VALUE"] = "OperationalDataValue";
      OpsItemFilterKey2["OPSITEM_ID"] = "OpsItemId";
      OpsItemFilterKey2["OPSITEM_TYPE"] = "OpsItemType";
      OpsItemFilterKey2["PLANNED_END_TIME"] = "PlannedEndTime";
      OpsItemFilterKey2["PLANNED_START_TIME"] = "PlannedStartTime";
      OpsItemFilterKey2["PRIORITY"] = "Priority";
      OpsItemFilterKey2["RESOURCE_ID"] = "ResourceId";
      OpsItemFilterKey2["SEVERITY"] = "Severity";
      OpsItemFilterKey2["SOURCE"] = "Source";
      OpsItemFilterKey2["STATUS"] = "Status";
      OpsItemFilterKey2["TITLE"] = "Title";
    })(OpsItemFilterKey = exports.OpsItemFilterKey || (exports.OpsItemFilterKey = {}));
    var OpsItemFilterOperator;
    (function(OpsItemFilterOperator2) {
      OpsItemFilterOperator2["CONTAINS"] = "Contains";
      OpsItemFilterOperator2["EQUAL"] = "Equal";
      OpsItemFilterOperator2["GREATER_THAN"] = "GreaterThan";
      OpsItemFilterOperator2["LESS_THAN"] = "LessThan";
    })(OpsItemFilterOperator = exports.OpsItemFilterOperator || (exports.OpsItemFilterOperator = {}));
    var OpsItemFilter;
    (function(OpsItemFilter2) {
      OpsItemFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(OpsItemFilter = exports.OpsItemFilter || (exports.OpsItemFilter = {}));
    var DescribeOpsItemsRequest;
    (function(DescribeOpsItemsRequest2) {
      DescribeOpsItemsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeOpsItemsRequest = exports.DescribeOpsItemsRequest || (exports.DescribeOpsItemsRequest = {}));
    var OpsItemStatus;
    (function(OpsItemStatus2) {
      OpsItemStatus2["APPROVED"] = "Approved";
      OpsItemStatus2["CANCELLED"] = "Cancelled";
      OpsItemStatus2["CANCELLING"] = "Cancelling";
      OpsItemStatus2["CHANGE_CALENDAR_OVERRIDE_APPROVED"] = "ChangeCalendarOverrideApproved";
      OpsItemStatus2["CHANGE_CALENDAR_OVERRIDE_REJECTED"] = "ChangeCalendarOverrideRejected";
      OpsItemStatus2["CLOSED"] = "Closed";
      OpsItemStatus2["COMPLETED_WITH_FAILURE"] = "CompletedWithFailure";
      OpsItemStatus2["COMPLETED_WITH_SUCCESS"] = "CompletedWithSuccess";
      OpsItemStatus2["FAILED"] = "Failed";
      OpsItemStatus2["IN_PROGRESS"] = "InProgress";
      OpsItemStatus2["OPEN"] = "Open";
      OpsItemStatus2["PENDING"] = "Pending";
      OpsItemStatus2["PENDING_APPROVAL"] = "PendingApproval";
      OpsItemStatus2["PENDING_CHANGE_CALENDAR_OVERRIDE"] = "PendingChangeCalendarOverride";
      OpsItemStatus2["REJECTED"] = "Rejected";
      OpsItemStatus2["RESOLVED"] = "Resolved";
      OpsItemStatus2["RUNBOOK_IN_PROGRESS"] = "RunbookInProgress";
      OpsItemStatus2["SCHEDULED"] = "Scheduled";
      OpsItemStatus2["TIMED_OUT"] = "TimedOut";
    })(OpsItemStatus = exports.OpsItemStatus || (exports.OpsItemStatus = {}));
    var OpsItemSummary;
    (function(OpsItemSummary2) {
      OpsItemSummary2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(OpsItemSummary = exports.OpsItemSummary || (exports.OpsItemSummary = {}));
    var DescribeOpsItemsResponse;
    (function(DescribeOpsItemsResponse2) {
      DescribeOpsItemsResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeOpsItemsResponse = exports.DescribeOpsItemsResponse || (exports.DescribeOpsItemsResponse = {}));
    var ParametersFilterKey;
    (function(ParametersFilterKey2) {
      ParametersFilterKey2["KEY_ID"] = "KeyId";
      ParametersFilterKey2["NAME"] = "Name";
      ParametersFilterKey2["TYPE"] = "Type";
    })(ParametersFilterKey = exports.ParametersFilterKey || (exports.ParametersFilterKey = {}));
    var ParametersFilter;
    (function(ParametersFilter2) {
      ParametersFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ParametersFilter = exports.ParametersFilter || (exports.ParametersFilter = {}));
    var ParameterStringFilter;
    (function(ParameterStringFilter2) {
      ParameterStringFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ParameterStringFilter = exports.ParameterStringFilter || (exports.ParameterStringFilter = {}));
    var DescribeParametersRequest;
    (function(DescribeParametersRequest2) {
      DescribeParametersRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeParametersRequest = exports.DescribeParametersRequest || (exports.DescribeParametersRequest = {}));
    var ParameterInlinePolicy;
    (function(ParameterInlinePolicy2) {
      ParameterInlinePolicy2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ParameterInlinePolicy = exports.ParameterInlinePolicy || (exports.ParameterInlinePolicy = {}));
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_1.js
var require_models_1 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetDeployablePatchSnapshotForInstanceRequest = exports.BaselineOverride = exports.GetDefaultPatchBaselineResult = exports.GetDefaultPatchBaselineRequest = exports.GetConnectionStatusResponse = exports.ConnectionStatus = exports.GetConnectionStatusRequest = exports.InvocationDoesNotExist = exports.InvalidPluginName = exports.GetCommandInvocationResult = exports.CommandInvocationStatus = exports.CloudWatchOutputConfig = exports.GetCommandInvocationRequest = exports.UnsupportedCalendarException = exports.InvalidDocumentType = exports.GetCalendarStateResponse = exports.CalendarState = exports.GetCalendarStateRequest = exports.GetAutomationExecutionResult = exports.AutomationExecution = exports.ProgressCounters = exports.GetAutomationExecutionRequest = exports.OpsItemRelatedItemAssociationNotFoundException = exports.DisassociateOpsItemRelatedItemResponse = exports.DisassociateOpsItemRelatedItemRequest = exports.DescribeSessionsResponse = exports.Session = exports.SessionStatus = exports.SessionManagerOutputUrl = exports.DescribeSessionsRequest = exports.SessionState = exports.SessionFilter = exports.SessionFilterKey = exports.DescribePatchPropertiesResult = exports.DescribePatchPropertiesRequest = exports.PatchProperty = exports.PatchSet = exports.DescribePatchGroupStateResult = exports.DescribePatchGroupStateRequest = exports.DescribePatchGroupsResult = exports.PatchGroupPatchBaselineMapping = exports.DescribePatchGroupsRequest = exports.DescribePatchBaselinesResult = exports.PatchBaselineIdentity = exports.DescribePatchBaselinesRequest = exports.InvalidFilterOption = exports.DescribeParametersResult = exports.ParameterMetadata = exports.ParameterType = exports.ParameterTier = void 0;
    exports.GetOpsSummaryResult = exports.OpsEntity = exports.OpsEntityItem = exports.OpsResultAttribute = exports.OpsFilter = exports.OpsFilterOperatorType = exports.GetOpsMetadataResult = exports.GetOpsMetadataRequest = exports.GetOpsItemResponse = exports.OpsItem = exports.GetOpsItemRequest = exports.GetMaintenanceWindowTaskResult = exports.MaintenanceWindowTaskInvocationParameters = exports.MaintenanceWindowStepFunctionsParameters = exports.MaintenanceWindowRunCommandParameters = exports.NotificationConfig = exports.NotificationType = exports.NotificationEvent = exports.MaintenanceWindowLambdaParameters = exports.MaintenanceWindowAutomationParameters = exports.GetMaintenanceWindowTaskRequest = exports.GetMaintenanceWindowExecutionTaskInvocationResult = exports.GetMaintenanceWindowExecutionTaskInvocationRequest = exports.GetMaintenanceWindowExecutionTaskResult = exports.GetMaintenanceWindowExecutionTaskRequest = exports.GetMaintenanceWindowExecutionResult = exports.GetMaintenanceWindowExecutionRequest = exports.GetMaintenanceWindowResult = exports.GetMaintenanceWindowRequest = exports.GetInventorySchemaResult = exports.InventoryItemSchema = exports.InventoryItemAttribute = exports.InventoryAttributeDataType = exports.GetInventorySchemaRequest = exports.InvalidResultAttributeException = exports.InvalidInventoryGroupException = exports.InvalidAggregatorException = exports.GetInventoryResult = exports.InventoryResultEntity = exports.InventoryResultItem = exports.ResultAttribute = exports.InventoryGroup = exports.InventoryFilter = exports.InventoryQueryOperatorType = exports.GetDocumentResult = exports.AttachmentContent = exports.AttachmentHashType = exports.GetDocumentRequest = exports.UnsupportedFeatureRequiredException = exports.GetDeployablePatchSnapshotForInstanceResult = void 0;
    exports.ListComplianceItemsResult = exports.ComplianceItem = exports.ComplianceStatus = exports.ComplianceSeverity = exports.ComplianceExecutionSummary = exports.ListComplianceItemsRequest = exports.ComplianceStringFilter = exports.ComplianceQueryOperatorType = exports.ListCommandsResult = exports.Command = exports.CommandStatus = exports.ListCommandsRequest = exports.ListCommandInvocationsResult = exports.CommandInvocation = exports.CommandPlugin = exports.CommandPluginStatus = exports.ListCommandInvocationsRequest = exports.CommandFilter = exports.CommandFilterKey = exports.ListAssociationVersionsResult = exports.AssociationVersionInfo = exports.ListAssociationVersionsRequest = exports.ListAssociationsResult = exports.Association = exports.ListAssociationsRequest = exports.AssociationFilter = exports.AssociationFilterKey = exports.ParameterVersionLabelLimitExceeded = exports.LabelParameterVersionResult = exports.LabelParameterVersionRequest = exports.ServiceSettingNotFound = exports.GetServiceSettingResult = exports.ServiceSetting = exports.GetServiceSettingRequest = exports.GetPatchBaselineForPatchGroupResult = exports.GetPatchBaselineForPatchGroupRequest = exports.GetPatchBaselineResult = exports.GetPatchBaselineRequest = exports.GetParametersByPathResult = exports.GetParametersByPathRequest = exports.GetParametersResult = exports.GetParametersRequest = exports.GetParameterHistoryResult = exports.ParameterHistory = exports.GetParameterHistoryRequest = exports.ParameterVersionNotFound = exports.InvalidKeyId = exports.GetParameterResult = exports.Parameter = exports.GetParameterRequest = void 0;
    exports.ListTagsForResourceRequest = exports.ListResourceDataSyncResult = exports.ResourceDataSyncItem = exports.ResourceDataSyncSourceWithState = exports.LastResourceDataSyncStatus = exports.ListResourceDataSyncRequest = exports.ListResourceComplianceSummariesResult = exports.ResourceComplianceSummaryItem = exports.ListResourceComplianceSummariesRequest = exports.ListOpsMetadataResult = exports.OpsMetadata = exports.ListOpsMetadataRequest = exports.OpsMetadataFilter = exports.ListOpsItemRelatedItemsResponse = exports.OpsItemRelatedItemSummary = exports.ListOpsItemRelatedItemsRequest = exports.OpsItemRelatedItemsFilter = exports.OpsItemRelatedItemsFilterOperator = exports.OpsItemRelatedItemsFilterKey = exports.ListOpsItemEventsResponse = exports.OpsItemEventSummary = exports.OpsItemIdentity = exports.ListOpsItemEventsRequest = exports.OpsItemEventFilter = exports.OpsItemEventFilterOperator = exports.OpsItemEventFilterKey = exports.ListInventoryEntriesResult = exports.ListInventoryEntriesRequest = exports.ListDocumentVersionsResult = exports.DocumentVersionInfo = exports.ListDocumentVersionsRequest = exports.ListDocumentsResult = exports.DocumentIdentifier = exports.ListDocumentsRequest = exports.DocumentKeyValuesFilter = exports.DocumentFilter = exports.DocumentFilterKey = exports.ListDocumentMetadataHistoryResponse = exports.DocumentMetadataResponseInfo = exports.DocumentReviewerResponseSource = exports.DocumentReviewCommentSource = exports.DocumentReviewCommentType = exports.ListDocumentMetadataHistoryRequest = exports.DocumentMetadataEnum = exports.ListComplianceSummariesResult = exports.ComplianceSummaryItem = exports.NonCompliantSummary = exports.CompliantSummary = exports.SeveritySummary = exports.ListComplianceSummariesRequest = void 0;
    exports.ResumeSessionResponse = exports.ResumeSessionRequest = exports.ResetServiceSettingResult = exports.ResetServiceSettingRequest = exports.RemoveTagsFromResourceResult = exports.RemoveTagsFromResourceRequest = exports.RegisterTaskWithMaintenanceWindowResult = exports.RegisterTaskWithMaintenanceWindowRequest = exports.FeatureNotAvailableException = exports.RegisterTargetWithMaintenanceWindowResult = exports.RegisterTargetWithMaintenanceWindowRequest = exports.RegisterPatchBaselineForPatchGroupResult = exports.RegisterPatchBaselineForPatchGroupRequest = exports.RegisterDefaultPatchBaselineResult = exports.RegisterDefaultPatchBaselineRequest = exports.UnsupportedParameterType = exports.PutParameterResult = exports.PutParameterRequest = exports.PoliciesLimitExceededException = exports.ParameterPatternMismatchException = exports.ParameterMaxVersionLimitExceeded = exports.ParameterLimitExceeded = exports.ParameterAlreadyExists = exports.InvalidPolicyTypeException = exports.InvalidPolicyAttributeException = exports.InvalidAllowedPatternException = exports.IncompatiblePolicyException = exports.HierarchyTypeMismatchException = exports.HierarchyLevelLimitExceededException = exports.UnsupportedInventorySchemaVersionException = exports.UnsupportedInventoryItemContextException = exports.SubTypeCountLimitExceededException = exports.PutInventoryResult = exports.PutInventoryRequest = exports.InventoryItem = exports.ItemContentMismatchException = exports.InvalidInventoryItemContextException = exports.CustomSchemaCountLimitExceededException = exports.TotalSizeLimitExceededException = exports.PutComplianceItemsResult = exports.PutComplianceItemsRequest = exports.ComplianceUploadType = exports.ComplianceItemEntry = exports.ItemSizeLimitExceededException = exports.InvalidItemContentException = exports.ComplianceTypeCountLimitExceededException = exports.ModifyDocumentPermissionResponse = exports.ModifyDocumentPermissionRequest = exports.DocumentPermissionLimit = exports.ListTagsForResourceResult = void 0;
    exports.DocumentReviews = exports.DocumentReviewAction = exports.UpdateDocumentDefaultVersionResult = exports.DocumentDefaultVersionDescription = exports.UpdateDocumentDefaultVersionRequest = exports.UpdateDocumentResult = exports.UpdateDocumentRequest = exports.DuplicateDocumentVersionName = exports.DuplicateDocumentContent = exports.DocumentVersionLimitExceeded = exports.UpdateAssociationStatusResult = exports.UpdateAssociationStatusRequest = exports.StatusUnchanged = exports.UpdateAssociationResult = exports.UpdateAssociationRequest = exports.InvalidUpdate = exports.AssociationVersionLimitExceeded = exports.UnlabelParameterVersionResult = exports.UnlabelParameterVersionRequest = exports.TerminateSessionResponse = exports.TerminateSessionRequest = exports.StopAutomationExecutionResult = exports.StopAutomationExecutionRequest = exports.StopType = exports.InvalidAutomationStatusUpdateException = exports.TargetNotConnected = exports.StartSessionResponse = exports.StartSessionRequest = exports.StartChangeRequestExecutionResult = exports.StartChangeRequestExecutionRequest = exports.AutomationDefinitionNotApprovedException = exports.StartAutomationExecutionResult = exports.StartAutomationExecutionRequest = exports.InvalidAutomationExecutionParametersException = exports.AutomationExecutionLimitExceededException = exports.AutomationDefinitionVersionNotFoundException = exports.AutomationDefinitionNotFoundException = exports.StartAssociationsOnceResult = exports.StartAssociationsOnceRequest = exports.InvalidAssociation = exports.SendCommandResult = exports.SendCommandRequest = exports.InvalidRole = exports.InvalidOutputFolder = exports.InvalidNotificationConfig = exports.SendAutomationSignalResult = exports.SendAutomationSignalRequest = exports.SignalType = exports.InvalidAutomationSignalException = exports.AutomationStepNotFoundException = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var SSMServiceException_1 = require_SSMServiceException();
    var ParameterTier;
    (function(ParameterTier2) {
      ParameterTier2["ADVANCED"] = "Advanced";
      ParameterTier2["INTELLIGENT_TIERING"] = "Intelligent-Tiering";
      ParameterTier2["STANDARD"] = "Standard";
    })(ParameterTier = exports.ParameterTier || (exports.ParameterTier = {}));
    var ParameterType;
    (function(ParameterType2) {
      ParameterType2["SECURE_STRING"] = "SecureString";
      ParameterType2["STRING"] = "String";
      ParameterType2["STRING_LIST"] = "StringList";
    })(ParameterType = exports.ParameterType || (exports.ParameterType = {}));
    var ParameterMetadata;
    (function(ParameterMetadata2) {
      ParameterMetadata2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ParameterMetadata = exports.ParameterMetadata || (exports.ParameterMetadata = {}));
    var DescribeParametersResult;
    (function(DescribeParametersResult2) {
      DescribeParametersResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeParametersResult = exports.DescribeParametersResult || (exports.DescribeParametersResult = {}));
    var InvalidFilterOption = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidFilterOption",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidFilterOption";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFilterOption.prototype);
      }
    };
    exports.InvalidFilterOption = InvalidFilterOption;
    var DescribePatchBaselinesRequest;
    (function(DescribePatchBaselinesRequest2) {
      DescribePatchBaselinesRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribePatchBaselinesRequest = exports.DescribePatchBaselinesRequest || (exports.DescribePatchBaselinesRequest = {}));
    var PatchBaselineIdentity;
    (function(PatchBaselineIdentity2) {
      PatchBaselineIdentity2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(PatchBaselineIdentity = exports.PatchBaselineIdentity || (exports.PatchBaselineIdentity = {}));
    var DescribePatchBaselinesResult;
    (function(DescribePatchBaselinesResult2) {
      DescribePatchBaselinesResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribePatchBaselinesResult = exports.DescribePatchBaselinesResult || (exports.DescribePatchBaselinesResult = {}));
    var DescribePatchGroupsRequest;
    (function(DescribePatchGroupsRequest2) {
      DescribePatchGroupsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribePatchGroupsRequest = exports.DescribePatchGroupsRequest || (exports.DescribePatchGroupsRequest = {}));
    var PatchGroupPatchBaselineMapping;
    (function(PatchGroupPatchBaselineMapping2) {
      PatchGroupPatchBaselineMapping2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(PatchGroupPatchBaselineMapping = exports.PatchGroupPatchBaselineMapping || (exports.PatchGroupPatchBaselineMapping = {}));
    var DescribePatchGroupsResult;
    (function(DescribePatchGroupsResult2) {
      DescribePatchGroupsResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribePatchGroupsResult = exports.DescribePatchGroupsResult || (exports.DescribePatchGroupsResult = {}));
    var DescribePatchGroupStateRequest;
    (function(DescribePatchGroupStateRequest2) {
      DescribePatchGroupStateRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribePatchGroupStateRequest = exports.DescribePatchGroupStateRequest || (exports.DescribePatchGroupStateRequest = {}));
    var DescribePatchGroupStateResult;
    (function(DescribePatchGroupStateResult2) {
      DescribePatchGroupStateResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribePatchGroupStateResult = exports.DescribePatchGroupStateResult || (exports.DescribePatchGroupStateResult = {}));
    var PatchSet;
    (function(PatchSet2) {
      PatchSet2["Application"] = "APPLICATION";
      PatchSet2["Os"] = "OS";
    })(PatchSet = exports.PatchSet || (exports.PatchSet = {}));
    var PatchProperty;
    (function(PatchProperty2) {
      PatchProperty2["PatchClassification"] = "CLASSIFICATION";
      PatchProperty2["PatchMsrcSeverity"] = "MSRC_SEVERITY";
      PatchProperty2["PatchPriority"] = "PRIORITY";
      PatchProperty2["PatchProductFamily"] = "PRODUCT_FAMILY";
      PatchProperty2["PatchSeverity"] = "SEVERITY";
      PatchProperty2["Product"] = "PRODUCT";
    })(PatchProperty = exports.PatchProperty || (exports.PatchProperty = {}));
    var DescribePatchPropertiesRequest;
    (function(DescribePatchPropertiesRequest2) {
      DescribePatchPropertiesRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribePatchPropertiesRequest = exports.DescribePatchPropertiesRequest || (exports.DescribePatchPropertiesRequest = {}));
    var DescribePatchPropertiesResult;
    (function(DescribePatchPropertiesResult2) {
      DescribePatchPropertiesResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribePatchPropertiesResult = exports.DescribePatchPropertiesResult || (exports.DescribePatchPropertiesResult = {}));
    var SessionFilterKey;
    (function(SessionFilterKey2) {
      SessionFilterKey2["INVOKED_AFTER"] = "InvokedAfter";
      SessionFilterKey2["INVOKED_BEFORE"] = "InvokedBefore";
      SessionFilterKey2["OWNER"] = "Owner";
      SessionFilterKey2["SESSION_ID"] = "SessionId";
      SessionFilterKey2["STATUS"] = "Status";
      SessionFilterKey2["TARGET_ID"] = "Target";
    })(SessionFilterKey = exports.SessionFilterKey || (exports.SessionFilterKey = {}));
    var SessionFilter;
    (function(SessionFilter2) {
      SessionFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(SessionFilter = exports.SessionFilter || (exports.SessionFilter = {}));
    var SessionState;
    (function(SessionState2) {
      SessionState2["ACTIVE"] = "Active";
      SessionState2["HISTORY"] = "History";
    })(SessionState = exports.SessionState || (exports.SessionState = {}));
    var DescribeSessionsRequest;
    (function(DescribeSessionsRequest2) {
      DescribeSessionsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeSessionsRequest = exports.DescribeSessionsRequest || (exports.DescribeSessionsRequest = {}));
    var SessionManagerOutputUrl;
    (function(SessionManagerOutputUrl2) {
      SessionManagerOutputUrl2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(SessionManagerOutputUrl = exports.SessionManagerOutputUrl || (exports.SessionManagerOutputUrl = {}));
    var SessionStatus;
    (function(SessionStatus2) {
      SessionStatus2["CONNECTED"] = "Connected";
      SessionStatus2["CONNECTING"] = "Connecting";
      SessionStatus2["DISCONNECTED"] = "Disconnected";
      SessionStatus2["FAILED"] = "Failed";
      SessionStatus2["TERMINATED"] = "Terminated";
      SessionStatus2["TERMINATING"] = "Terminating";
    })(SessionStatus = exports.SessionStatus || (exports.SessionStatus = {}));
    var Session;
    (function(Session2) {
      Session2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(Session = exports.Session || (exports.Session = {}));
    var DescribeSessionsResponse;
    (function(DescribeSessionsResponse2) {
      DescribeSessionsResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DescribeSessionsResponse = exports.DescribeSessionsResponse || (exports.DescribeSessionsResponse = {}));
    var DisassociateOpsItemRelatedItemRequest;
    (function(DisassociateOpsItemRelatedItemRequest2) {
      DisassociateOpsItemRelatedItemRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DisassociateOpsItemRelatedItemRequest = exports.DisassociateOpsItemRelatedItemRequest || (exports.DisassociateOpsItemRelatedItemRequest = {}));
    var DisassociateOpsItemRelatedItemResponse;
    (function(DisassociateOpsItemRelatedItemResponse2) {
      DisassociateOpsItemRelatedItemResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DisassociateOpsItemRelatedItemResponse = exports.DisassociateOpsItemRelatedItemResponse || (exports.DisassociateOpsItemRelatedItemResponse = {}));
    var OpsItemRelatedItemAssociationNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemRelatedItemAssociationNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemRelatedItemAssociationNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemRelatedItemAssociationNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.OpsItemRelatedItemAssociationNotFoundException = OpsItemRelatedItemAssociationNotFoundException;
    var GetAutomationExecutionRequest;
    (function(GetAutomationExecutionRequest2) {
      GetAutomationExecutionRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetAutomationExecutionRequest = exports.GetAutomationExecutionRequest || (exports.GetAutomationExecutionRequest = {}));
    var ProgressCounters;
    (function(ProgressCounters2) {
      ProgressCounters2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ProgressCounters = exports.ProgressCounters || (exports.ProgressCounters = {}));
    var AutomationExecution;
    (function(AutomationExecution2) {
      AutomationExecution2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AutomationExecution = exports.AutomationExecution || (exports.AutomationExecution = {}));
    var GetAutomationExecutionResult;
    (function(GetAutomationExecutionResult2) {
      GetAutomationExecutionResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetAutomationExecutionResult = exports.GetAutomationExecutionResult || (exports.GetAutomationExecutionResult = {}));
    var GetCalendarStateRequest;
    (function(GetCalendarStateRequest2) {
      GetCalendarStateRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetCalendarStateRequest = exports.GetCalendarStateRequest || (exports.GetCalendarStateRequest = {}));
    var CalendarState;
    (function(CalendarState2) {
      CalendarState2["CLOSED"] = "CLOSED";
      CalendarState2["OPEN"] = "OPEN";
    })(CalendarState = exports.CalendarState || (exports.CalendarState = {}));
    var GetCalendarStateResponse;
    (function(GetCalendarStateResponse2) {
      GetCalendarStateResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetCalendarStateResponse = exports.GetCalendarStateResponse || (exports.GetCalendarStateResponse = {}));
    var InvalidDocumentType = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocumentType",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentType";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocumentType.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDocumentType = InvalidDocumentType;
    var UnsupportedCalendarException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedCalendarException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedCalendarException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedCalendarException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.UnsupportedCalendarException = UnsupportedCalendarException;
    var GetCommandInvocationRequest;
    (function(GetCommandInvocationRequest2) {
      GetCommandInvocationRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetCommandInvocationRequest = exports.GetCommandInvocationRequest || (exports.GetCommandInvocationRequest = {}));
    var CloudWatchOutputConfig;
    (function(CloudWatchOutputConfig2) {
      CloudWatchOutputConfig2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CloudWatchOutputConfig = exports.CloudWatchOutputConfig || (exports.CloudWatchOutputConfig = {}));
    var CommandInvocationStatus;
    (function(CommandInvocationStatus2) {
      CommandInvocationStatus2["CANCELLED"] = "Cancelled";
      CommandInvocationStatus2["CANCELLING"] = "Cancelling";
      CommandInvocationStatus2["DELAYED"] = "Delayed";
      CommandInvocationStatus2["FAILED"] = "Failed";
      CommandInvocationStatus2["IN_PROGRESS"] = "InProgress";
      CommandInvocationStatus2["PENDING"] = "Pending";
      CommandInvocationStatus2["SUCCESS"] = "Success";
      CommandInvocationStatus2["TIMED_OUT"] = "TimedOut";
    })(CommandInvocationStatus = exports.CommandInvocationStatus || (exports.CommandInvocationStatus = {}));
    var GetCommandInvocationResult;
    (function(GetCommandInvocationResult2) {
      GetCommandInvocationResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetCommandInvocationResult = exports.GetCommandInvocationResult || (exports.GetCommandInvocationResult = {}));
    var InvalidPluginName = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidPluginName",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidPluginName";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPluginName.prototype);
      }
    };
    exports.InvalidPluginName = InvalidPluginName;
    var InvocationDoesNotExist = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvocationDoesNotExist",
          $fault: "client",
          ...opts
        });
        this.name = "InvocationDoesNotExist";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvocationDoesNotExist.prototype);
      }
    };
    exports.InvocationDoesNotExist = InvocationDoesNotExist;
    var GetConnectionStatusRequest;
    (function(GetConnectionStatusRequest2) {
      GetConnectionStatusRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetConnectionStatusRequest = exports.GetConnectionStatusRequest || (exports.GetConnectionStatusRequest = {}));
    var ConnectionStatus;
    (function(ConnectionStatus2) {
      ConnectionStatus2["CONNECTED"] = "Connected";
      ConnectionStatus2["NOT_CONNECTED"] = "NotConnected";
    })(ConnectionStatus = exports.ConnectionStatus || (exports.ConnectionStatus = {}));
    var GetConnectionStatusResponse;
    (function(GetConnectionStatusResponse2) {
      GetConnectionStatusResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetConnectionStatusResponse = exports.GetConnectionStatusResponse || (exports.GetConnectionStatusResponse = {}));
    var GetDefaultPatchBaselineRequest;
    (function(GetDefaultPatchBaselineRequest2) {
      GetDefaultPatchBaselineRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetDefaultPatchBaselineRequest = exports.GetDefaultPatchBaselineRequest || (exports.GetDefaultPatchBaselineRequest = {}));
    var GetDefaultPatchBaselineResult;
    (function(GetDefaultPatchBaselineResult2) {
      GetDefaultPatchBaselineResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetDefaultPatchBaselineResult = exports.GetDefaultPatchBaselineResult || (exports.GetDefaultPatchBaselineResult = {}));
    var BaselineOverride;
    (function(BaselineOverride2) {
      BaselineOverride2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Sources && { Sources: obj.Sources.map((item) => models_0_1.PatchSource.filterSensitiveLog(item)) }
      });
    })(BaselineOverride = exports.BaselineOverride || (exports.BaselineOverride = {}));
    var GetDeployablePatchSnapshotForInstanceRequest;
    (function(GetDeployablePatchSnapshotForInstanceRequest2) {
      GetDeployablePatchSnapshotForInstanceRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetDeployablePatchSnapshotForInstanceRequest = exports.GetDeployablePatchSnapshotForInstanceRequest || (exports.GetDeployablePatchSnapshotForInstanceRequest = {}));
    var GetDeployablePatchSnapshotForInstanceResult;
    (function(GetDeployablePatchSnapshotForInstanceResult2) {
      GetDeployablePatchSnapshotForInstanceResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetDeployablePatchSnapshotForInstanceResult = exports.GetDeployablePatchSnapshotForInstanceResult || (exports.GetDeployablePatchSnapshotForInstanceResult = {}));
    var UnsupportedFeatureRequiredException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedFeatureRequiredException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedFeatureRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedFeatureRequiredException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.UnsupportedFeatureRequiredException = UnsupportedFeatureRequiredException;
    var GetDocumentRequest;
    (function(GetDocumentRequest2) {
      GetDocumentRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetDocumentRequest = exports.GetDocumentRequest || (exports.GetDocumentRequest = {}));
    var AttachmentHashType;
    (function(AttachmentHashType2) {
      AttachmentHashType2["SHA256"] = "Sha256";
    })(AttachmentHashType = exports.AttachmentHashType || (exports.AttachmentHashType = {}));
    var AttachmentContent;
    (function(AttachmentContent2) {
      AttachmentContent2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AttachmentContent = exports.AttachmentContent || (exports.AttachmentContent = {}));
    var GetDocumentResult;
    (function(GetDocumentResult2) {
      GetDocumentResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetDocumentResult = exports.GetDocumentResult || (exports.GetDocumentResult = {}));
    var InventoryQueryOperatorType;
    (function(InventoryQueryOperatorType2) {
      InventoryQueryOperatorType2["BEGIN_WITH"] = "BeginWith";
      InventoryQueryOperatorType2["EQUAL"] = "Equal";
      InventoryQueryOperatorType2["EXISTS"] = "Exists";
      InventoryQueryOperatorType2["GREATER_THAN"] = "GreaterThan";
      InventoryQueryOperatorType2["LESS_THAN"] = "LessThan";
      InventoryQueryOperatorType2["NOT_EQUAL"] = "NotEqual";
    })(InventoryQueryOperatorType = exports.InventoryQueryOperatorType || (exports.InventoryQueryOperatorType = {}));
    var InventoryFilter;
    (function(InventoryFilter2) {
      InventoryFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(InventoryFilter = exports.InventoryFilter || (exports.InventoryFilter = {}));
    var InventoryGroup;
    (function(InventoryGroup2) {
      InventoryGroup2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(InventoryGroup = exports.InventoryGroup || (exports.InventoryGroup = {}));
    var ResultAttribute;
    (function(ResultAttribute2) {
      ResultAttribute2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ResultAttribute = exports.ResultAttribute || (exports.ResultAttribute = {}));
    var InventoryResultItem;
    (function(InventoryResultItem2) {
      InventoryResultItem2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(InventoryResultItem = exports.InventoryResultItem || (exports.InventoryResultItem = {}));
    var InventoryResultEntity;
    (function(InventoryResultEntity2) {
      InventoryResultEntity2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(InventoryResultEntity = exports.InventoryResultEntity || (exports.InventoryResultEntity = {}));
    var GetInventoryResult;
    (function(GetInventoryResult2) {
      GetInventoryResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetInventoryResult = exports.GetInventoryResult || (exports.GetInventoryResult = {}));
    var InvalidAggregatorException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAggregatorException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAggregatorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAggregatorException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidAggregatorException = InvalidAggregatorException;
    var InvalidInventoryGroupException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidInventoryGroupException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInventoryGroupException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInventoryGroupException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidInventoryGroupException = InvalidInventoryGroupException;
    var InvalidResultAttributeException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidResultAttributeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidResultAttributeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidResultAttributeException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidResultAttributeException = InvalidResultAttributeException;
    var GetInventorySchemaRequest;
    (function(GetInventorySchemaRequest2) {
      GetInventorySchemaRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetInventorySchemaRequest = exports.GetInventorySchemaRequest || (exports.GetInventorySchemaRequest = {}));
    var InventoryAttributeDataType;
    (function(InventoryAttributeDataType2) {
      InventoryAttributeDataType2["NUMBER"] = "number";
      InventoryAttributeDataType2["STRING"] = "string";
    })(InventoryAttributeDataType = exports.InventoryAttributeDataType || (exports.InventoryAttributeDataType = {}));
    var InventoryItemAttribute;
    (function(InventoryItemAttribute2) {
      InventoryItemAttribute2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(InventoryItemAttribute = exports.InventoryItemAttribute || (exports.InventoryItemAttribute = {}));
    var InventoryItemSchema;
    (function(InventoryItemSchema2) {
      InventoryItemSchema2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(InventoryItemSchema = exports.InventoryItemSchema || (exports.InventoryItemSchema = {}));
    var GetInventorySchemaResult;
    (function(GetInventorySchemaResult2) {
      GetInventorySchemaResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetInventorySchemaResult = exports.GetInventorySchemaResult || (exports.GetInventorySchemaResult = {}));
    var GetMaintenanceWindowRequest;
    (function(GetMaintenanceWindowRequest2) {
      GetMaintenanceWindowRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetMaintenanceWindowRequest = exports.GetMaintenanceWindowRequest || (exports.GetMaintenanceWindowRequest = {}));
    var GetMaintenanceWindowResult;
    (function(GetMaintenanceWindowResult2) {
      GetMaintenanceWindowResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
      });
    })(GetMaintenanceWindowResult = exports.GetMaintenanceWindowResult || (exports.GetMaintenanceWindowResult = {}));
    var GetMaintenanceWindowExecutionRequest;
    (function(GetMaintenanceWindowExecutionRequest2) {
      GetMaintenanceWindowExecutionRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetMaintenanceWindowExecutionRequest = exports.GetMaintenanceWindowExecutionRequest || (exports.GetMaintenanceWindowExecutionRequest = {}));
    var GetMaintenanceWindowExecutionResult;
    (function(GetMaintenanceWindowExecutionResult2) {
      GetMaintenanceWindowExecutionResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetMaintenanceWindowExecutionResult = exports.GetMaintenanceWindowExecutionResult || (exports.GetMaintenanceWindowExecutionResult = {}));
    var GetMaintenanceWindowExecutionTaskRequest;
    (function(GetMaintenanceWindowExecutionTaskRequest2) {
      GetMaintenanceWindowExecutionTaskRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetMaintenanceWindowExecutionTaskRequest = exports.GetMaintenanceWindowExecutionTaskRequest || (exports.GetMaintenanceWindowExecutionTaskRequest = {}));
    var GetMaintenanceWindowExecutionTaskResult;
    (function(GetMaintenanceWindowExecutionTaskResult2) {
      GetMaintenanceWindowExecutionTaskResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING }
      });
    })(GetMaintenanceWindowExecutionTaskResult = exports.GetMaintenanceWindowExecutionTaskResult || (exports.GetMaintenanceWindowExecutionTaskResult = {}));
    var GetMaintenanceWindowExecutionTaskInvocationRequest;
    (function(GetMaintenanceWindowExecutionTaskInvocationRequest2) {
      GetMaintenanceWindowExecutionTaskInvocationRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetMaintenanceWindowExecutionTaskInvocationRequest = exports.GetMaintenanceWindowExecutionTaskInvocationRequest || (exports.GetMaintenanceWindowExecutionTaskInvocationRequest = {}));
    var GetMaintenanceWindowExecutionTaskInvocationResult;
    (function(GetMaintenanceWindowExecutionTaskInvocationResult2) {
      GetMaintenanceWindowExecutionTaskInvocationResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING },
        ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING }
      });
    })(GetMaintenanceWindowExecutionTaskInvocationResult = exports.GetMaintenanceWindowExecutionTaskInvocationResult || (exports.GetMaintenanceWindowExecutionTaskInvocationResult = {}));
    var GetMaintenanceWindowTaskRequest;
    (function(GetMaintenanceWindowTaskRequest2) {
      GetMaintenanceWindowTaskRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetMaintenanceWindowTaskRequest = exports.GetMaintenanceWindowTaskRequest || (exports.GetMaintenanceWindowTaskRequest = {}));
    var MaintenanceWindowAutomationParameters;
    (function(MaintenanceWindowAutomationParameters2) {
      MaintenanceWindowAutomationParameters2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(MaintenanceWindowAutomationParameters = exports.MaintenanceWindowAutomationParameters || (exports.MaintenanceWindowAutomationParameters = {}));
    var MaintenanceWindowLambdaParameters;
    (function(MaintenanceWindowLambdaParameters2) {
      MaintenanceWindowLambdaParameters2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Payload && { Payload: smithy_client_1.SENSITIVE_STRING }
      });
    })(MaintenanceWindowLambdaParameters = exports.MaintenanceWindowLambdaParameters || (exports.MaintenanceWindowLambdaParameters = {}));
    var NotificationEvent;
    (function(NotificationEvent2) {
      NotificationEvent2["ALL"] = "All";
      NotificationEvent2["CANCELLED"] = "Cancelled";
      NotificationEvent2["FAILED"] = "Failed";
      NotificationEvent2["IN_PROGRESS"] = "InProgress";
      NotificationEvent2["SUCCESS"] = "Success";
      NotificationEvent2["TIMED_OUT"] = "TimedOut";
    })(NotificationEvent = exports.NotificationEvent || (exports.NotificationEvent = {}));
    var NotificationType;
    (function(NotificationType2) {
      NotificationType2["Command"] = "Command";
      NotificationType2["Invocation"] = "Invocation";
    })(NotificationType = exports.NotificationType || (exports.NotificationType = {}));
    var NotificationConfig;
    (function(NotificationConfig2) {
      NotificationConfig2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(NotificationConfig = exports.NotificationConfig || (exports.NotificationConfig = {}));
    var MaintenanceWindowRunCommandParameters;
    (function(MaintenanceWindowRunCommandParameters2) {
      MaintenanceWindowRunCommandParameters2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
      });
    })(MaintenanceWindowRunCommandParameters = exports.MaintenanceWindowRunCommandParameters || (exports.MaintenanceWindowRunCommandParameters = {}));
    var MaintenanceWindowStepFunctionsParameters;
    (function(MaintenanceWindowStepFunctionsParameters2) {
      MaintenanceWindowStepFunctionsParameters2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Input && { Input: smithy_client_1.SENSITIVE_STRING }
      });
    })(MaintenanceWindowStepFunctionsParameters = exports.MaintenanceWindowStepFunctionsParameters || (exports.MaintenanceWindowStepFunctionsParameters = {}));
    var MaintenanceWindowTaskInvocationParameters;
    (function(MaintenanceWindowTaskInvocationParameters2) {
      MaintenanceWindowTaskInvocationParameters2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.RunCommand && { RunCommand: MaintenanceWindowRunCommandParameters.filterSensitiveLog(obj.RunCommand) },
        ...obj.StepFunctions && {
          StepFunctions: MaintenanceWindowStepFunctionsParameters.filterSensitiveLog(obj.StepFunctions)
        },
        ...obj.Lambda && { Lambda: MaintenanceWindowLambdaParameters.filterSensitiveLog(obj.Lambda) }
      });
    })(MaintenanceWindowTaskInvocationParameters = exports.MaintenanceWindowTaskInvocationParameters || (exports.MaintenanceWindowTaskInvocationParameters = {}));
    var GetMaintenanceWindowTaskResult;
    (function(GetMaintenanceWindowTaskResult2) {
      GetMaintenanceWindowTaskResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING },
        ...obj.TaskInvocationParameters && {
          TaskInvocationParameters: MaintenanceWindowTaskInvocationParameters.filterSensitiveLog(obj.TaskInvocationParameters)
        },
        ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
      });
    })(GetMaintenanceWindowTaskResult = exports.GetMaintenanceWindowTaskResult || (exports.GetMaintenanceWindowTaskResult = {}));
    var GetOpsItemRequest;
    (function(GetOpsItemRequest2) {
      GetOpsItemRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetOpsItemRequest = exports.GetOpsItemRequest || (exports.GetOpsItemRequest = {}));
    var OpsItem;
    (function(OpsItem2) {
      OpsItem2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(OpsItem = exports.OpsItem || (exports.OpsItem = {}));
    var GetOpsItemResponse;
    (function(GetOpsItemResponse2) {
      GetOpsItemResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetOpsItemResponse = exports.GetOpsItemResponse || (exports.GetOpsItemResponse = {}));
    var GetOpsMetadataRequest;
    (function(GetOpsMetadataRequest2) {
      GetOpsMetadataRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetOpsMetadataRequest = exports.GetOpsMetadataRequest || (exports.GetOpsMetadataRequest = {}));
    var GetOpsMetadataResult;
    (function(GetOpsMetadataResult2) {
      GetOpsMetadataResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetOpsMetadataResult = exports.GetOpsMetadataResult || (exports.GetOpsMetadataResult = {}));
    var OpsFilterOperatorType;
    (function(OpsFilterOperatorType2) {
      OpsFilterOperatorType2["BEGIN_WITH"] = "BeginWith";
      OpsFilterOperatorType2["EQUAL"] = "Equal";
      OpsFilterOperatorType2["EXISTS"] = "Exists";
      OpsFilterOperatorType2["GREATER_THAN"] = "GreaterThan";
      OpsFilterOperatorType2["LESS_THAN"] = "LessThan";
      OpsFilterOperatorType2["NOT_EQUAL"] = "NotEqual";
    })(OpsFilterOperatorType = exports.OpsFilterOperatorType || (exports.OpsFilterOperatorType = {}));
    var OpsFilter;
    (function(OpsFilter2) {
      OpsFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(OpsFilter = exports.OpsFilter || (exports.OpsFilter = {}));
    var OpsResultAttribute;
    (function(OpsResultAttribute2) {
      OpsResultAttribute2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(OpsResultAttribute = exports.OpsResultAttribute || (exports.OpsResultAttribute = {}));
    var OpsEntityItem;
    (function(OpsEntityItem2) {
      OpsEntityItem2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(OpsEntityItem = exports.OpsEntityItem || (exports.OpsEntityItem = {}));
    var OpsEntity;
    (function(OpsEntity2) {
      OpsEntity2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(OpsEntity = exports.OpsEntity || (exports.OpsEntity = {}));
    var GetOpsSummaryResult;
    (function(GetOpsSummaryResult2) {
      GetOpsSummaryResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetOpsSummaryResult = exports.GetOpsSummaryResult || (exports.GetOpsSummaryResult = {}));
    var GetParameterRequest;
    (function(GetParameterRequest2) {
      GetParameterRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetParameterRequest = exports.GetParameterRequest || (exports.GetParameterRequest = {}));
    var Parameter;
    (function(Parameter2) {
      Parameter2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Value && { Value: smithy_client_1.SENSITIVE_STRING }
      });
    })(Parameter = exports.Parameter || (exports.Parameter = {}));
    var GetParameterResult;
    (function(GetParameterResult2) {
      GetParameterResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Parameter && { Parameter: Parameter.filterSensitiveLog(obj.Parameter) }
      });
    })(GetParameterResult = exports.GetParameterResult || (exports.GetParameterResult = {}));
    var InvalidKeyId = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidKeyId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidKeyId";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidKeyId.prototype);
      }
    };
    exports.InvalidKeyId = InvalidKeyId;
    var ParameterVersionNotFound = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterVersionNotFound",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterVersionNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterVersionNotFound.prototype);
      }
    };
    exports.ParameterVersionNotFound = ParameterVersionNotFound;
    var GetParameterHistoryRequest;
    (function(GetParameterHistoryRequest2) {
      GetParameterHistoryRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetParameterHistoryRequest = exports.GetParameterHistoryRequest || (exports.GetParameterHistoryRequest = {}));
    var ParameterHistory;
    (function(ParameterHistory2) {
      ParameterHistory2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Value && { Value: smithy_client_1.SENSITIVE_STRING }
      });
    })(ParameterHistory = exports.ParameterHistory || (exports.ParameterHistory = {}));
    var GetParameterHistoryResult;
    (function(GetParameterHistoryResult2) {
      GetParameterHistoryResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Parameters && { Parameters: obj.Parameters.map((item) => ParameterHistory.filterSensitiveLog(item)) }
      });
    })(GetParameterHistoryResult = exports.GetParameterHistoryResult || (exports.GetParameterHistoryResult = {}));
    var GetParametersRequest;
    (function(GetParametersRequest2) {
      GetParametersRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetParametersRequest = exports.GetParametersRequest || (exports.GetParametersRequest = {}));
    var GetParametersResult;
    (function(GetParametersResult2) {
      GetParametersResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Parameters && { Parameters: obj.Parameters.map((item) => Parameter.filterSensitiveLog(item)) }
      });
    })(GetParametersResult = exports.GetParametersResult || (exports.GetParametersResult = {}));
    var GetParametersByPathRequest;
    (function(GetParametersByPathRequest2) {
      GetParametersByPathRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetParametersByPathRequest = exports.GetParametersByPathRequest || (exports.GetParametersByPathRequest = {}));
    var GetParametersByPathResult;
    (function(GetParametersByPathResult2) {
      GetParametersByPathResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Parameters && { Parameters: obj.Parameters.map((item) => Parameter.filterSensitiveLog(item)) }
      });
    })(GetParametersByPathResult = exports.GetParametersByPathResult || (exports.GetParametersByPathResult = {}));
    var GetPatchBaselineRequest;
    (function(GetPatchBaselineRequest2) {
      GetPatchBaselineRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetPatchBaselineRequest = exports.GetPatchBaselineRequest || (exports.GetPatchBaselineRequest = {}));
    var GetPatchBaselineResult;
    (function(GetPatchBaselineResult2) {
      GetPatchBaselineResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Sources && { Sources: obj.Sources.map((item) => models_0_1.PatchSource.filterSensitiveLog(item)) }
      });
    })(GetPatchBaselineResult = exports.GetPatchBaselineResult || (exports.GetPatchBaselineResult = {}));
    var GetPatchBaselineForPatchGroupRequest;
    (function(GetPatchBaselineForPatchGroupRequest2) {
      GetPatchBaselineForPatchGroupRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetPatchBaselineForPatchGroupRequest = exports.GetPatchBaselineForPatchGroupRequest || (exports.GetPatchBaselineForPatchGroupRequest = {}));
    var GetPatchBaselineForPatchGroupResult;
    (function(GetPatchBaselineForPatchGroupResult2) {
      GetPatchBaselineForPatchGroupResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetPatchBaselineForPatchGroupResult = exports.GetPatchBaselineForPatchGroupResult || (exports.GetPatchBaselineForPatchGroupResult = {}));
    var GetServiceSettingRequest;
    (function(GetServiceSettingRequest2) {
      GetServiceSettingRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetServiceSettingRequest = exports.GetServiceSettingRequest || (exports.GetServiceSettingRequest = {}));
    var ServiceSetting;
    (function(ServiceSetting2) {
      ServiceSetting2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ServiceSetting = exports.ServiceSetting || (exports.ServiceSetting = {}));
    var GetServiceSettingResult;
    (function(GetServiceSettingResult2) {
      GetServiceSettingResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetServiceSettingResult = exports.GetServiceSettingResult || (exports.GetServiceSettingResult = {}));
    var ServiceSettingNotFound = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ServiceSettingNotFound",
          $fault: "client",
          ...opts
        });
        this.name = "ServiceSettingNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceSettingNotFound.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ServiceSettingNotFound = ServiceSettingNotFound;
    var LabelParameterVersionRequest;
    (function(LabelParameterVersionRequest2) {
      LabelParameterVersionRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(LabelParameterVersionRequest = exports.LabelParameterVersionRequest || (exports.LabelParameterVersionRequest = {}));
    var LabelParameterVersionResult;
    (function(LabelParameterVersionResult2) {
      LabelParameterVersionResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(LabelParameterVersionResult = exports.LabelParameterVersionResult || (exports.LabelParameterVersionResult = {}));
    var ParameterVersionLabelLimitExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterVersionLabelLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterVersionLabelLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterVersionLabelLimitExceeded.prototype);
      }
    };
    exports.ParameterVersionLabelLimitExceeded = ParameterVersionLabelLimitExceeded;
    var AssociationFilterKey;
    (function(AssociationFilterKey2) {
      AssociationFilterKey2["AssociationId"] = "AssociationId";
      AssociationFilterKey2["AssociationName"] = "AssociationName";
      AssociationFilterKey2["InstanceId"] = "InstanceId";
      AssociationFilterKey2["LastExecutedAfter"] = "LastExecutedAfter";
      AssociationFilterKey2["LastExecutedBefore"] = "LastExecutedBefore";
      AssociationFilterKey2["Name"] = "Name";
      AssociationFilterKey2["ResourceGroupName"] = "ResourceGroupName";
      AssociationFilterKey2["Status"] = "AssociationStatusName";
    })(AssociationFilterKey = exports.AssociationFilterKey || (exports.AssociationFilterKey = {}));
    var AssociationFilter;
    (function(AssociationFilter2) {
      AssociationFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(AssociationFilter = exports.AssociationFilter || (exports.AssociationFilter = {}));
    var ListAssociationsRequest;
    (function(ListAssociationsRequest2) {
      ListAssociationsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListAssociationsRequest = exports.ListAssociationsRequest || (exports.ListAssociationsRequest = {}));
    var Association;
    (function(Association2) {
      Association2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(Association = exports.Association || (exports.Association = {}));
    var ListAssociationsResult;
    (function(ListAssociationsResult2) {
      ListAssociationsResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListAssociationsResult = exports.ListAssociationsResult || (exports.ListAssociationsResult = {}));
    var ListAssociationVersionsRequest;
    (function(ListAssociationVersionsRequest2) {
      ListAssociationVersionsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListAssociationVersionsRequest = exports.ListAssociationVersionsRequest || (exports.ListAssociationVersionsRequest = {}));
    var AssociationVersionInfo;
    (function(AssociationVersionInfo2) {
      AssociationVersionInfo2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
      });
    })(AssociationVersionInfo = exports.AssociationVersionInfo || (exports.AssociationVersionInfo = {}));
    var ListAssociationVersionsResult;
    (function(ListAssociationVersionsResult2) {
      ListAssociationVersionsResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.AssociationVersions && {
          AssociationVersions: obj.AssociationVersions.map((item) => AssociationVersionInfo.filterSensitiveLog(item))
        }
      });
    })(ListAssociationVersionsResult = exports.ListAssociationVersionsResult || (exports.ListAssociationVersionsResult = {}));
    var CommandFilterKey;
    (function(CommandFilterKey2) {
      CommandFilterKey2["DOCUMENT_NAME"] = "DocumentName";
      CommandFilterKey2["EXECUTION_STAGE"] = "ExecutionStage";
      CommandFilterKey2["INVOKED_AFTER"] = "InvokedAfter";
      CommandFilterKey2["INVOKED_BEFORE"] = "InvokedBefore";
      CommandFilterKey2["STATUS"] = "Status";
    })(CommandFilterKey = exports.CommandFilterKey || (exports.CommandFilterKey = {}));
    var CommandFilter;
    (function(CommandFilter2) {
      CommandFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CommandFilter = exports.CommandFilter || (exports.CommandFilter = {}));
    var ListCommandInvocationsRequest;
    (function(ListCommandInvocationsRequest2) {
      ListCommandInvocationsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListCommandInvocationsRequest = exports.ListCommandInvocationsRequest || (exports.ListCommandInvocationsRequest = {}));
    var CommandPluginStatus;
    (function(CommandPluginStatus2) {
      CommandPluginStatus2["CANCELLED"] = "Cancelled";
      CommandPluginStatus2["FAILED"] = "Failed";
      CommandPluginStatus2["IN_PROGRESS"] = "InProgress";
      CommandPluginStatus2["PENDING"] = "Pending";
      CommandPluginStatus2["SUCCESS"] = "Success";
      CommandPluginStatus2["TIMED_OUT"] = "TimedOut";
    })(CommandPluginStatus = exports.CommandPluginStatus || (exports.CommandPluginStatus = {}));
    var CommandPlugin;
    (function(CommandPlugin2) {
      CommandPlugin2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CommandPlugin = exports.CommandPlugin || (exports.CommandPlugin = {}));
    var CommandInvocation;
    (function(CommandInvocation2) {
      CommandInvocation2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CommandInvocation = exports.CommandInvocation || (exports.CommandInvocation = {}));
    var ListCommandInvocationsResult;
    (function(ListCommandInvocationsResult2) {
      ListCommandInvocationsResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListCommandInvocationsResult = exports.ListCommandInvocationsResult || (exports.ListCommandInvocationsResult = {}));
    var ListCommandsRequest;
    (function(ListCommandsRequest2) {
      ListCommandsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListCommandsRequest = exports.ListCommandsRequest || (exports.ListCommandsRequest = {}));
    var CommandStatus;
    (function(CommandStatus2) {
      CommandStatus2["CANCELLED"] = "Cancelled";
      CommandStatus2["CANCELLING"] = "Cancelling";
      CommandStatus2["FAILED"] = "Failed";
      CommandStatus2["IN_PROGRESS"] = "InProgress";
      CommandStatus2["PENDING"] = "Pending";
      CommandStatus2["SUCCESS"] = "Success";
      CommandStatus2["TIMED_OUT"] = "TimedOut";
    })(CommandStatus = exports.CommandStatus || (exports.CommandStatus = {}));
    var Command;
    (function(Command2) {
      Command2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
      });
    })(Command = exports.Command || (exports.Command = {}));
    var ListCommandsResult;
    (function(ListCommandsResult2) {
      ListCommandsResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Commands && { Commands: obj.Commands.map((item) => Command.filterSensitiveLog(item)) }
      });
    })(ListCommandsResult = exports.ListCommandsResult || (exports.ListCommandsResult = {}));
    var ComplianceQueryOperatorType;
    (function(ComplianceQueryOperatorType2) {
      ComplianceQueryOperatorType2["BeginWith"] = "BEGIN_WITH";
      ComplianceQueryOperatorType2["Equal"] = "EQUAL";
      ComplianceQueryOperatorType2["GreaterThan"] = "GREATER_THAN";
      ComplianceQueryOperatorType2["LessThan"] = "LESS_THAN";
      ComplianceQueryOperatorType2["NotEqual"] = "NOT_EQUAL";
    })(ComplianceQueryOperatorType = exports.ComplianceQueryOperatorType || (exports.ComplianceQueryOperatorType = {}));
    var ComplianceStringFilter;
    (function(ComplianceStringFilter2) {
      ComplianceStringFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ComplianceStringFilter = exports.ComplianceStringFilter || (exports.ComplianceStringFilter = {}));
    var ListComplianceItemsRequest;
    (function(ListComplianceItemsRequest2) {
      ListComplianceItemsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListComplianceItemsRequest = exports.ListComplianceItemsRequest || (exports.ListComplianceItemsRequest = {}));
    var ComplianceExecutionSummary;
    (function(ComplianceExecutionSummary2) {
      ComplianceExecutionSummary2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ComplianceExecutionSummary = exports.ComplianceExecutionSummary || (exports.ComplianceExecutionSummary = {}));
    var ComplianceSeverity;
    (function(ComplianceSeverity2) {
      ComplianceSeverity2["Critical"] = "CRITICAL";
      ComplianceSeverity2["High"] = "HIGH";
      ComplianceSeverity2["Informational"] = "INFORMATIONAL";
      ComplianceSeverity2["Low"] = "LOW";
      ComplianceSeverity2["Medium"] = "MEDIUM";
      ComplianceSeverity2["Unspecified"] = "UNSPECIFIED";
    })(ComplianceSeverity = exports.ComplianceSeverity || (exports.ComplianceSeverity = {}));
    var ComplianceStatus;
    (function(ComplianceStatus2) {
      ComplianceStatus2["Compliant"] = "COMPLIANT";
      ComplianceStatus2["NonCompliant"] = "NON_COMPLIANT";
    })(ComplianceStatus = exports.ComplianceStatus || (exports.ComplianceStatus = {}));
    var ComplianceItem;
    (function(ComplianceItem2) {
      ComplianceItem2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ComplianceItem = exports.ComplianceItem || (exports.ComplianceItem = {}));
    var ListComplianceItemsResult;
    (function(ListComplianceItemsResult2) {
      ListComplianceItemsResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListComplianceItemsResult = exports.ListComplianceItemsResult || (exports.ListComplianceItemsResult = {}));
    var ListComplianceSummariesRequest;
    (function(ListComplianceSummariesRequest2) {
      ListComplianceSummariesRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListComplianceSummariesRequest = exports.ListComplianceSummariesRequest || (exports.ListComplianceSummariesRequest = {}));
    var SeveritySummary;
    (function(SeveritySummary2) {
      SeveritySummary2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(SeveritySummary = exports.SeveritySummary || (exports.SeveritySummary = {}));
    var CompliantSummary;
    (function(CompliantSummary2) {
      CompliantSummary2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(CompliantSummary = exports.CompliantSummary || (exports.CompliantSummary = {}));
    var NonCompliantSummary;
    (function(NonCompliantSummary2) {
      NonCompliantSummary2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(NonCompliantSummary = exports.NonCompliantSummary || (exports.NonCompliantSummary = {}));
    var ComplianceSummaryItem;
    (function(ComplianceSummaryItem2) {
      ComplianceSummaryItem2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ComplianceSummaryItem = exports.ComplianceSummaryItem || (exports.ComplianceSummaryItem = {}));
    var ListComplianceSummariesResult;
    (function(ListComplianceSummariesResult2) {
      ListComplianceSummariesResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListComplianceSummariesResult = exports.ListComplianceSummariesResult || (exports.ListComplianceSummariesResult = {}));
    var DocumentMetadataEnum;
    (function(DocumentMetadataEnum2) {
      DocumentMetadataEnum2["DocumentReviews"] = "DocumentReviews";
    })(DocumentMetadataEnum = exports.DocumentMetadataEnum || (exports.DocumentMetadataEnum = {}));
    var ListDocumentMetadataHistoryRequest;
    (function(ListDocumentMetadataHistoryRequest2) {
      ListDocumentMetadataHistoryRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListDocumentMetadataHistoryRequest = exports.ListDocumentMetadataHistoryRequest || (exports.ListDocumentMetadataHistoryRequest = {}));
    var DocumentReviewCommentType;
    (function(DocumentReviewCommentType2) {
      DocumentReviewCommentType2["Comment"] = "Comment";
    })(DocumentReviewCommentType = exports.DocumentReviewCommentType || (exports.DocumentReviewCommentType = {}));
    var DocumentReviewCommentSource;
    (function(DocumentReviewCommentSource2) {
      DocumentReviewCommentSource2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DocumentReviewCommentSource = exports.DocumentReviewCommentSource || (exports.DocumentReviewCommentSource = {}));
    var DocumentReviewerResponseSource;
    (function(DocumentReviewerResponseSource2) {
      DocumentReviewerResponseSource2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DocumentReviewerResponseSource = exports.DocumentReviewerResponseSource || (exports.DocumentReviewerResponseSource = {}));
    var DocumentMetadataResponseInfo;
    (function(DocumentMetadataResponseInfo2) {
      DocumentMetadataResponseInfo2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DocumentMetadataResponseInfo = exports.DocumentMetadataResponseInfo || (exports.DocumentMetadataResponseInfo = {}));
    var ListDocumentMetadataHistoryResponse;
    (function(ListDocumentMetadataHistoryResponse2) {
      ListDocumentMetadataHistoryResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListDocumentMetadataHistoryResponse = exports.ListDocumentMetadataHistoryResponse || (exports.ListDocumentMetadataHistoryResponse = {}));
    var DocumentFilterKey;
    (function(DocumentFilterKey2) {
      DocumentFilterKey2["DocumentType"] = "DocumentType";
      DocumentFilterKey2["Name"] = "Name";
      DocumentFilterKey2["Owner"] = "Owner";
      DocumentFilterKey2["PlatformTypes"] = "PlatformTypes";
    })(DocumentFilterKey = exports.DocumentFilterKey || (exports.DocumentFilterKey = {}));
    var DocumentFilter;
    (function(DocumentFilter2) {
      DocumentFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DocumentFilter = exports.DocumentFilter || (exports.DocumentFilter = {}));
    var DocumentKeyValuesFilter;
    (function(DocumentKeyValuesFilter2) {
      DocumentKeyValuesFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DocumentKeyValuesFilter = exports.DocumentKeyValuesFilter || (exports.DocumentKeyValuesFilter = {}));
    var ListDocumentsRequest;
    (function(ListDocumentsRequest2) {
      ListDocumentsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListDocumentsRequest = exports.ListDocumentsRequest || (exports.ListDocumentsRequest = {}));
    var DocumentIdentifier;
    (function(DocumentIdentifier2) {
      DocumentIdentifier2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DocumentIdentifier = exports.DocumentIdentifier || (exports.DocumentIdentifier = {}));
    var ListDocumentsResult;
    (function(ListDocumentsResult2) {
      ListDocumentsResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListDocumentsResult = exports.ListDocumentsResult || (exports.ListDocumentsResult = {}));
    var ListDocumentVersionsRequest;
    (function(ListDocumentVersionsRequest2) {
      ListDocumentVersionsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListDocumentVersionsRequest = exports.ListDocumentVersionsRequest || (exports.ListDocumentVersionsRequest = {}));
    var DocumentVersionInfo;
    (function(DocumentVersionInfo2) {
      DocumentVersionInfo2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DocumentVersionInfo = exports.DocumentVersionInfo || (exports.DocumentVersionInfo = {}));
    var ListDocumentVersionsResult;
    (function(ListDocumentVersionsResult2) {
      ListDocumentVersionsResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListDocumentVersionsResult = exports.ListDocumentVersionsResult || (exports.ListDocumentVersionsResult = {}));
    var ListInventoryEntriesRequest;
    (function(ListInventoryEntriesRequest2) {
      ListInventoryEntriesRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListInventoryEntriesRequest = exports.ListInventoryEntriesRequest || (exports.ListInventoryEntriesRequest = {}));
    var ListInventoryEntriesResult;
    (function(ListInventoryEntriesResult2) {
      ListInventoryEntriesResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListInventoryEntriesResult = exports.ListInventoryEntriesResult || (exports.ListInventoryEntriesResult = {}));
    var OpsItemEventFilterKey;
    (function(OpsItemEventFilterKey2) {
      OpsItemEventFilterKey2["OPSITEM_ID"] = "OpsItemId";
    })(OpsItemEventFilterKey = exports.OpsItemEventFilterKey || (exports.OpsItemEventFilterKey = {}));
    var OpsItemEventFilterOperator;
    (function(OpsItemEventFilterOperator2) {
      OpsItemEventFilterOperator2["EQUAL"] = "Equal";
    })(OpsItemEventFilterOperator = exports.OpsItemEventFilterOperator || (exports.OpsItemEventFilterOperator = {}));
    var OpsItemEventFilter;
    (function(OpsItemEventFilter2) {
      OpsItemEventFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(OpsItemEventFilter = exports.OpsItemEventFilter || (exports.OpsItemEventFilter = {}));
    var ListOpsItemEventsRequest;
    (function(ListOpsItemEventsRequest2) {
      ListOpsItemEventsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListOpsItemEventsRequest = exports.ListOpsItemEventsRequest || (exports.ListOpsItemEventsRequest = {}));
    var OpsItemIdentity;
    (function(OpsItemIdentity2) {
      OpsItemIdentity2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(OpsItemIdentity = exports.OpsItemIdentity || (exports.OpsItemIdentity = {}));
    var OpsItemEventSummary;
    (function(OpsItemEventSummary2) {
      OpsItemEventSummary2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(OpsItemEventSummary = exports.OpsItemEventSummary || (exports.OpsItemEventSummary = {}));
    var ListOpsItemEventsResponse;
    (function(ListOpsItemEventsResponse2) {
      ListOpsItemEventsResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListOpsItemEventsResponse = exports.ListOpsItemEventsResponse || (exports.ListOpsItemEventsResponse = {}));
    var OpsItemRelatedItemsFilterKey;
    (function(OpsItemRelatedItemsFilterKey2) {
      OpsItemRelatedItemsFilterKey2["ASSOCIATION_ID"] = "AssociationId";
      OpsItemRelatedItemsFilterKey2["RESOURCE_TYPE"] = "ResourceType";
      OpsItemRelatedItemsFilterKey2["RESOURCE_URI"] = "ResourceUri";
    })(OpsItemRelatedItemsFilterKey = exports.OpsItemRelatedItemsFilterKey || (exports.OpsItemRelatedItemsFilterKey = {}));
    var OpsItemRelatedItemsFilterOperator;
    (function(OpsItemRelatedItemsFilterOperator2) {
      OpsItemRelatedItemsFilterOperator2["EQUAL"] = "Equal";
    })(OpsItemRelatedItemsFilterOperator = exports.OpsItemRelatedItemsFilterOperator || (exports.OpsItemRelatedItemsFilterOperator = {}));
    var OpsItemRelatedItemsFilter;
    (function(OpsItemRelatedItemsFilter2) {
      OpsItemRelatedItemsFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(OpsItemRelatedItemsFilter = exports.OpsItemRelatedItemsFilter || (exports.OpsItemRelatedItemsFilter = {}));
    var ListOpsItemRelatedItemsRequest;
    (function(ListOpsItemRelatedItemsRequest2) {
      ListOpsItemRelatedItemsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListOpsItemRelatedItemsRequest = exports.ListOpsItemRelatedItemsRequest || (exports.ListOpsItemRelatedItemsRequest = {}));
    var OpsItemRelatedItemSummary;
    (function(OpsItemRelatedItemSummary2) {
      OpsItemRelatedItemSummary2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(OpsItemRelatedItemSummary = exports.OpsItemRelatedItemSummary || (exports.OpsItemRelatedItemSummary = {}));
    var ListOpsItemRelatedItemsResponse;
    (function(ListOpsItemRelatedItemsResponse2) {
      ListOpsItemRelatedItemsResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListOpsItemRelatedItemsResponse = exports.ListOpsItemRelatedItemsResponse || (exports.ListOpsItemRelatedItemsResponse = {}));
    var OpsMetadataFilter;
    (function(OpsMetadataFilter2) {
      OpsMetadataFilter2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(OpsMetadataFilter = exports.OpsMetadataFilter || (exports.OpsMetadataFilter = {}));
    var ListOpsMetadataRequest;
    (function(ListOpsMetadataRequest2) {
      ListOpsMetadataRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListOpsMetadataRequest = exports.ListOpsMetadataRequest || (exports.ListOpsMetadataRequest = {}));
    var OpsMetadata;
    (function(OpsMetadata2) {
      OpsMetadata2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(OpsMetadata = exports.OpsMetadata || (exports.OpsMetadata = {}));
    var ListOpsMetadataResult;
    (function(ListOpsMetadataResult2) {
      ListOpsMetadataResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListOpsMetadataResult = exports.ListOpsMetadataResult || (exports.ListOpsMetadataResult = {}));
    var ListResourceComplianceSummariesRequest;
    (function(ListResourceComplianceSummariesRequest2) {
      ListResourceComplianceSummariesRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListResourceComplianceSummariesRequest = exports.ListResourceComplianceSummariesRequest || (exports.ListResourceComplianceSummariesRequest = {}));
    var ResourceComplianceSummaryItem;
    (function(ResourceComplianceSummaryItem2) {
      ResourceComplianceSummaryItem2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ResourceComplianceSummaryItem = exports.ResourceComplianceSummaryItem || (exports.ResourceComplianceSummaryItem = {}));
    var ListResourceComplianceSummariesResult;
    (function(ListResourceComplianceSummariesResult2) {
      ListResourceComplianceSummariesResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListResourceComplianceSummariesResult = exports.ListResourceComplianceSummariesResult || (exports.ListResourceComplianceSummariesResult = {}));
    var ListResourceDataSyncRequest;
    (function(ListResourceDataSyncRequest2) {
      ListResourceDataSyncRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListResourceDataSyncRequest = exports.ListResourceDataSyncRequest || (exports.ListResourceDataSyncRequest = {}));
    var LastResourceDataSyncStatus;
    (function(LastResourceDataSyncStatus2) {
      LastResourceDataSyncStatus2["FAILED"] = "Failed";
      LastResourceDataSyncStatus2["INPROGRESS"] = "InProgress";
      LastResourceDataSyncStatus2["SUCCESSFUL"] = "Successful";
    })(LastResourceDataSyncStatus = exports.LastResourceDataSyncStatus || (exports.LastResourceDataSyncStatus = {}));
    var ResourceDataSyncSourceWithState;
    (function(ResourceDataSyncSourceWithState2) {
      ResourceDataSyncSourceWithState2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ResourceDataSyncSourceWithState = exports.ResourceDataSyncSourceWithState || (exports.ResourceDataSyncSourceWithState = {}));
    var ResourceDataSyncItem;
    (function(ResourceDataSyncItem2) {
      ResourceDataSyncItem2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ResourceDataSyncItem = exports.ResourceDataSyncItem || (exports.ResourceDataSyncItem = {}));
    var ListResourceDataSyncResult;
    (function(ListResourceDataSyncResult2) {
      ListResourceDataSyncResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListResourceDataSyncResult = exports.ListResourceDataSyncResult || (exports.ListResourceDataSyncResult = {}));
    var ListTagsForResourceRequest;
    (function(ListTagsForResourceRequest2) {
      ListTagsForResourceRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListTagsForResourceRequest = exports.ListTagsForResourceRequest || (exports.ListTagsForResourceRequest = {}));
    var ListTagsForResourceResult;
    (function(ListTagsForResourceResult2) {
      ListTagsForResourceResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ListTagsForResourceResult = exports.ListTagsForResourceResult || (exports.ListTagsForResourceResult = {}));
    var DocumentPermissionLimit = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DocumentPermissionLimit",
          $fault: "client",
          ...opts
        });
        this.name = "DocumentPermissionLimit";
        this.$fault = "client";
        Object.setPrototypeOf(this, DocumentPermissionLimit.prototype);
        this.Message = opts.Message;
      }
    };
    exports.DocumentPermissionLimit = DocumentPermissionLimit;
    var ModifyDocumentPermissionRequest;
    (function(ModifyDocumentPermissionRequest2) {
      ModifyDocumentPermissionRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ModifyDocumentPermissionRequest = exports.ModifyDocumentPermissionRequest || (exports.ModifyDocumentPermissionRequest = {}));
    var ModifyDocumentPermissionResponse;
    (function(ModifyDocumentPermissionResponse2) {
      ModifyDocumentPermissionResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ModifyDocumentPermissionResponse = exports.ModifyDocumentPermissionResponse || (exports.ModifyDocumentPermissionResponse = {}));
    var ComplianceTypeCountLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ComplianceTypeCountLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ComplianceTypeCountLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ComplianceTypeCountLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ComplianceTypeCountLimitExceededException = ComplianceTypeCountLimitExceededException;
    var InvalidItemContentException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidItemContentException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidItemContentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidItemContentException.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
      }
    };
    exports.InvalidItemContentException = InvalidItemContentException;
    var ItemSizeLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ItemSizeLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ItemSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ItemSizeLimitExceededException.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
      }
    };
    exports.ItemSizeLimitExceededException = ItemSizeLimitExceededException;
    var ComplianceItemEntry;
    (function(ComplianceItemEntry2) {
      ComplianceItemEntry2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ComplianceItemEntry = exports.ComplianceItemEntry || (exports.ComplianceItemEntry = {}));
    var ComplianceUploadType;
    (function(ComplianceUploadType2) {
      ComplianceUploadType2["Complete"] = "COMPLETE";
      ComplianceUploadType2["Partial"] = "PARTIAL";
    })(ComplianceUploadType = exports.ComplianceUploadType || (exports.ComplianceUploadType = {}));
    var PutComplianceItemsRequest;
    (function(PutComplianceItemsRequest2) {
      PutComplianceItemsRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(PutComplianceItemsRequest = exports.PutComplianceItemsRequest || (exports.PutComplianceItemsRequest = {}));
    var PutComplianceItemsResult;
    (function(PutComplianceItemsResult2) {
      PutComplianceItemsResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(PutComplianceItemsResult = exports.PutComplianceItemsResult || (exports.PutComplianceItemsResult = {}));
    var TotalSizeLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "TotalSizeLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "TotalSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TotalSizeLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.TotalSizeLimitExceededException = TotalSizeLimitExceededException;
    var CustomSchemaCountLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "CustomSchemaCountLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "CustomSchemaCountLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomSchemaCountLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.CustomSchemaCountLimitExceededException = CustomSchemaCountLimitExceededException;
    var InvalidInventoryItemContextException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidInventoryItemContextException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInventoryItemContextException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInventoryItemContextException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidInventoryItemContextException = InvalidInventoryItemContextException;
    var ItemContentMismatchException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ItemContentMismatchException",
          $fault: "client",
          ...opts
        });
        this.name = "ItemContentMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ItemContentMismatchException.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
      }
    };
    exports.ItemContentMismatchException = ItemContentMismatchException;
    var InventoryItem;
    (function(InventoryItem2) {
      InventoryItem2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(InventoryItem = exports.InventoryItem || (exports.InventoryItem = {}));
    var PutInventoryRequest;
    (function(PutInventoryRequest2) {
      PutInventoryRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(PutInventoryRequest = exports.PutInventoryRequest || (exports.PutInventoryRequest = {}));
    var PutInventoryResult;
    (function(PutInventoryResult2) {
      PutInventoryResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(PutInventoryResult = exports.PutInventoryResult || (exports.PutInventoryResult = {}));
    var SubTypeCountLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "SubTypeCountLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "SubTypeCountLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SubTypeCountLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.SubTypeCountLimitExceededException = SubTypeCountLimitExceededException;
    var UnsupportedInventoryItemContextException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedInventoryItemContextException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedInventoryItemContextException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedInventoryItemContextException.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
      }
    };
    exports.UnsupportedInventoryItemContextException = UnsupportedInventoryItemContextException;
    var UnsupportedInventorySchemaVersionException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedInventorySchemaVersionException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedInventorySchemaVersionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedInventorySchemaVersionException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.UnsupportedInventorySchemaVersionException = UnsupportedInventorySchemaVersionException;
    var HierarchyLevelLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "HierarchyLevelLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "HierarchyLevelLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, HierarchyLevelLimitExceededException.prototype);
      }
    };
    exports.HierarchyLevelLimitExceededException = HierarchyLevelLimitExceededException;
    var HierarchyTypeMismatchException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "HierarchyTypeMismatchException",
          $fault: "client",
          ...opts
        });
        this.name = "HierarchyTypeMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, HierarchyTypeMismatchException.prototype);
      }
    };
    exports.HierarchyTypeMismatchException = HierarchyTypeMismatchException;
    var IncompatiblePolicyException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "IncompatiblePolicyException",
          $fault: "client",
          ...opts
        });
        this.name = "IncompatiblePolicyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IncompatiblePolicyException.prototype);
      }
    };
    exports.IncompatiblePolicyException = IncompatiblePolicyException;
    var InvalidAllowedPatternException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAllowedPatternException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAllowedPatternException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAllowedPatternException.prototype);
      }
    };
    exports.InvalidAllowedPatternException = InvalidAllowedPatternException;
    var InvalidPolicyAttributeException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidPolicyAttributeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidPolicyAttributeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPolicyAttributeException.prototype);
      }
    };
    exports.InvalidPolicyAttributeException = InvalidPolicyAttributeException;
    var InvalidPolicyTypeException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidPolicyTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidPolicyTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPolicyTypeException.prototype);
      }
    };
    exports.InvalidPolicyTypeException = InvalidPolicyTypeException;
    var ParameterAlreadyExists = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterAlreadyExists",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterAlreadyExists.prototype);
      }
    };
    exports.ParameterAlreadyExists = ParameterAlreadyExists;
    var ParameterLimitExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterLimitExceeded.prototype);
      }
    };
    exports.ParameterLimitExceeded = ParameterLimitExceeded;
    var ParameterMaxVersionLimitExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterMaxVersionLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterMaxVersionLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterMaxVersionLimitExceeded.prototype);
      }
    };
    exports.ParameterMaxVersionLimitExceeded = ParameterMaxVersionLimitExceeded;
    var ParameterPatternMismatchException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterPatternMismatchException",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterPatternMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterPatternMismatchException.prototype);
      }
    };
    exports.ParameterPatternMismatchException = ParameterPatternMismatchException;
    var PoliciesLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "PoliciesLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "PoliciesLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PoliciesLimitExceededException.prototype);
      }
    };
    exports.PoliciesLimitExceededException = PoliciesLimitExceededException;
    var PutParameterRequest;
    (function(PutParameterRequest2) {
      PutParameterRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Value && { Value: smithy_client_1.SENSITIVE_STRING }
      });
    })(PutParameterRequest = exports.PutParameterRequest || (exports.PutParameterRequest = {}));
    var PutParameterResult;
    (function(PutParameterResult2) {
      PutParameterResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(PutParameterResult = exports.PutParameterResult || (exports.PutParameterResult = {}));
    var UnsupportedParameterType = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedParameterType",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedParameterType";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedParameterType.prototype);
      }
    };
    exports.UnsupportedParameterType = UnsupportedParameterType;
    var RegisterDefaultPatchBaselineRequest;
    (function(RegisterDefaultPatchBaselineRequest2) {
      RegisterDefaultPatchBaselineRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(RegisterDefaultPatchBaselineRequest = exports.RegisterDefaultPatchBaselineRequest || (exports.RegisterDefaultPatchBaselineRequest = {}));
    var RegisterDefaultPatchBaselineResult;
    (function(RegisterDefaultPatchBaselineResult2) {
      RegisterDefaultPatchBaselineResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(RegisterDefaultPatchBaselineResult = exports.RegisterDefaultPatchBaselineResult || (exports.RegisterDefaultPatchBaselineResult = {}));
    var RegisterPatchBaselineForPatchGroupRequest;
    (function(RegisterPatchBaselineForPatchGroupRequest2) {
      RegisterPatchBaselineForPatchGroupRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(RegisterPatchBaselineForPatchGroupRequest = exports.RegisterPatchBaselineForPatchGroupRequest || (exports.RegisterPatchBaselineForPatchGroupRequest = {}));
    var RegisterPatchBaselineForPatchGroupResult;
    (function(RegisterPatchBaselineForPatchGroupResult2) {
      RegisterPatchBaselineForPatchGroupResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(RegisterPatchBaselineForPatchGroupResult = exports.RegisterPatchBaselineForPatchGroupResult || (exports.RegisterPatchBaselineForPatchGroupResult = {}));
    var RegisterTargetWithMaintenanceWindowRequest;
    (function(RegisterTargetWithMaintenanceWindowRequest2) {
      RegisterTargetWithMaintenanceWindowRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING },
        ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
      });
    })(RegisterTargetWithMaintenanceWindowRequest = exports.RegisterTargetWithMaintenanceWindowRequest || (exports.RegisterTargetWithMaintenanceWindowRequest = {}));
    var RegisterTargetWithMaintenanceWindowResult;
    (function(RegisterTargetWithMaintenanceWindowResult2) {
      RegisterTargetWithMaintenanceWindowResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(RegisterTargetWithMaintenanceWindowResult = exports.RegisterTargetWithMaintenanceWindowResult || (exports.RegisterTargetWithMaintenanceWindowResult = {}));
    var FeatureNotAvailableException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "FeatureNotAvailableException",
          $fault: "client",
          ...opts
        });
        this.name = "FeatureNotAvailableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FeatureNotAvailableException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.FeatureNotAvailableException = FeatureNotAvailableException;
    var RegisterTaskWithMaintenanceWindowRequest;
    (function(RegisterTaskWithMaintenanceWindowRequest2) {
      RegisterTaskWithMaintenanceWindowRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING },
        ...obj.TaskInvocationParameters && {
          TaskInvocationParameters: MaintenanceWindowTaskInvocationParameters.filterSensitiveLog(obj.TaskInvocationParameters)
        },
        ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
      });
    })(RegisterTaskWithMaintenanceWindowRequest = exports.RegisterTaskWithMaintenanceWindowRequest || (exports.RegisterTaskWithMaintenanceWindowRequest = {}));
    var RegisterTaskWithMaintenanceWindowResult;
    (function(RegisterTaskWithMaintenanceWindowResult2) {
      RegisterTaskWithMaintenanceWindowResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(RegisterTaskWithMaintenanceWindowResult = exports.RegisterTaskWithMaintenanceWindowResult || (exports.RegisterTaskWithMaintenanceWindowResult = {}));
    var RemoveTagsFromResourceRequest;
    (function(RemoveTagsFromResourceRequest2) {
      RemoveTagsFromResourceRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(RemoveTagsFromResourceRequest = exports.RemoveTagsFromResourceRequest || (exports.RemoveTagsFromResourceRequest = {}));
    var RemoveTagsFromResourceResult;
    (function(RemoveTagsFromResourceResult2) {
      RemoveTagsFromResourceResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(RemoveTagsFromResourceResult = exports.RemoveTagsFromResourceResult || (exports.RemoveTagsFromResourceResult = {}));
    var ResetServiceSettingRequest;
    (function(ResetServiceSettingRequest2) {
      ResetServiceSettingRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ResetServiceSettingRequest = exports.ResetServiceSettingRequest || (exports.ResetServiceSettingRequest = {}));
    var ResetServiceSettingResult;
    (function(ResetServiceSettingResult2) {
      ResetServiceSettingResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ResetServiceSettingResult = exports.ResetServiceSettingResult || (exports.ResetServiceSettingResult = {}));
    var ResumeSessionRequest;
    (function(ResumeSessionRequest2) {
      ResumeSessionRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ResumeSessionRequest = exports.ResumeSessionRequest || (exports.ResumeSessionRequest = {}));
    var ResumeSessionResponse;
    (function(ResumeSessionResponse2) {
      ResumeSessionResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(ResumeSessionResponse = exports.ResumeSessionResponse || (exports.ResumeSessionResponse = {}));
    var AutomationStepNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationStepNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationStepNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationStepNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AutomationStepNotFoundException = AutomationStepNotFoundException;
    var InvalidAutomationSignalException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAutomationSignalException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAutomationSignalException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAutomationSignalException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidAutomationSignalException = InvalidAutomationSignalException;
    var SignalType;
    (function(SignalType2) {
      SignalType2["APPROVE"] = "Approve";
      SignalType2["REJECT"] = "Reject";
      SignalType2["RESUME"] = "Resume";
      SignalType2["START_STEP"] = "StartStep";
      SignalType2["STOP_STEP"] = "StopStep";
    })(SignalType = exports.SignalType || (exports.SignalType = {}));
    var SendAutomationSignalRequest;
    (function(SendAutomationSignalRequest2) {
      SendAutomationSignalRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(SendAutomationSignalRequest = exports.SendAutomationSignalRequest || (exports.SendAutomationSignalRequest = {}));
    var SendAutomationSignalResult;
    (function(SendAutomationSignalResult2) {
      SendAutomationSignalResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(SendAutomationSignalResult = exports.SendAutomationSignalResult || (exports.SendAutomationSignalResult = {}));
    var InvalidNotificationConfig = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidNotificationConfig",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidNotificationConfig";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNotificationConfig.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidNotificationConfig = InvalidNotificationConfig;
    var InvalidOutputFolder = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidOutputFolder",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidOutputFolder";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOutputFolder.prototype);
      }
    };
    exports.InvalidOutputFolder = InvalidOutputFolder;
    var InvalidRole = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidRole",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRole";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRole.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidRole = InvalidRole;
    var SendCommandRequest;
    (function(SendCommandRequest2) {
      SendCommandRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
      });
    })(SendCommandRequest = exports.SendCommandRequest || (exports.SendCommandRequest = {}));
    var SendCommandResult;
    (function(SendCommandResult2) {
      SendCommandResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Command && { Command: Command.filterSensitiveLog(obj.Command) }
      });
    })(SendCommandResult = exports.SendCommandResult || (exports.SendCommandResult = {}));
    var InvalidAssociation = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAssociation",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAssociation";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAssociation.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidAssociation = InvalidAssociation;
    var StartAssociationsOnceRequest;
    (function(StartAssociationsOnceRequest2) {
      StartAssociationsOnceRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(StartAssociationsOnceRequest = exports.StartAssociationsOnceRequest || (exports.StartAssociationsOnceRequest = {}));
    var StartAssociationsOnceResult;
    (function(StartAssociationsOnceResult2) {
      StartAssociationsOnceResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(StartAssociationsOnceResult = exports.StartAssociationsOnceResult || (exports.StartAssociationsOnceResult = {}));
    var AutomationDefinitionNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationDefinitionNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationDefinitionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationDefinitionNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AutomationDefinitionNotFoundException = AutomationDefinitionNotFoundException;
    var AutomationDefinitionVersionNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationDefinitionVersionNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationDefinitionVersionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationDefinitionVersionNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AutomationDefinitionVersionNotFoundException = AutomationDefinitionVersionNotFoundException;
    var AutomationExecutionLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationExecutionLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationExecutionLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationExecutionLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AutomationExecutionLimitExceededException = AutomationExecutionLimitExceededException;
    var InvalidAutomationExecutionParametersException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAutomationExecutionParametersException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAutomationExecutionParametersException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAutomationExecutionParametersException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidAutomationExecutionParametersException = InvalidAutomationExecutionParametersException;
    var StartAutomationExecutionRequest;
    (function(StartAutomationExecutionRequest2) {
      StartAutomationExecutionRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(StartAutomationExecutionRequest = exports.StartAutomationExecutionRequest || (exports.StartAutomationExecutionRequest = {}));
    var StartAutomationExecutionResult;
    (function(StartAutomationExecutionResult2) {
      StartAutomationExecutionResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(StartAutomationExecutionResult = exports.StartAutomationExecutionResult || (exports.StartAutomationExecutionResult = {}));
    var AutomationDefinitionNotApprovedException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationDefinitionNotApprovedException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationDefinitionNotApprovedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationDefinitionNotApprovedException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AutomationDefinitionNotApprovedException = AutomationDefinitionNotApprovedException;
    var StartChangeRequestExecutionRequest;
    (function(StartChangeRequestExecutionRequest2) {
      StartChangeRequestExecutionRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(StartChangeRequestExecutionRequest = exports.StartChangeRequestExecutionRequest || (exports.StartChangeRequestExecutionRequest = {}));
    var StartChangeRequestExecutionResult;
    (function(StartChangeRequestExecutionResult2) {
      StartChangeRequestExecutionResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(StartChangeRequestExecutionResult = exports.StartChangeRequestExecutionResult || (exports.StartChangeRequestExecutionResult = {}));
    var StartSessionRequest;
    (function(StartSessionRequest2) {
      StartSessionRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(StartSessionRequest = exports.StartSessionRequest || (exports.StartSessionRequest = {}));
    var StartSessionResponse;
    (function(StartSessionResponse2) {
      StartSessionResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(StartSessionResponse = exports.StartSessionResponse || (exports.StartSessionResponse = {}));
    var TargetNotConnected = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "TargetNotConnected",
          $fault: "client",
          ...opts
        });
        this.name = "TargetNotConnected";
        this.$fault = "client";
        Object.setPrototypeOf(this, TargetNotConnected.prototype);
        this.Message = opts.Message;
      }
    };
    exports.TargetNotConnected = TargetNotConnected;
    var InvalidAutomationStatusUpdateException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAutomationStatusUpdateException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAutomationStatusUpdateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAutomationStatusUpdateException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidAutomationStatusUpdateException = InvalidAutomationStatusUpdateException;
    var StopType;
    (function(StopType2) {
      StopType2["CANCEL"] = "Cancel";
      StopType2["COMPLETE"] = "Complete";
    })(StopType = exports.StopType || (exports.StopType = {}));
    var StopAutomationExecutionRequest;
    (function(StopAutomationExecutionRequest2) {
      StopAutomationExecutionRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(StopAutomationExecutionRequest = exports.StopAutomationExecutionRequest || (exports.StopAutomationExecutionRequest = {}));
    var StopAutomationExecutionResult;
    (function(StopAutomationExecutionResult2) {
      StopAutomationExecutionResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(StopAutomationExecutionResult = exports.StopAutomationExecutionResult || (exports.StopAutomationExecutionResult = {}));
    var TerminateSessionRequest;
    (function(TerminateSessionRequest2) {
      TerminateSessionRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(TerminateSessionRequest = exports.TerminateSessionRequest || (exports.TerminateSessionRequest = {}));
    var TerminateSessionResponse;
    (function(TerminateSessionResponse2) {
      TerminateSessionResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(TerminateSessionResponse = exports.TerminateSessionResponse || (exports.TerminateSessionResponse = {}));
    var UnlabelParameterVersionRequest;
    (function(UnlabelParameterVersionRequest2) {
      UnlabelParameterVersionRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UnlabelParameterVersionRequest = exports.UnlabelParameterVersionRequest || (exports.UnlabelParameterVersionRequest = {}));
    var UnlabelParameterVersionResult;
    (function(UnlabelParameterVersionResult2) {
      UnlabelParameterVersionResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UnlabelParameterVersionResult = exports.UnlabelParameterVersionResult || (exports.UnlabelParameterVersionResult = {}));
    var AssociationVersionLimitExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociationVersionLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationVersionLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociationVersionLimitExceeded.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AssociationVersionLimitExceeded = AssociationVersionLimitExceeded;
    var InvalidUpdate = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidUpdate",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidUpdate";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidUpdate.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidUpdate = InvalidUpdate;
    var UpdateAssociationRequest;
    (function(UpdateAssociationRequest2) {
      UpdateAssociationRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
      });
    })(UpdateAssociationRequest = exports.UpdateAssociationRequest || (exports.UpdateAssociationRequest = {}));
    var UpdateAssociationResult;
    (function(UpdateAssociationResult2) {
      UpdateAssociationResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.AssociationDescription && {
          AssociationDescription: models_0_1.AssociationDescription.filterSensitiveLog(obj.AssociationDescription)
        }
      });
    })(UpdateAssociationResult = exports.UpdateAssociationResult || (exports.UpdateAssociationResult = {}));
    var StatusUnchanged = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "StatusUnchanged",
          $fault: "client",
          ...opts
        });
        this.name = "StatusUnchanged";
        this.$fault = "client";
        Object.setPrototypeOf(this, StatusUnchanged.prototype);
      }
    };
    exports.StatusUnchanged = StatusUnchanged;
    var UpdateAssociationStatusRequest;
    (function(UpdateAssociationStatusRequest2) {
      UpdateAssociationStatusRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UpdateAssociationStatusRequest = exports.UpdateAssociationStatusRequest || (exports.UpdateAssociationStatusRequest = {}));
    var UpdateAssociationStatusResult;
    (function(UpdateAssociationStatusResult2) {
      UpdateAssociationStatusResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.AssociationDescription && {
          AssociationDescription: models_0_1.AssociationDescription.filterSensitiveLog(obj.AssociationDescription)
        }
      });
    })(UpdateAssociationStatusResult = exports.UpdateAssociationStatusResult || (exports.UpdateAssociationStatusResult = {}));
    var DocumentVersionLimitExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DocumentVersionLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "DocumentVersionLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, DocumentVersionLimitExceeded.prototype);
        this.Message = opts.Message;
      }
    };
    exports.DocumentVersionLimitExceeded = DocumentVersionLimitExceeded;
    var DuplicateDocumentContent = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DuplicateDocumentContent",
          $fault: "client",
          ...opts
        });
        this.name = "DuplicateDocumentContent";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateDocumentContent.prototype);
        this.Message = opts.Message;
      }
    };
    exports.DuplicateDocumentContent = DuplicateDocumentContent;
    var DuplicateDocumentVersionName = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DuplicateDocumentVersionName",
          $fault: "client",
          ...opts
        });
        this.name = "DuplicateDocumentVersionName";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateDocumentVersionName.prototype);
        this.Message = opts.Message;
      }
    };
    exports.DuplicateDocumentVersionName = DuplicateDocumentVersionName;
    var UpdateDocumentRequest;
    (function(UpdateDocumentRequest2) {
      UpdateDocumentRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UpdateDocumentRequest = exports.UpdateDocumentRequest || (exports.UpdateDocumentRequest = {}));
    var UpdateDocumentResult;
    (function(UpdateDocumentResult2) {
      UpdateDocumentResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UpdateDocumentResult = exports.UpdateDocumentResult || (exports.UpdateDocumentResult = {}));
    var UpdateDocumentDefaultVersionRequest;
    (function(UpdateDocumentDefaultVersionRequest2) {
      UpdateDocumentDefaultVersionRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UpdateDocumentDefaultVersionRequest = exports.UpdateDocumentDefaultVersionRequest || (exports.UpdateDocumentDefaultVersionRequest = {}));
    var DocumentDefaultVersionDescription;
    (function(DocumentDefaultVersionDescription2) {
      DocumentDefaultVersionDescription2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DocumentDefaultVersionDescription = exports.DocumentDefaultVersionDescription || (exports.DocumentDefaultVersionDescription = {}));
    var UpdateDocumentDefaultVersionResult;
    (function(UpdateDocumentDefaultVersionResult2) {
      UpdateDocumentDefaultVersionResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UpdateDocumentDefaultVersionResult = exports.UpdateDocumentDefaultVersionResult || (exports.UpdateDocumentDefaultVersionResult = {}));
    var DocumentReviewAction;
    (function(DocumentReviewAction2) {
      DocumentReviewAction2["Approve"] = "Approve";
      DocumentReviewAction2["Reject"] = "Reject";
      DocumentReviewAction2["SendForReview"] = "SendForReview";
      DocumentReviewAction2["UpdateReview"] = "UpdateReview";
    })(DocumentReviewAction = exports.DocumentReviewAction || (exports.DocumentReviewAction = {}));
    var DocumentReviews;
    (function(DocumentReviews2) {
      DocumentReviews2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(DocumentReviews = exports.DocumentReviews || (exports.DocumentReviews = {}));
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_2.js
var require_models_2 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetOpsSummaryRequest = exports.GetInventoryRequest = exports.OpsAggregator = exports.InventoryAggregator = exports.UpdateServiceSettingResult = exports.UpdateServiceSettingRequest = exports.UpdateResourceDataSyncResult = exports.UpdateResourceDataSyncRequest = exports.ResourceDataSyncConflictException = exports.UpdatePatchBaselineResult = exports.UpdatePatchBaselineRequest = exports.UpdateOpsMetadataResult = exports.UpdateOpsMetadataRequest = exports.OpsMetadataKeyLimitExceededException = exports.UpdateOpsItemResponse = exports.UpdateOpsItemRequest = exports.UpdateManagedInstanceRoleResult = exports.UpdateManagedInstanceRoleRequest = exports.UpdateMaintenanceWindowTaskResult = exports.UpdateMaintenanceWindowTaskRequest = exports.UpdateMaintenanceWindowTargetResult = exports.UpdateMaintenanceWindowTargetRequest = exports.UpdateMaintenanceWindowResult = exports.UpdateMaintenanceWindowRequest = exports.UpdateDocumentMetadataResponse = exports.UpdateDocumentMetadataRequest = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var models_1_1 = require_models_1();
    var SSMServiceException_1 = require_SSMServiceException();
    var UpdateDocumentMetadataRequest;
    (function(UpdateDocumentMetadataRequest2) {
      UpdateDocumentMetadataRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UpdateDocumentMetadataRequest = exports.UpdateDocumentMetadataRequest || (exports.UpdateDocumentMetadataRequest = {}));
    var UpdateDocumentMetadataResponse;
    (function(UpdateDocumentMetadataResponse2) {
      UpdateDocumentMetadataResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UpdateDocumentMetadataResponse = exports.UpdateDocumentMetadataResponse || (exports.UpdateDocumentMetadataResponse = {}));
    var UpdateMaintenanceWindowRequest;
    (function(UpdateMaintenanceWindowRequest2) {
      UpdateMaintenanceWindowRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
      });
    })(UpdateMaintenanceWindowRequest = exports.UpdateMaintenanceWindowRequest || (exports.UpdateMaintenanceWindowRequest = {}));
    var UpdateMaintenanceWindowResult;
    (function(UpdateMaintenanceWindowResult2) {
      UpdateMaintenanceWindowResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
      });
    })(UpdateMaintenanceWindowResult = exports.UpdateMaintenanceWindowResult || (exports.UpdateMaintenanceWindowResult = {}));
    var UpdateMaintenanceWindowTargetRequest;
    (function(UpdateMaintenanceWindowTargetRequest2) {
      UpdateMaintenanceWindowTargetRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING },
        ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
      });
    })(UpdateMaintenanceWindowTargetRequest = exports.UpdateMaintenanceWindowTargetRequest || (exports.UpdateMaintenanceWindowTargetRequest = {}));
    var UpdateMaintenanceWindowTargetResult;
    (function(UpdateMaintenanceWindowTargetResult2) {
      UpdateMaintenanceWindowTargetResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING },
        ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
      });
    })(UpdateMaintenanceWindowTargetResult = exports.UpdateMaintenanceWindowTargetResult || (exports.UpdateMaintenanceWindowTargetResult = {}));
    var UpdateMaintenanceWindowTaskRequest;
    (function(UpdateMaintenanceWindowTaskRequest2) {
      UpdateMaintenanceWindowTaskRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING },
        ...obj.TaskInvocationParameters && {
          TaskInvocationParameters: models_1_1.MaintenanceWindowTaskInvocationParameters.filterSensitiveLog(obj.TaskInvocationParameters)
        },
        ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
      });
    })(UpdateMaintenanceWindowTaskRequest = exports.UpdateMaintenanceWindowTaskRequest || (exports.UpdateMaintenanceWindowTaskRequest = {}));
    var UpdateMaintenanceWindowTaskResult;
    (function(UpdateMaintenanceWindowTaskResult2) {
      UpdateMaintenanceWindowTaskResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING },
        ...obj.TaskInvocationParameters && {
          TaskInvocationParameters: models_1_1.MaintenanceWindowTaskInvocationParameters.filterSensitiveLog(obj.TaskInvocationParameters)
        },
        ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
      });
    })(UpdateMaintenanceWindowTaskResult = exports.UpdateMaintenanceWindowTaskResult || (exports.UpdateMaintenanceWindowTaskResult = {}));
    var UpdateManagedInstanceRoleRequest;
    (function(UpdateManagedInstanceRoleRequest2) {
      UpdateManagedInstanceRoleRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UpdateManagedInstanceRoleRequest = exports.UpdateManagedInstanceRoleRequest || (exports.UpdateManagedInstanceRoleRequest = {}));
    var UpdateManagedInstanceRoleResult;
    (function(UpdateManagedInstanceRoleResult2) {
      UpdateManagedInstanceRoleResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UpdateManagedInstanceRoleResult = exports.UpdateManagedInstanceRoleResult || (exports.UpdateManagedInstanceRoleResult = {}));
    var UpdateOpsItemRequest;
    (function(UpdateOpsItemRequest2) {
      UpdateOpsItemRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UpdateOpsItemRequest = exports.UpdateOpsItemRequest || (exports.UpdateOpsItemRequest = {}));
    var UpdateOpsItemResponse;
    (function(UpdateOpsItemResponse2) {
      UpdateOpsItemResponse2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UpdateOpsItemResponse = exports.UpdateOpsItemResponse || (exports.UpdateOpsItemResponse = {}));
    var OpsMetadataKeyLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataKeyLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataKeyLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataKeyLimitExceededException.prototype);
      }
    };
    exports.OpsMetadataKeyLimitExceededException = OpsMetadataKeyLimitExceededException;
    var UpdateOpsMetadataRequest;
    (function(UpdateOpsMetadataRequest2) {
      UpdateOpsMetadataRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UpdateOpsMetadataRequest = exports.UpdateOpsMetadataRequest || (exports.UpdateOpsMetadataRequest = {}));
    var UpdateOpsMetadataResult;
    (function(UpdateOpsMetadataResult2) {
      UpdateOpsMetadataResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UpdateOpsMetadataResult = exports.UpdateOpsMetadataResult || (exports.UpdateOpsMetadataResult = {}));
    var UpdatePatchBaselineRequest;
    (function(UpdatePatchBaselineRequest2) {
      UpdatePatchBaselineRequest2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Sources && { Sources: obj.Sources.map((item) => models_0_1.PatchSource.filterSensitiveLog(item)) }
      });
    })(UpdatePatchBaselineRequest = exports.UpdatePatchBaselineRequest || (exports.UpdatePatchBaselineRequest = {}));
    var UpdatePatchBaselineResult;
    (function(UpdatePatchBaselineResult2) {
      UpdatePatchBaselineResult2.filterSensitiveLog = (obj) => ({
        ...obj,
        ...obj.Sources && { Sources: obj.Sources.map((item) => models_0_1.PatchSource.filterSensitiveLog(item)) }
      });
    })(UpdatePatchBaselineResult = exports.UpdatePatchBaselineResult || (exports.UpdatePatchBaselineResult = {}));
    var ResourceDataSyncConflictException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceDataSyncConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceDataSyncConflictException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ResourceDataSyncConflictException = ResourceDataSyncConflictException;
    var UpdateResourceDataSyncRequest;
    (function(UpdateResourceDataSyncRequest2) {
      UpdateResourceDataSyncRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UpdateResourceDataSyncRequest = exports.UpdateResourceDataSyncRequest || (exports.UpdateResourceDataSyncRequest = {}));
    var UpdateResourceDataSyncResult;
    (function(UpdateResourceDataSyncResult2) {
      UpdateResourceDataSyncResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UpdateResourceDataSyncResult = exports.UpdateResourceDataSyncResult || (exports.UpdateResourceDataSyncResult = {}));
    var UpdateServiceSettingRequest;
    (function(UpdateServiceSettingRequest2) {
      UpdateServiceSettingRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UpdateServiceSettingRequest = exports.UpdateServiceSettingRequest || (exports.UpdateServiceSettingRequest = {}));
    var UpdateServiceSettingResult;
    (function(UpdateServiceSettingResult2) {
      UpdateServiceSettingResult2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(UpdateServiceSettingResult = exports.UpdateServiceSettingResult || (exports.UpdateServiceSettingResult = {}));
    var InventoryAggregator;
    (function(InventoryAggregator2) {
      InventoryAggregator2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(InventoryAggregator = exports.InventoryAggregator || (exports.InventoryAggregator = {}));
    var OpsAggregator;
    (function(OpsAggregator2) {
      OpsAggregator2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(OpsAggregator = exports.OpsAggregator || (exports.OpsAggregator = {}));
    var GetInventoryRequest;
    (function(GetInventoryRequest2) {
      GetInventoryRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetInventoryRequest = exports.GetInventoryRequest || (exports.GetInventoryRequest = {}));
    var GetOpsSummaryRequest;
    (function(GetOpsSummaryRequest2) {
      GetOpsSummaryRequest2.filterSensitiveLog = (obj) => ({
        ...obj
      });
    })(GetOpsSummaryRequest = exports.GetOpsSummaryRequest || (exports.GetOpsSummaryRequest = {}));
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/protocols/Aws_json1_1.js
var require_Aws_json1_12 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/protocols/Aws_json1_1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand = exports.serializeAws_json1_1DescribeMaintenanceWindowScheduleCommand = exports.serializeAws_json1_1DescribeMaintenanceWindowsCommand = exports.serializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand = exports.serializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand = exports.serializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand = exports.serializeAws_json1_1DescribeInventoryDeletionsCommand = exports.serializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand = exports.serializeAws_json1_1DescribeInstancePatchStatesCommand = exports.serializeAws_json1_1DescribeInstancePatchesCommand = exports.serializeAws_json1_1DescribeInstanceInformationCommand = exports.serializeAws_json1_1DescribeInstanceAssociationsStatusCommand = exports.serializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand = exports.serializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand = exports.serializeAws_json1_1DescribeDocumentPermissionCommand = exports.serializeAws_json1_1DescribeDocumentCommand = exports.serializeAws_json1_1DescribeAvailablePatchesCommand = exports.serializeAws_json1_1DescribeAutomationStepExecutionsCommand = exports.serializeAws_json1_1DescribeAutomationExecutionsCommand = exports.serializeAws_json1_1DescribeAssociationExecutionTargetsCommand = exports.serializeAws_json1_1DescribeAssociationExecutionsCommand = exports.serializeAws_json1_1DescribeAssociationCommand = exports.serializeAws_json1_1DescribeActivationsCommand = exports.serializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand = exports.serializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand = exports.serializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand = exports.serializeAws_json1_1DeregisterManagedInstanceCommand = exports.serializeAws_json1_1DeleteResourceDataSyncCommand = exports.serializeAws_json1_1DeletePatchBaselineCommand = exports.serializeAws_json1_1DeleteParametersCommand = exports.serializeAws_json1_1DeleteParameterCommand = exports.serializeAws_json1_1DeleteOpsMetadataCommand = exports.serializeAws_json1_1DeleteMaintenanceWindowCommand = exports.serializeAws_json1_1DeleteInventoryCommand = exports.serializeAws_json1_1DeleteDocumentCommand = exports.serializeAws_json1_1DeleteAssociationCommand = exports.serializeAws_json1_1DeleteActivationCommand = exports.serializeAws_json1_1CreateResourceDataSyncCommand = exports.serializeAws_json1_1CreatePatchBaselineCommand = exports.serializeAws_json1_1CreateOpsMetadataCommand = exports.serializeAws_json1_1CreateOpsItemCommand = exports.serializeAws_json1_1CreateMaintenanceWindowCommand = exports.serializeAws_json1_1CreateDocumentCommand = exports.serializeAws_json1_1CreateAssociationBatchCommand = exports.serializeAws_json1_1CreateAssociationCommand = exports.serializeAws_json1_1CreateActivationCommand = exports.serializeAws_json1_1CancelMaintenanceWindowExecutionCommand = exports.serializeAws_json1_1CancelCommandCommand = exports.serializeAws_json1_1AssociateOpsItemRelatedItemCommand = exports.serializeAws_json1_1AddTagsToResourceCommand = void 0;
    exports.serializeAws_json1_1ListResourceDataSyncCommand = exports.serializeAws_json1_1ListResourceComplianceSummariesCommand = exports.serializeAws_json1_1ListOpsMetadataCommand = exports.serializeAws_json1_1ListOpsItemRelatedItemsCommand = exports.serializeAws_json1_1ListOpsItemEventsCommand = exports.serializeAws_json1_1ListInventoryEntriesCommand = exports.serializeAws_json1_1ListDocumentVersionsCommand = exports.serializeAws_json1_1ListDocumentsCommand = exports.serializeAws_json1_1ListDocumentMetadataHistoryCommand = exports.serializeAws_json1_1ListComplianceSummariesCommand = exports.serializeAws_json1_1ListComplianceItemsCommand = exports.serializeAws_json1_1ListCommandsCommand = exports.serializeAws_json1_1ListCommandInvocationsCommand = exports.serializeAws_json1_1ListAssociationVersionsCommand = exports.serializeAws_json1_1ListAssociationsCommand = exports.serializeAws_json1_1LabelParameterVersionCommand = exports.serializeAws_json1_1GetServiceSettingCommand = exports.serializeAws_json1_1GetPatchBaselineForPatchGroupCommand = exports.serializeAws_json1_1GetPatchBaselineCommand = exports.serializeAws_json1_1GetParametersByPathCommand = exports.serializeAws_json1_1GetParametersCommand = exports.serializeAws_json1_1GetParameterHistoryCommand = exports.serializeAws_json1_1GetParameterCommand = exports.serializeAws_json1_1GetOpsSummaryCommand = exports.serializeAws_json1_1GetOpsMetadataCommand = exports.serializeAws_json1_1GetOpsItemCommand = exports.serializeAws_json1_1GetMaintenanceWindowTaskCommand = exports.serializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand = exports.serializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand = exports.serializeAws_json1_1GetMaintenanceWindowExecutionCommand = exports.serializeAws_json1_1GetMaintenanceWindowCommand = exports.serializeAws_json1_1GetInventorySchemaCommand = exports.serializeAws_json1_1GetInventoryCommand = exports.serializeAws_json1_1GetDocumentCommand = exports.serializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand = exports.serializeAws_json1_1GetDefaultPatchBaselineCommand = exports.serializeAws_json1_1GetConnectionStatusCommand = exports.serializeAws_json1_1GetCommandInvocationCommand = exports.serializeAws_json1_1GetCalendarStateCommand = exports.serializeAws_json1_1GetAutomationExecutionCommand = exports.serializeAws_json1_1DisassociateOpsItemRelatedItemCommand = exports.serializeAws_json1_1DescribeSessionsCommand = exports.serializeAws_json1_1DescribePatchPropertiesCommand = exports.serializeAws_json1_1DescribePatchGroupStateCommand = exports.serializeAws_json1_1DescribePatchGroupsCommand = exports.serializeAws_json1_1DescribePatchBaselinesCommand = exports.serializeAws_json1_1DescribeParametersCommand = exports.serializeAws_json1_1DescribeOpsItemsCommand = exports.serializeAws_json1_1DescribeMaintenanceWindowTasksCommand = exports.serializeAws_json1_1DescribeMaintenanceWindowTargetsCommand = void 0;
    exports.deserializeAws_json1_1DeleteAssociationCommand = exports.deserializeAws_json1_1DeleteActivationCommand = exports.deserializeAws_json1_1CreateResourceDataSyncCommand = exports.deserializeAws_json1_1CreatePatchBaselineCommand = exports.deserializeAws_json1_1CreateOpsMetadataCommand = exports.deserializeAws_json1_1CreateOpsItemCommand = exports.deserializeAws_json1_1CreateMaintenanceWindowCommand = exports.deserializeAws_json1_1CreateDocumentCommand = exports.deserializeAws_json1_1CreateAssociationBatchCommand = exports.deserializeAws_json1_1CreateAssociationCommand = exports.deserializeAws_json1_1CreateActivationCommand = exports.deserializeAws_json1_1CancelMaintenanceWindowExecutionCommand = exports.deserializeAws_json1_1CancelCommandCommand = exports.deserializeAws_json1_1AssociateOpsItemRelatedItemCommand = exports.deserializeAws_json1_1AddTagsToResourceCommand = exports.serializeAws_json1_1UpdateServiceSettingCommand = exports.serializeAws_json1_1UpdateResourceDataSyncCommand = exports.serializeAws_json1_1UpdatePatchBaselineCommand = exports.serializeAws_json1_1UpdateOpsMetadataCommand = exports.serializeAws_json1_1UpdateOpsItemCommand = exports.serializeAws_json1_1UpdateManagedInstanceRoleCommand = exports.serializeAws_json1_1UpdateMaintenanceWindowTaskCommand = exports.serializeAws_json1_1UpdateMaintenanceWindowTargetCommand = exports.serializeAws_json1_1UpdateMaintenanceWindowCommand = exports.serializeAws_json1_1UpdateDocumentMetadataCommand = exports.serializeAws_json1_1UpdateDocumentDefaultVersionCommand = exports.serializeAws_json1_1UpdateDocumentCommand = exports.serializeAws_json1_1UpdateAssociationStatusCommand = exports.serializeAws_json1_1UpdateAssociationCommand = exports.serializeAws_json1_1UnlabelParameterVersionCommand = exports.serializeAws_json1_1TerminateSessionCommand = exports.serializeAws_json1_1StopAutomationExecutionCommand = exports.serializeAws_json1_1StartSessionCommand = exports.serializeAws_json1_1StartChangeRequestExecutionCommand = exports.serializeAws_json1_1StartAutomationExecutionCommand = exports.serializeAws_json1_1StartAssociationsOnceCommand = exports.serializeAws_json1_1SendCommandCommand = exports.serializeAws_json1_1SendAutomationSignalCommand = exports.serializeAws_json1_1ResumeSessionCommand = exports.serializeAws_json1_1ResetServiceSettingCommand = exports.serializeAws_json1_1RemoveTagsFromResourceCommand = exports.serializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand = exports.serializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand = exports.serializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand = exports.serializeAws_json1_1RegisterDefaultPatchBaselineCommand = exports.serializeAws_json1_1PutParameterCommand = exports.serializeAws_json1_1PutInventoryCommand = exports.serializeAws_json1_1PutComplianceItemsCommand = exports.serializeAws_json1_1ModifyDocumentPermissionCommand = exports.serializeAws_json1_1ListTagsForResourceCommand = void 0;
    exports.deserializeAws_json1_1GetDefaultPatchBaselineCommand = exports.deserializeAws_json1_1GetConnectionStatusCommand = exports.deserializeAws_json1_1GetCommandInvocationCommand = exports.deserializeAws_json1_1GetCalendarStateCommand = exports.deserializeAws_json1_1GetAutomationExecutionCommand = exports.deserializeAws_json1_1DisassociateOpsItemRelatedItemCommand = exports.deserializeAws_json1_1DescribeSessionsCommand = exports.deserializeAws_json1_1DescribePatchPropertiesCommand = exports.deserializeAws_json1_1DescribePatchGroupStateCommand = exports.deserializeAws_json1_1DescribePatchGroupsCommand = exports.deserializeAws_json1_1DescribePatchBaselinesCommand = exports.deserializeAws_json1_1DescribeParametersCommand = exports.deserializeAws_json1_1DescribeOpsItemsCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowTasksCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowTargetsCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowScheduleCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowsCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand = exports.deserializeAws_json1_1DescribeInventoryDeletionsCommand = exports.deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand = exports.deserializeAws_json1_1DescribeInstancePatchStatesCommand = exports.deserializeAws_json1_1DescribeInstancePatchesCommand = exports.deserializeAws_json1_1DescribeInstanceInformationCommand = exports.deserializeAws_json1_1DescribeInstanceAssociationsStatusCommand = exports.deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand = exports.deserializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand = exports.deserializeAws_json1_1DescribeDocumentPermissionCommand = exports.deserializeAws_json1_1DescribeDocumentCommand = exports.deserializeAws_json1_1DescribeAvailablePatchesCommand = exports.deserializeAws_json1_1DescribeAutomationStepExecutionsCommand = exports.deserializeAws_json1_1DescribeAutomationExecutionsCommand = exports.deserializeAws_json1_1DescribeAssociationExecutionTargetsCommand = exports.deserializeAws_json1_1DescribeAssociationExecutionsCommand = exports.deserializeAws_json1_1DescribeAssociationCommand = exports.deserializeAws_json1_1DescribeActivationsCommand = exports.deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand = exports.deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand = exports.deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand = exports.deserializeAws_json1_1DeregisterManagedInstanceCommand = exports.deserializeAws_json1_1DeleteResourceDataSyncCommand = exports.deserializeAws_json1_1DeletePatchBaselineCommand = exports.deserializeAws_json1_1DeleteParametersCommand = exports.deserializeAws_json1_1DeleteParameterCommand = exports.deserializeAws_json1_1DeleteOpsMetadataCommand = exports.deserializeAws_json1_1DeleteMaintenanceWindowCommand = exports.deserializeAws_json1_1DeleteInventoryCommand = exports.deserializeAws_json1_1DeleteDocumentCommand = void 0;
    exports.deserializeAws_json1_1StartAssociationsOnceCommand = exports.deserializeAws_json1_1SendCommandCommand = exports.deserializeAws_json1_1SendAutomationSignalCommand = exports.deserializeAws_json1_1ResumeSessionCommand = exports.deserializeAws_json1_1ResetServiceSettingCommand = exports.deserializeAws_json1_1RemoveTagsFromResourceCommand = exports.deserializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand = exports.deserializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand = exports.deserializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand = exports.deserializeAws_json1_1RegisterDefaultPatchBaselineCommand = exports.deserializeAws_json1_1PutParameterCommand = exports.deserializeAws_json1_1PutInventoryCommand = exports.deserializeAws_json1_1PutComplianceItemsCommand = exports.deserializeAws_json1_1ModifyDocumentPermissionCommand = exports.deserializeAws_json1_1ListTagsForResourceCommand = exports.deserializeAws_json1_1ListResourceDataSyncCommand = exports.deserializeAws_json1_1ListResourceComplianceSummariesCommand = exports.deserializeAws_json1_1ListOpsMetadataCommand = exports.deserializeAws_json1_1ListOpsItemRelatedItemsCommand = exports.deserializeAws_json1_1ListOpsItemEventsCommand = exports.deserializeAws_json1_1ListInventoryEntriesCommand = exports.deserializeAws_json1_1ListDocumentVersionsCommand = exports.deserializeAws_json1_1ListDocumentsCommand = exports.deserializeAws_json1_1ListDocumentMetadataHistoryCommand = exports.deserializeAws_json1_1ListComplianceSummariesCommand = exports.deserializeAws_json1_1ListComplianceItemsCommand = exports.deserializeAws_json1_1ListCommandsCommand = exports.deserializeAws_json1_1ListCommandInvocationsCommand = exports.deserializeAws_json1_1ListAssociationVersionsCommand = exports.deserializeAws_json1_1ListAssociationsCommand = exports.deserializeAws_json1_1LabelParameterVersionCommand = exports.deserializeAws_json1_1GetServiceSettingCommand = exports.deserializeAws_json1_1GetPatchBaselineForPatchGroupCommand = exports.deserializeAws_json1_1GetPatchBaselineCommand = exports.deserializeAws_json1_1GetParametersByPathCommand = exports.deserializeAws_json1_1GetParametersCommand = exports.deserializeAws_json1_1GetParameterHistoryCommand = exports.deserializeAws_json1_1GetParameterCommand = exports.deserializeAws_json1_1GetOpsSummaryCommand = exports.deserializeAws_json1_1GetOpsMetadataCommand = exports.deserializeAws_json1_1GetOpsItemCommand = exports.deserializeAws_json1_1GetMaintenanceWindowTaskCommand = exports.deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand = exports.deserializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand = exports.deserializeAws_json1_1GetMaintenanceWindowExecutionCommand = exports.deserializeAws_json1_1GetMaintenanceWindowCommand = exports.deserializeAws_json1_1GetInventorySchemaCommand = exports.deserializeAws_json1_1GetInventoryCommand = exports.deserializeAws_json1_1GetDocumentCommand = exports.deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand = void 0;
    exports.deserializeAws_json1_1UpdateServiceSettingCommand = exports.deserializeAws_json1_1UpdateResourceDataSyncCommand = exports.deserializeAws_json1_1UpdatePatchBaselineCommand = exports.deserializeAws_json1_1UpdateOpsMetadataCommand = exports.deserializeAws_json1_1UpdateOpsItemCommand = exports.deserializeAws_json1_1UpdateManagedInstanceRoleCommand = exports.deserializeAws_json1_1UpdateMaintenanceWindowTaskCommand = exports.deserializeAws_json1_1UpdateMaintenanceWindowTargetCommand = exports.deserializeAws_json1_1UpdateMaintenanceWindowCommand = exports.deserializeAws_json1_1UpdateDocumentMetadataCommand = exports.deserializeAws_json1_1UpdateDocumentDefaultVersionCommand = exports.deserializeAws_json1_1UpdateDocumentCommand = exports.deserializeAws_json1_1UpdateAssociationStatusCommand = exports.deserializeAws_json1_1UpdateAssociationCommand = exports.deserializeAws_json1_1UnlabelParameterVersionCommand = exports.deserializeAws_json1_1TerminateSessionCommand = exports.deserializeAws_json1_1StopAutomationExecutionCommand = exports.deserializeAws_json1_1StartSessionCommand = exports.deserializeAws_json1_1StartChangeRequestExecutionCommand = exports.deserializeAws_json1_1StartAutomationExecutionCommand = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs3();
    var uuid_1 = require_dist();
    var models_0_1 = require_models_04();
    var models_1_1 = require_models_1();
    var models_2_1 = require_models_2();
    var SSMServiceException_1 = require_SSMServiceException();
    var serializeAws_json1_1AddTagsToResourceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.AddTagsToResource"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1AddTagsToResourceRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1AddTagsToResourceCommand = serializeAws_json1_1AddTagsToResourceCommand;
    var serializeAws_json1_1AssociateOpsItemRelatedItemCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.AssociateOpsItemRelatedItem"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1AssociateOpsItemRelatedItemRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1AssociateOpsItemRelatedItemCommand = serializeAws_json1_1AssociateOpsItemRelatedItemCommand;
    var serializeAws_json1_1CancelCommandCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CancelCommand"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CancelCommandRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CancelCommandCommand = serializeAws_json1_1CancelCommandCommand;
    var serializeAws_json1_1CancelMaintenanceWindowExecutionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CancelMaintenanceWindowExecution"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CancelMaintenanceWindowExecutionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CancelMaintenanceWindowExecutionCommand = serializeAws_json1_1CancelMaintenanceWindowExecutionCommand;
    var serializeAws_json1_1CreateActivationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateActivation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateActivationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CreateActivationCommand = serializeAws_json1_1CreateActivationCommand;
    var serializeAws_json1_1CreateAssociationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateAssociation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateAssociationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CreateAssociationCommand = serializeAws_json1_1CreateAssociationCommand;
    var serializeAws_json1_1CreateAssociationBatchCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateAssociationBatch"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateAssociationBatchRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CreateAssociationBatchCommand = serializeAws_json1_1CreateAssociationBatchCommand;
    var serializeAws_json1_1CreateDocumentCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateDocument"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateDocumentRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CreateDocumentCommand = serializeAws_json1_1CreateDocumentCommand;
    var serializeAws_json1_1CreateMaintenanceWindowCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CreateMaintenanceWindowCommand = serializeAws_json1_1CreateMaintenanceWindowCommand;
    var serializeAws_json1_1CreateOpsItemCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateOpsItem"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateOpsItemRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CreateOpsItemCommand = serializeAws_json1_1CreateOpsItemCommand;
    var serializeAws_json1_1CreateOpsMetadataCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateOpsMetadata"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateOpsMetadataRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CreateOpsMetadataCommand = serializeAws_json1_1CreateOpsMetadataCommand;
    var serializeAws_json1_1CreatePatchBaselineCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreatePatchBaseline"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreatePatchBaselineRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CreatePatchBaselineCommand = serializeAws_json1_1CreatePatchBaselineCommand;
    var serializeAws_json1_1CreateResourceDataSyncCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateResourceDataSync"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateResourceDataSyncRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CreateResourceDataSyncCommand = serializeAws_json1_1CreateResourceDataSyncCommand;
    var serializeAws_json1_1DeleteActivationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteActivation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteActivationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteActivationCommand = serializeAws_json1_1DeleteActivationCommand;
    var serializeAws_json1_1DeleteAssociationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteAssociation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteAssociationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteAssociationCommand = serializeAws_json1_1DeleteAssociationCommand;
    var serializeAws_json1_1DeleteDocumentCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteDocument"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteDocumentRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteDocumentCommand = serializeAws_json1_1DeleteDocumentCommand;
    var serializeAws_json1_1DeleteInventoryCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteInventory"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteInventoryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteInventoryCommand = serializeAws_json1_1DeleteInventoryCommand;
    var serializeAws_json1_1DeleteMaintenanceWindowCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteMaintenanceWindowCommand = serializeAws_json1_1DeleteMaintenanceWindowCommand;
    var serializeAws_json1_1DeleteOpsMetadataCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteOpsMetadata"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteOpsMetadataRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteOpsMetadataCommand = serializeAws_json1_1DeleteOpsMetadataCommand;
    var serializeAws_json1_1DeleteParameterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteParameter"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteParameterRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteParameterCommand = serializeAws_json1_1DeleteParameterCommand;
    var serializeAws_json1_1DeleteParametersCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteParameters"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteParametersRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteParametersCommand = serializeAws_json1_1DeleteParametersCommand;
    var serializeAws_json1_1DeletePatchBaselineCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeletePatchBaseline"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeletePatchBaselineRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeletePatchBaselineCommand = serializeAws_json1_1DeletePatchBaselineCommand;
    var serializeAws_json1_1DeleteResourceDataSyncCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteResourceDataSync"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteResourceDataSyncRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteResourceDataSyncCommand = serializeAws_json1_1DeleteResourceDataSyncCommand;
    var serializeAws_json1_1DeregisterManagedInstanceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeregisterManagedInstance"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeregisterManagedInstanceRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeregisterManagedInstanceCommand = serializeAws_json1_1DeregisterManagedInstanceCommand;
    var serializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeregisterPatchBaselineForPatchGroup"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeregisterPatchBaselineForPatchGroupRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand = serializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand;
    var serializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeregisterTargetFromMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeregisterTargetFromMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand = serializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand;
    var serializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeregisterTaskFromMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeregisterTaskFromMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand = serializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand;
    var serializeAws_json1_1DescribeActivationsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeActivations"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeActivationsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeActivationsCommand = serializeAws_json1_1DescribeActivationsCommand;
    var serializeAws_json1_1DescribeAssociationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeAssociation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeAssociationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeAssociationCommand = serializeAws_json1_1DescribeAssociationCommand;
    var serializeAws_json1_1DescribeAssociationExecutionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeAssociationExecutions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeAssociationExecutionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeAssociationExecutionsCommand = serializeAws_json1_1DescribeAssociationExecutionsCommand;
    var serializeAws_json1_1DescribeAssociationExecutionTargetsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeAssociationExecutionTargets"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeAssociationExecutionTargetsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeAssociationExecutionTargetsCommand = serializeAws_json1_1DescribeAssociationExecutionTargetsCommand;
    var serializeAws_json1_1DescribeAutomationExecutionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeAutomationExecutions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeAutomationExecutionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeAutomationExecutionsCommand = serializeAws_json1_1DescribeAutomationExecutionsCommand;
    var serializeAws_json1_1DescribeAutomationStepExecutionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeAutomationStepExecutions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeAutomationStepExecutionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeAutomationStepExecutionsCommand = serializeAws_json1_1DescribeAutomationStepExecutionsCommand;
    var serializeAws_json1_1DescribeAvailablePatchesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeAvailablePatches"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeAvailablePatchesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeAvailablePatchesCommand = serializeAws_json1_1DescribeAvailablePatchesCommand;
    var serializeAws_json1_1DescribeDocumentCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeDocument"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeDocumentRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeDocumentCommand = serializeAws_json1_1DescribeDocumentCommand;
    var serializeAws_json1_1DescribeDocumentPermissionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeDocumentPermission"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeDocumentPermissionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeDocumentPermissionCommand = serializeAws_json1_1DescribeDocumentPermissionCommand;
    var serializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeEffectiveInstanceAssociations"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeEffectiveInstanceAssociationsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand = serializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand;
    var serializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeEffectivePatchesForPatchBaseline"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeEffectivePatchesForPatchBaselineRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand = serializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand;
    var serializeAws_json1_1DescribeInstanceAssociationsStatusCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeInstanceAssociationsStatus"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeInstanceAssociationsStatusRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeInstanceAssociationsStatusCommand = serializeAws_json1_1DescribeInstanceAssociationsStatusCommand;
    var serializeAws_json1_1DescribeInstanceInformationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeInstanceInformation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeInstanceInformationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeInstanceInformationCommand = serializeAws_json1_1DescribeInstanceInformationCommand;
    var serializeAws_json1_1DescribeInstancePatchesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeInstancePatches"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeInstancePatchesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeInstancePatchesCommand = serializeAws_json1_1DescribeInstancePatchesCommand;
    var serializeAws_json1_1DescribeInstancePatchStatesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeInstancePatchStates"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeInstancePatchStatesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeInstancePatchStatesCommand = serializeAws_json1_1DescribeInstancePatchStatesCommand;
    var serializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeInstancePatchStatesForPatchGroup"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeInstancePatchStatesForPatchGroupRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand = serializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand;
    var serializeAws_json1_1DescribeInventoryDeletionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeInventoryDeletions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeInventoryDeletionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeInventoryDeletionsCommand = serializeAws_json1_1DescribeInventoryDeletionsCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindowExecutions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowExecutionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand = serializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindowExecutionTaskInvocations"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand = serializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindowExecutionTasks"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowExecutionTasksRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand = serializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindows"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeMaintenanceWindowsCommand = serializeAws_json1_1DescribeMaintenanceWindowsCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowScheduleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindowSchedule"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowScheduleRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeMaintenanceWindowScheduleCommand = serializeAws_json1_1DescribeMaintenanceWindowScheduleCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindowsForTarget"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowsForTargetRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand = serializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowTargetsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindowTargets"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowTargetsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeMaintenanceWindowTargetsCommand = serializeAws_json1_1DescribeMaintenanceWindowTargetsCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowTasksCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindowTasks"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowTasksRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeMaintenanceWindowTasksCommand = serializeAws_json1_1DescribeMaintenanceWindowTasksCommand;
    var serializeAws_json1_1DescribeOpsItemsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeOpsItems"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeOpsItemsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeOpsItemsCommand = serializeAws_json1_1DescribeOpsItemsCommand;
    var serializeAws_json1_1DescribeParametersCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeParameters"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeParametersRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeParametersCommand = serializeAws_json1_1DescribeParametersCommand;
    var serializeAws_json1_1DescribePatchBaselinesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribePatchBaselines"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribePatchBaselinesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribePatchBaselinesCommand = serializeAws_json1_1DescribePatchBaselinesCommand;
    var serializeAws_json1_1DescribePatchGroupsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribePatchGroups"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribePatchGroupsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribePatchGroupsCommand = serializeAws_json1_1DescribePatchGroupsCommand;
    var serializeAws_json1_1DescribePatchGroupStateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribePatchGroupState"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribePatchGroupStateRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribePatchGroupStateCommand = serializeAws_json1_1DescribePatchGroupStateCommand;
    var serializeAws_json1_1DescribePatchPropertiesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribePatchProperties"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribePatchPropertiesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribePatchPropertiesCommand = serializeAws_json1_1DescribePatchPropertiesCommand;
    var serializeAws_json1_1DescribeSessionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeSessions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeSessionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeSessionsCommand = serializeAws_json1_1DescribeSessionsCommand;
    var serializeAws_json1_1DisassociateOpsItemRelatedItemCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DisassociateOpsItemRelatedItem"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DisassociateOpsItemRelatedItemRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DisassociateOpsItemRelatedItemCommand = serializeAws_json1_1DisassociateOpsItemRelatedItemCommand;
    var serializeAws_json1_1GetAutomationExecutionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetAutomationExecution"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetAutomationExecutionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetAutomationExecutionCommand = serializeAws_json1_1GetAutomationExecutionCommand;
    var serializeAws_json1_1GetCalendarStateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetCalendarState"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetCalendarStateRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetCalendarStateCommand = serializeAws_json1_1GetCalendarStateCommand;
    var serializeAws_json1_1GetCommandInvocationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetCommandInvocation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetCommandInvocationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetCommandInvocationCommand = serializeAws_json1_1GetCommandInvocationCommand;
    var serializeAws_json1_1GetConnectionStatusCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetConnectionStatus"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetConnectionStatusRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetConnectionStatusCommand = serializeAws_json1_1GetConnectionStatusCommand;
    var serializeAws_json1_1GetDefaultPatchBaselineCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetDefaultPatchBaseline"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetDefaultPatchBaselineRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetDefaultPatchBaselineCommand = serializeAws_json1_1GetDefaultPatchBaselineCommand;
    var serializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetDeployablePatchSnapshotForInstance"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetDeployablePatchSnapshotForInstanceRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand = serializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand;
    var serializeAws_json1_1GetDocumentCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetDocument"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetDocumentRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetDocumentCommand = serializeAws_json1_1GetDocumentCommand;
    var serializeAws_json1_1GetInventoryCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetInventory"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetInventoryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetInventoryCommand = serializeAws_json1_1GetInventoryCommand;
    var serializeAws_json1_1GetInventorySchemaCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetInventorySchema"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetInventorySchemaRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetInventorySchemaCommand = serializeAws_json1_1GetInventorySchemaCommand;
    var serializeAws_json1_1GetMaintenanceWindowCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetMaintenanceWindowCommand = serializeAws_json1_1GetMaintenanceWindowCommand;
    var serializeAws_json1_1GetMaintenanceWindowExecutionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetMaintenanceWindowExecution"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetMaintenanceWindowExecutionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetMaintenanceWindowExecutionCommand = serializeAws_json1_1GetMaintenanceWindowExecutionCommand;
    var serializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetMaintenanceWindowExecutionTask"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetMaintenanceWindowExecutionTaskRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand = serializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand;
    var serializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetMaintenanceWindowExecutionTaskInvocation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand = serializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand;
    var serializeAws_json1_1GetMaintenanceWindowTaskCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetMaintenanceWindowTask"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetMaintenanceWindowTaskRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetMaintenanceWindowTaskCommand = serializeAws_json1_1GetMaintenanceWindowTaskCommand;
    var serializeAws_json1_1GetOpsItemCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetOpsItem"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetOpsItemRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetOpsItemCommand = serializeAws_json1_1GetOpsItemCommand;
    var serializeAws_json1_1GetOpsMetadataCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetOpsMetadata"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetOpsMetadataRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetOpsMetadataCommand = serializeAws_json1_1GetOpsMetadataCommand;
    var serializeAws_json1_1GetOpsSummaryCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetOpsSummary"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetOpsSummaryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetOpsSummaryCommand = serializeAws_json1_1GetOpsSummaryCommand;
    var serializeAws_json1_1GetParameterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetParameter"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetParameterRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetParameterCommand = serializeAws_json1_1GetParameterCommand;
    var serializeAws_json1_1GetParameterHistoryCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetParameterHistory"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetParameterHistoryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetParameterHistoryCommand = serializeAws_json1_1GetParameterHistoryCommand;
    var serializeAws_json1_1GetParametersCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetParameters"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetParametersRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetParametersCommand = serializeAws_json1_1GetParametersCommand;
    var serializeAws_json1_1GetParametersByPathCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetParametersByPath"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetParametersByPathRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetParametersByPathCommand = serializeAws_json1_1GetParametersByPathCommand;
    var serializeAws_json1_1GetPatchBaselineCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetPatchBaseline"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetPatchBaselineRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetPatchBaselineCommand = serializeAws_json1_1GetPatchBaselineCommand;
    var serializeAws_json1_1GetPatchBaselineForPatchGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetPatchBaselineForPatchGroup"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetPatchBaselineForPatchGroupRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetPatchBaselineForPatchGroupCommand = serializeAws_json1_1GetPatchBaselineForPatchGroupCommand;
    var serializeAws_json1_1GetServiceSettingCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetServiceSetting"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetServiceSettingRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetServiceSettingCommand = serializeAws_json1_1GetServiceSettingCommand;
    var serializeAws_json1_1LabelParameterVersionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.LabelParameterVersion"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1LabelParameterVersionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1LabelParameterVersionCommand = serializeAws_json1_1LabelParameterVersionCommand;
    var serializeAws_json1_1ListAssociationsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListAssociations"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListAssociationsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListAssociationsCommand = serializeAws_json1_1ListAssociationsCommand;
    var serializeAws_json1_1ListAssociationVersionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListAssociationVersions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListAssociationVersionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListAssociationVersionsCommand = serializeAws_json1_1ListAssociationVersionsCommand;
    var serializeAws_json1_1ListCommandInvocationsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListCommandInvocations"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListCommandInvocationsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListCommandInvocationsCommand = serializeAws_json1_1ListCommandInvocationsCommand;
    var serializeAws_json1_1ListCommandsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListCommands"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListCommandsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListCommandsCommand = serializeAws_json1_1ListCommandsCommand;
    var serializeAws_json1_1ListComplianceItemsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListComplianceItems"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListComplianceItemsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListComplianceItemsCommand = serializeAws_json1_1ListComplianceItemsCommand;
    var serializeAws_json1_1ListComplianceSummariesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListComplianceSummaries"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListComplianceSummariesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListComplianceSummariesCommand = serializeAws_json1_1ListComplianceSummariesCommand;
    var serializeAws_json1_1ListDocumentMetadataHistoryCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListDocumentMetadataHistory"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListDocumentMetadataHistoryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListDocumentMetadataHistoryCommand = serializeAws_json1_1ListDocumentMetadataHistoryCommand;
    var serializeAws_json1_1ListDocumentsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListDocuments"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListDocumentsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListDocumentsCommand = serializeAws_json1_1ListDocumentsCommand;
    var serializeAws_json1_1ListDocumentVersionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListDocumentVersions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListDocumentVersionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListDocumentVersionsCommand = serializeAws_json1_1ListDocumentVersionsCommand;
    var serializeAws_json1_1ListInventoryEntriesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListInventoryEntries"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListInventoryEntriesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListInventoryEntriesCommand = serializeAws_json1_1ListInventoryEntriesCommand;
    var serializeAws_json1_1ListOpsItemEventsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListOpsItemEvents"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListOpsItemEventsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListOpsItemEventsCommand = serializeAws_json1_1ListOpsItemEventsCommand;
    var serializeAws_json1_1ListOpsItemRelatedItemsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListOpsItemRelatedItems"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListOpsItemRelatedItemsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListOpsItemRelatedItemsCommand = serializeAws_json1_1ListOpsItemRelatedItemsCommand;
    var serializeAws_json1_1ListOpsMetadataCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListOpsMetadata"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListOpsMetadataRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListOpsMetadataCommand = serializeAws_json1_1ListOpsMetadataCommand;
    var serializeAws_json1_1ListResourceComplianceSummariesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListResourceComplianceSummaries"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListResourceComplianceSummariesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListResourceComplianceSummariesCommand = serializeAws_json1_1ListResourceComplianceSummariesCommand;
    var serializeAws_json1_1ListResourceDataSyncCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListResourceDataSync"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListResourceDataSyncRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListResourceDataSyncCommand = serializeAws_json1_1ListResourceDataSyncCommand;
    var serializeAws_json1_1ListTagsForResourceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListTagsForResource"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListTagsForResourceRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListTagsForResourceCommand = serializeAws_json1_1ListTagsForResourceCommand;
    var serializeAws_json1_1ModifyDocumentPermissionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ModifyDocumentPermission"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ModifyDocumentPermissionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ModifyDocumentPermissionCommand = serializeAws_json1_1ModifyDocumentPermissionCommand;
    var serializeAws_json1_1PutComplianceItemsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.PutComplianceItems"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1PutComplianceItemsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1PutComplianceItemsCommand = serializeAws_json1_1PutComplianceItemsCommand;
    var serializeAws_json1_1PutInventoryCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.PutInventory"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1PutInventoryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1PutInventoryCommand = serializeAws_json1_1PutInventoryCommand;
    var serializeAws_json1_1PutParameterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.PutParameter"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1PutParameterRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1PutParameterCommand = serializeAws_json1_1PutParameterCommand;
    var serializeAws_json1_1RegisterDefaultPatchBaselineCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.RegisterDefaultPatchBaseline"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1RegisterDefaultPatchBaselineRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1RegisterDefaultPatchBaselineCommand = serializeAws_json1_1RegisterDefaultPatchBaselineCommand;
    var serializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.RegisterPatchBaselineForPatchGroup"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1RegisterPatchBaselineForPatchGroupRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand = serializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand;
    var serializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.RegisterTargetWithMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1RegisterTargetWithMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand = serializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand;
    var serializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.RegisterTaskWithMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1RegisterTaskWithMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand = serializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand;
    var serializeAws_json1_1RemoveTagsFromResourceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.RemoveTagsFromResource"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1RemoveTagsFromResourceRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1RemoveTagsFromResourceCommand = serializeAws_json1_1RemoveTagsFromResourceCommand;
    var serializeAws_json1_1ResetServiceSettingCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ResetServiceSetting"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ResetServiceSettingRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ResetServiceSettingCommand = serializeAws_json1_1ResetServiceSettingCommand;
    var serializeAws_json1_1ResumeSessionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ResumeSession"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ResumeSessionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ResumeSessionCommand = serializeAws_json1_1ResumeSessionCommand;
    var serializeAws_json1_1SendAutomationSignalCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.SendAutomationSignal"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1SendAutomationSignalRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1SendAutomationSignalCommand = serializeAws_json1_1SendAutomationSignalCommand;
    var serializeAws_json1_1SendCommandCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.SendCommand"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1SendCommandRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1SendCommandCommand = serializeAws_json1_1SendCommandCommand;
    var serializeAws_json1_1StartAssociationsOnceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.StartAssociationsOnce"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1StartAssociationsOnceRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1StartAssociationsOnceCommand = serializeAws_json1_1StartAssociationsOnceCommand;
    var serializeAws_json1_1StartAutomationExecutionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.StartAutomationExecution"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1StartAutomationExecutionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1StartAutomationExecutionCommand = serializeAws_json1_1StartAutomationExecutionCommand;
    var serializeAws_json1_1StartChangeRequestExecutionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.StartChangeRequestExecution"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1StartChangeRequestExecutionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1StartChangeRequestExecutionCommand = serializeAws_json1_1StartChangeRequestExecutionCommand;
    var serializeAws_json1_1StartSessionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.StartSession"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1StartSessionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1StartSessionCommand = serializeAws_json1_1StartSessionCommand;
    var serializeAws_json1_1StopAutomationExecutionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.StopAutomationExecution"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1StopAutomationExecutionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1StopAutomationExecutionCommand = serializeAws_json1_1StopAutomationExecutionCommand;
    var serializeAws_json1_1TerminateSessionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.TerminateSession"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1TerminateSessionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1TerminateSessionCommand = serializeAws_json1_1TerminateSessionCommand;
    var serializeAws_json1_1UnlabelParameterVersionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UnlabelParameterVersion"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UnlabelParameterVersionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UnlabelParameterVersionCommand = serializeAws_json1_1UnlabelParameterVersionCommand;
    var serializeAws_json1_1UpdateAssociationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateAssociation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateAssociationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateAssociationCommand = serializeAws_json1_1UpdateAssociationCommand;
    var serializeAws_json1_1UpdateAssociationStatusCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateAssociationStatus"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateAssociationStatusRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateAssociationStatusCommand = serializeAws_json1_1UpdateAssociationStatusCommand;
    var serializeAws_json1_1UpdateDocumentCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateDocument"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateDocumentRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateDocumentCommand = serializeAws_json1_1UpdateDocumentCommand;
    var serializeAws_json1_1UpdateDocumentDefaultVersionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateDocumentDefaultVersion"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateDocumentDefaultVersionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateDocumentDefaultVersionCommand = serializeAws_json1_1UpdateDocumentDefaultVersionCommand;
    var serializeAws_json1_1UpdateDocumentMetadataCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateDocumentMetadata"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateDocumentMetadataRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateDocumentMetadataCommand = serializeAws_json1_1UpdateDocumentMetadataCommand;
    var serializeAws_json1_1UpdateMaintenanceWindowCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateMaintenanceWindowCommand = serializeAws_json1_1UpdateMaintenanceWindowCommand;
    var serializeAws_json1_1UpdateMaintenanceWindowTargetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateMaintenanceWindowTarget"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateMaintenanceWindowTargetRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateMaintenanceWindowTargetCommand = serializeAws_json1_1UpdateMaintenanceWindowTargetCommand;
    var serializeAws_json1_1UpdateMaintenanceWindowTaskCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateMaintenanceWindowTask"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateMaintenanceWindowTaskRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateMaintenanceWindowTaskCommand = serializeAws_json1_1UpdateMaintenanceWindowTaskCommand;
    var serializeAws_json1_1UpdateManagedInstanceRoleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateManagedInstanceRole"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateManagedInstanceRoleRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateManagedInstanceRoleCommand = serializeAws_json1_1UpdateManagedInstanceRoleCommand;
    var serializeAws_json1_1UpdateOpsItemCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateOpsItem"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateOpsItemRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateOpsItemCommand = serializeAws_json1_1UpdateOpsItemCommand;
    var serializeAws_json1_1UpdateOpsMetadataCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateOpsMetadata"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateOpsMetadataRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateOpsMetadataCommand = serializeAws_json1_1UpdateOpsMetadataCommand;
    var serializeAws_json1_1UpdatePatchBaselineCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdatePatchBaseline"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdatePatchBaselineRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdatePatchBaselineCommand = serializeAws_json1_1UpdatePatchBaselineCommand;
    var serializeAws_json1_1UpdateResourceDataSyncCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateResourceDataSync"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateResourceDataSyncRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateResourceDataSyncCommand = serializeAws_json1_1UpdateResourceDataSyncCommand;
    var serializeAws_json1_1UpdateServiceSettingCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateServiceSetting"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateServiceSettingRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateServiceSettingCommand = serializeAws_json1_1UpdateServiceSettingCommand;
    var deserializeAws_json1_1AddTagsToResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1AddTagsToResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1AddTagsToResourceResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1AddTagsToResourceCommand = deserializeAws_json1_1AddTagsToResourceCommand;
    var deserializeAws_json1_1AddTagsToResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
          throw await deserializeAws_json1_1InvalidResourceTypeResponse(parsedOutput, context);
        case "TooManyTagsError":
        case "com.amazonaws.ssm#TooManyTagsError":
          throw await deserializeAws_json1_1TooManyTagsErrorResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1AssociateOpsItemRelatedItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1AssociateOpsItemRelatedItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1AssociateOpsItemRelatedItemResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1AssociateOpsItemRelatedItemCommand = deserializeAws_json1_1AssociateOpsItemRelatedItemCommand;
    var deserializeAws_json1_1AssociateOpsItemRelatedItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await deserializeAws_json1_1OpsItemInvalidParameterExceptionResponse(parsedOutput, context);
        case "OpsItemLimitExceededException":
        case "com.amazonaws.ssm#OpsItemLimitExceededException":
          throw await deserializeAws_json1_1OpsItemLimitExceededExceptionResponse(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
          throw await deserializeAws_json1_1OpsItemNotFoundExceptionResponse(parsedOutput, context);
        case "OpsItemRelatedItemAlreadyExistsException":
        case "com.amazonaws.ssm#OpsItemRelatedItemAlreadyExistsException":
          throw await deserializeAws_json1_1OpsItemRelatedItemAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1CancelCommandCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CancelCommandCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CancelCommandResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CancelCommandCommand = deserializeAws_json1_1CancelCommandCommand;
    var deserializeAws_json1_1CancelCommandCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DuplicateInstanceId":
        case "com.amazonaws.ssm#DuplicateInstanceId":
          throw await deserializeAws_json1_1DuplicateInstanceIdResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidCommandId":
        case "com.amazonaws.ssm#InvalidCommandId":
          throw await deserializeAws_json1_1InvalidCommandIdResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1CancelMaintenanceWindowExecutionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CancelMaintenanceWindowExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CancelMaintenanceWindowExecutionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CancelMaintenanceWindowExecutionCommand = deserializeAws_json1_1CancelMaintenanceWindowExecutionCommand;
    var deserializeAws_json1_1CancelMaintenanceWindowExecutionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1CreateActivationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateActivationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateActivationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CreateActivationCommand = deserializeAws_json1_1CreateActivationCommand;
    var deserializeAws_json1_1CreateActivationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
          throw await deserializeAws_json1_1InvalidParametersResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1CreateAssociationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateAssociationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateAssociationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CreateAssociationCommand = deserializeAws_json1_1CreateAssociationCommand;
    var deserializeAws_json1_1CreateAssociationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationAlreadyExists":
        case "com.amazonaws.ssm#AssociationAlreadyExists":
          throw await deserializeAws_json1_1AssociationAlreadyExistsResponse(parsedOutput, context);
        case "AssociationLimitExceeded":
        case "com.amazonaws.ssm#AssociationLimitExceeded":
          throw await deserializeAws_json1_1AssociationLimitExceededResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidOutputLocation":
        case "com.amazonaws.ssm#InvalidOutputLocation":
          throw await deserializeAws_json1_1InvalidOutputLocationResponse(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
          throw await deserializeAws_json1_1InvalidParametersResponse(parsedOutput, context);
        case "InvalidSchedule":
        case "com.amazonaws.ssm#InvalidSchedule":
          throw await deserializeAws_json1_1InvalidScheduleResponse(parsedOutput, context);
        case "InvalidTarget":
        case "com.amazonaws.ssm#InvalidTarget":
          throw await deserializeAws_json1_1InvalidTargetResponse(parsedOutput, context);
        case "InvalidTargetMaps":
        case "com.amazonaws.ssm#InvalidTargetMaps":
          throw await deserializeAws_json1_1InvalidTargetMapsResponse(parsedOutput, context);
        case "UnsupportedPlatformType":
        case "com.amazonaws.ssm#UnsupportedPlatformType":
          throw await deserializeAws_json1_1UnsupportedPlatformTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1CreateAssociationBatchCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateAssociationBatchCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateAssociationBatchResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CreateAssociationBatchCommand = deserializeAws_json1_1CreateAssociationBatchCommand;
    var deserializeAws_json1_1CreateAssociationBatchCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationLimitExceeded":
        case "com.amazonaws.ssm#AssociationLimitExceeded":
          throw await deserializeAws_json1_1AssociationLimitExceededResponse(parsedOutput, context);
        case "DuplicateInstanceId":
        case "com.amazonaws.ssm#DuplicateInstanceId":
          throw await deserializeAws_json1_1DuplicateInstanceIdResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidOutputLocation":
        case "com.amazonaws.ssm#InvalidOutputLocation":
          throw await deserializeAws_json1_1InvalidOutputLocationResponse(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
          throw await deserializeAws_json1_1InvalidParametersResponse(parsedOutput, context);
        case "InvalidSchedule":
        case "com.amazonaws.ssm#InvalidSchedule":
          throw await deserializeAws_json1_1InvalidScheduleResponse(parsedOutput, context);
        case "InvalidTarget":
        case "com.amazonaws.ssm#InvalidTarget":
          throw await deserializeAws_json1_1InvalidTargetResponse(parsedOutput, context);
        case "InvalidTargetMaps":
        case "com.amazonaws.ssm#InvalidTargetMaps":
          throw await deserializeAws_json1_1InvalidTargetMapsResponse(parsedOutput, context);
        case "UnsupportedPlatformType":
        case "com.amazonaws.ssm#UnsupportedPlatformType":
          throw await deserializeAws_json1_1UnsupportedPlatformTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1CreateDocumentCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateDocumentCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateDocumentResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CreateDocumentCommand = deserializeAws_json1_1CreateDocumentCommand;
    var deserializeAws_json1_1CreateDocumentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DocumentAlreadyExists":
        case "com.amazonaws.ssm#DocumentAlreadyExists":
          throw await deserializeAws_json1_1DocumentAlreadyExistsResponse(parsedOutput, context);
        case "DocumentLimitExceeded":
        case "com.amazonaws.ssm#DocumentLimitExceeded":
          throw await deserializeAws_json1_1DocumentLimitExceededResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocumentContent":
        case "com.amazonaws.ssm#InvalidDocumentContent":
          throw await deserializeAws_json1_1InvalidDocumentContentResponse(parsedOutput, context);
        case "InvalidDocumentSchemaVersion":
        case "com.amazonaws.ssm#InvalidDocumentSchemaVersion":
          throw await deserializeAws_json1_1InvalidDocumentSchemaVersionResponse(parsedOutput, context);
        case "MaxDocumentSizeExceeded":
        case "com.amazonaws.ssm#MaxDocumentSizeExceeded":
          throw await deserializeAws_json1_1MaxDocumentSizeExceededResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1CreateMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CreateMaintenanceWindowCommand = deserializeAws_json1_1CreateMaintenanceWindowCommand;
    var deserializeAws_json1_1CreateMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await deserializeAws_json1_1IdempotentParameterMismatchResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
          throw await deserializeAws_json1_1ResourceLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1CreateOpsItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateOpsItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateOpsItemResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CreateOpsItemCommand = deserializeAws_json1_1CreateOpsItemCommand;
    var deserializeAws_json1_1CreateOpsItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsItemAlreadyExistsException":
        case "com.amazonaws.ssm#OpsItemAlreadyExistsException":
          throw await deserializeAws_json1_1OpsItemAlreadyExistsExceptionResponse(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await deserializeAws_json1_1OpsItemInvalidParameterExceptionResponse(parsedOutput, context);
        case "OpsItemLimitExceededException":
        case "com.amazonaws.ssm#OpsItemLimitExceededException":
          throw await deserializeAws_json1_1OpsItemLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1CreateOpsMetadataCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateOpsMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateOpsMetadataResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CreateOpsMetadataCommand = deserializeAws_json1_1CreateOpsMetadataCommand;
    var deserializeAws_json1_1CreateOpsMetadataCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsMetadataAlreadyExistsException":
        case "com.amazonaws.ssm#OpsMetadataAlreadyExistsException":
          throw await deserializeAws_json1_1OpsMetadataAlreadyExistsExceptionResponse(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
          throw await deserializeAws_json1_1OpsMetadataInvalidArgumentExceptionResponse(parsedOutput, context);
        case "OpsMetadataLimitExceededException":
        case "com.amazonaws.ssm#OpsMetadataLimitExceededException":
          throw await deserializeAws_json1_1OpsMetadataLimitExceededExceptionResponse(parsedOutput, context);
        case "OpsMetadataTooManyUpdatesException":
        case "com.amazonaws.ssm#OpsMetadataTooManyUpdatesException":
          throw await deserializeAws_json1_1OpsMetadataTooManyUpdatesExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1CreatePatchBaselineCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreatePatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreatePatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CreatePatchBaselineCommand = deserializeAws_json1_1CreatePatchBaselineCommand;
    var deserializeAws_json1_1CreatePatchBaselineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await deserializeAws_json1_1IdempotentParameterMismatchResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
          throw await deserializeAws_json1_1ResourceLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1CreateResourceDataSyncCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateResourceDataSyncCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateResourceDataSyncResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CreateResourceDataSyncCommand = deserializeAws_json1_1CreateResourceDataSyncCommand;
    var deserializeAws_json1_1CreateResourceDataSyncCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceDataSyncAlreadyExistsException":
        case "com.amazonaws.ssm#ResourceDataSyncAlreadyExistsException":
          throw await deserializeAws_json1_1ResourceDataSyncAlreadyExistsExceptionResponse(parsedOutput, context);
        case "ResourceDataSyncCountExceededException":
        case "com.amazonaws.ssm#ResourceDataSyncCountExceededException":
          throw await deserializeAws_json1_1ResourceDataSyncCountExceededExceptionResponse(parsedOutput, context);
        case "ResourceDataSyncInvalidConfigurationException":
        case "com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException":
          throw await deserializeAws_json1_1ResourceDataSyncInvalidConfigurationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DeleteActivationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteActivationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteActivationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteActivationCommand = deserializeAws_json1_1DeleteActivationCommand;
    var deserializeAws_json1_1DeleteActivationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidActivation":
        case "com.amazonaws.ssm#InvalidActivation":
          throw await deserializeAws_json1_1InvalidActivationResponse(parsedOutput, context);
        case "InvalidActivationId":
        case "com.amazonaws.ssm#InvalidActivationId":
          throw await deserializeAws_json1_1InvalidActivationIdResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DeleteAssociationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteAssociationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteAssociationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteAssociationCommand = deserializeAws_json1_1DeleteAssociationCommand;
    var deserializeAws_json1_1DeleteAssociationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DeleteDocumentCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteDocumentCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteDocumentResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteDocumentCommand = deserializeAws_json1_1DeleteDocumentCommand;
    var deserializeAws_json1_1DeleteDocumentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociatedInstances":
        case "com.amazonaws.ssm#AssociatedInstances":
          throw await deserializeAws_json1_1AssociatedInstancesResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentOperation":
        case "com.amazonaws.ssm#InvalidDocumentOperation":
          throw await deserializeAws_json1_1InvalidDocumentOperationResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DeleteInventoryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteInventoryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteInventoryResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteInventoryCommand = deserializeAws_json1_1DeleteInventoryCommand;
    var deserializeAws_json1_1DeleteInventoryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDeleteInventoryParametersException":
        case "com.amazonaws.ssm#InvalidDeleteInventoryParametersException":
          throw await deserializeAws_json1_1InvalidDeleteInventoryParametersExceptionResponse(parsedOutput, context);
        case "InvalidInventoryRequestException":
        case "com.amazonaws.ssm#InvalidInventoryRequestException":
          throw await deserializeAws_json1_1InvalidInventoryRequestExceptionResponse(parsedOutput, context);
        case "InvalidOptionException":
        case "com.amazonaws.ssm#InvalidOptionException":
          throw await deserializeAws_json1_1InvalidOptionExceptionResponse(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await deserializeAws_json1_1InvalidTypeNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DeleteMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteMaintenanceWindowCommand = deserializeAws_json1_1DeleteMaintenanceWindowCommand;
    var deserializeAws_json1_1DeleteMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DeleteOpsMetadataCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteOpsMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteOpsMetadataResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteOpsMetadataCommand = deserializeAws_json1_1DeleteOpsMetadataCommand;
    var deserializeAws_json1_1DeleteOpsMetadataCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
          throw await deserializeAws_json1_1OpsMetadataInvalidArgumentExceptionResponse(parsedOutput, context);
        case "OpsMetadataNotFoundException":
        case "com.amazonaws.ssm#OpsMetadataNotFoundException":
          throw await deserializeAws_json1_1OpsMetadataNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DeleteParameterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteParameterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteParameterResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteParameterCommand = deserializeAws_json1_1DeleteParameterCommand;
    var deserializeAws_json1_1DeleteParameterCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
          throw await deserializeAws_json1_1ParameterNotFoundResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DeleteParametersCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteParametersCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteParametersResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteParametersCommand = deserializeAws_json1_1DeleteParametersCommand;
    var deserializeAws_json1_1DeleteParametersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DeletePatchBaselineCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeletePatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeletePatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeletePatchBaselineCommand = deserializeAws_json1_1DeletePatchBaselineCommand;
    var deserializeAws_json1_1DeletePatchBaselineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.ssm#ResourceInUseException":
          throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DeleteResourceDataSyncCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteResourceDataSyncCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteResourceDataSyncResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteResourceDataSyncCommand = deserializeAws_json1_1DeleteResourceDataSyncCommand;
    var deserializeAws_json1_1DeleteResourceDataSyncCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceDataSyncInvalidConfigurationException":
        case "com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException":
          throw await deserializeAws_json1_1ResourceDataSyncInvalidConfigurationExceptionResponse(parsedOutput, context);
        case "ResourceDataSyncNotFoundException":
        case "com.amazonaws.ssm#ResourceDataSyncNotFoundException":
          throw await deserializeAws_json1_1ResourceDataSyncNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DeregisterManagedInstanceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeregisterManagedInstanceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeregisterManagedInstanceResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeregisterManagedInstanceCommand = deserializeAws_json1_1DeregisterManagedInstanceCommand;
    var deserializeAws_json1_1DeregisterManagedInstanceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand = deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand;
    var deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand = deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand;
    var deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "TargetInUseException":
        case "com.amazonaws.ssm#TargetInUseException":
          throw await deserializeAws_json1_1TargetInUseExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand = deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand;
    var deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeActivationsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeActivationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeActivationsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeActivationsCommand = deserializeAws_json1_1DescribeActivationsCommand;
    var deserializeAws_json1_1DescribeActivationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeAssociationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAssociationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeAssociationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeAssociationCommand = deserializeAws_json1_1DescribeAssociationCommand;
    var deserializeAws_json1_1DescribeAssociationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAssociationVersion":
        case "com.amazonaws.ssm#InvalidAssociationVersion":
          throw await deserializeAws_json1_1InvalidAssociationVersionResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeAssociationExecutionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAssociationExecutionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeAssociationExecutionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeAssociationExecutionsCommand = deserializeAws_json1_1DescribeAssociationExecutionsCommand;
    var deserializeAws_json1_1DescribeAssociationExecutionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeAssociationExecutionTargetsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAssociationExecutionTargetsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeAssociationExecutionTargetsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeAssociationExecutionTargetsCommand = deserializeAws_json1_1DescribeAssociationExecutionTargetsCommand;
    var deserializeAws_json1_1DescribeAssociationExecutionTargetsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "AssociationExecutionDoesNotExist":
        case "com.amazonaws.ssm#AssociationExecutionDoesNotExist":
          throw await deserializeAws_json1_1AssociationExecutionDoesNotExistResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeAutomationExecutionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAutomationExecutionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeAutomationExecutionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeAutomationExecutionsCommand = deserializeAws_json1_1DescribeAutomationExecutionsCommand;
    var deserializeAws_json1_1DescribeAutomationExecutionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidFilterValue":
        case "com.amazonaws.ssm#InvalidFilterValue":
          throw await deserializeAws_json1_1InvalidFilterValueResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeAutomationStepExecutionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAutomationStepExecutionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeAutomationStepExecutionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeAutomationStepExecutionsCommand = deserializeAws_json1_1DescribeAutomationStepExecutionsCommand;
    var deserializeAws_json1_1DescribeAutomationStepExecutionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationExecutionNotFoundException":
        case "com.amazonaws.ssm#AutomationExecutionNotFoundException":
          throw await deserializeAws_json1_1AutomationExecutionNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidFilterValue":
        case "com.amazonaws.ssm#InvalidFilterValue":
          throw await deserializeAws_json1_1InvalidFilterValueResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeAvailablePatchesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAvailablePatchesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeAvailablePatchesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeAvailablePatchesCommand = deserializeAws_json1_1DescribeAvailablePatchesCommand;
    var deserializeAws_json1_1DescribeAvailablePatchesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeDocumentCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeDocumentCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeDocumentResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeDocumentCommand = deserializeAws_json1_1DescribeDocumentCommand;
    var deserializeAws_json1_1DescribeDocumentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeDocumentPermissionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeDocumentPermissionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeDocumentPermissionResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeDocumentPermissionCommand = deserializeAws_json1_1DescribeDocumentPermissionCommand;
    var deserializeAws_json1_1DescribeDocumentPermissionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentOperation":
        case "com.amazonaws.ssm#InvalidDocumentOperation":
          throw await deserializeAws_json1_1InvalidDocumentOperationResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "InvalidPermissionType":
        case "com.amazonaws.ssm#InvalidPermissionType":
          throw await deserializeAws_json1_1InvalidPermissionTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeEffectiveInstanceAssociationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeEffectiveInstanceAssociationsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand = deserializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand;
    var deserializeAws_json1_1DescribeEffectiveInstanceAssociationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand = deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand;
    var deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        case "UnsupportedOperatingSystem":
        case "com.amazonaws.ssm#UnsupportedOperatingSystem":
          throw await deserializeAws_json1_1UnsupportedOperatingSystemResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeInstanceAssociationsStatusCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeInstanceAssociationsStatusCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeInstanceAssociationsStatusResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeInstanceAssociationsStatusCommand = deserializeAws_json1_1DescribeInstanceAssociationsStatusCommand;
    var deserializeAws_json1_1DescribeInstanceAssociationsStatusCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeInstanceInformationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeInstanceInformationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeInstanceInformationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeInstanceInformationCommand = deserializeAws_json1_1DescribeInstanceInformationCommand;
    var deserializeAws_json1_1DescribeInstanceInformationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidInstanceInformationFilterValue":
        case "com.amazonaws.ssm#InvalidInstanceInformationFilterValue":
          throw await deserializeAws_json1_1InvalidInstanceInformationFilterValueResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeInstancePatchesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeInstancePatchesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeInstancePatchesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeInstancePatchesCommand = deserializeAws_json1_1DescribeInstancePatchesCommand;
    var deserializeAws_json1_1DescribeInstancePatchesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeInstancePatchStatesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeInstancePatchStatesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeInstancePatchStatesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeInstancePatchStatesCommand = deserializeAws_json1_1DescribeInstancePatchStatesCommand;
    var deserializeAws_json1_1DescribeInstancePatchStatesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand = deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand;
    var deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeInventoryDeletionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeInventoryDeletionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeInventoryDeletionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeInventoryDeletionsCommand = deserializeAws_json1_1DescribeInventoryDeletionsCommand;
    var deserializeAws_json1_1DescribeInventoryDeletionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDeletionIdException":
        case "com.amazonaws.ssm#InvalidDeletionIdException":
          throw await deserializeAws_json1_1InvalidDeletionIdExceptionResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowExecutionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowExecutionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand = deserializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand = deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand = deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeMaintenanceWindowsCommand = deserializeAws_json1_1DescribeMaintenanceWindowsCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowScheduleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowScheduleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowScheduleResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeMaintenanceWindowScheduleCommand = deserializeAws_json1_1DescribeMaintenanceWindowScheduleCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowScheduleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowsForTargetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowsForTargetResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand = deserializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowsForTargetCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowTargetsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowTargetsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowTargetsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeMaintenanceWindowTargetsCommand = deserializeAws_json1_1DescribeMaintenanceWindowTargetsCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowTargetsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowTasksCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowTasksCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowTasksResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeMaintenanceWindowTasksCommand = deserializeAws_json1_1DescribeMaintenanceWindowTasksCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowTasksCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeOpsItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeOpsItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeOpsItemsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeOpsItemsCommand = deserializeAws_json1_1DescribeOpsItemsCommand;
    var deserializeAws_json1_1DescribeOpsItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeParametersCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeParametersCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeParametersResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeParametersCommand = deserializeAws_json1_1DescribeParametersCommand;
    var deserializeAws_json1_1DescribeParametersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidFilterOption":
        case "com.amazonaws.ssm#InvalidFilterOption":
          throw await deserializeAws_json1_1InvalidFilterOptionResponse(parsedOutput, context);
        case "InvalidFilterValue":
        case "com.amazonaws.ssm#InvalidFilterValue":
          throw await deserializeAws_json1_1InvalidFilterValueResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribePatchBaselinesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribePatchBaselinesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribePatchBaselinesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribePatchBaselinesCommand = deserializeAws_json1_1DescribePatchBaselinesCommand;
    var deserializeAws_json1_1DescribePatchBaselinesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribePatchGroupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribePatchGroupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribePatchGroupsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribePatchGroupsCommand = deserializeAws_json1_1DescribePatchGroupsCommand;
    var deserializeAws_json1_1DescribePatchGroupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribePatchGroupStateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribePatchGroupStateCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribePatchGroupStateResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribePatchGroupStateCommand = deserializeAws_json1_1DescribePatchGroupStateCommand;
    var deserializeAws_json1_1DescribePatchGroupStateCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribePatchPropertiesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribePatchPropertiesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribePatchPropertiesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribePatchPropertiesCommand = deserializeAws_json1_1DescribePatchPropertiesCommand;
    var deserializeAws_json1_1DescribePatchPropertiesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DescribeSessionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeSessionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeSessionsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeSessionsCommand = deserializeAws_json1_1DescribeSessionsCommand;
    var deserializeAws_json1_1DescribeSessionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1DisassociateOpsItemRelatedItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DisassociateOpsItemRelatedItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DisassociateOpsItemRelatedItemResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DisassociateOpsItemRelatedItemCommand = deserializeAws_json1_1DisassociateOpsItemRelatedItemCommand;
    var deserializeAws_json1_1DisassociateOpsItemRelatedItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await deserializeAws_json1_1OpsItemInvalidParameterExceptionResponse(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
          throw await deserializeAws_json1_1OpsItemNotFoundExceptionResponse(parsedOutput, context);
        case "OpsItemRelatedItemAssociationNotFoundException":
        case "com.amazonaws.ssm#OpsItemRelatedItemAssociationNotFoundException":
          throw await deserializeAws_json1_1OpsItemRelatedItemAssociationNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetAutomationExecutionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetAutomationExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetAutomationExecutionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetAutomationExecutionCommand = deserializeAws_json1_1GetAutomationExecutionCommand;
    var deserializeAws_json1_1GetAutomationExecutionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationExecutionNotFoundException":
        case "com.amazonaws.ssm#AutomationExecutionNotFoundException":
          throw await deserializeAws_json1_1AutomationExecutionNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetCalendarStateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetCalendarStateCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetCalendarStateResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetCalendarStateCommand = deserializeAws_json1_1GetCalendarStateCommand;
    var deserializeAws_json1_1GetCalendarStateCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentType":
        case "com.amazonaws.ssm#InvalidDocumentType":
          throw await deserializeAws_json1_1InvalidDocumentTypeResponse(parsedOutput, context);
        case "UnsupportedCalendarException":
        case "com.amazonaws.ssm#UnsupportedCalendarException":
          throw await deserializeAws_json1_1UnsupportedCalendarExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetCommandInvocationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetCommandInvocationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetCommandInvocationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetCommandInvocationCommand = deserializeAws_json1_1GetCommandInvocationCommand;
    var deserializeAws_json1_1GetCommandInvocationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidCommandId":
        case "com.amazonaws.ssm#InvalidCommandId":
          throw await deserializeAws_json1_1InvalidCommandIdResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidPluginName":
        case "com.amazonaws.ssm#InvalidPluginName":
          throw await deserializeAws_json1_1InvalidPluginNameResponse(parsedOutput, context);
        case "InvocationDoesNotExist":
        case "com.amazonaws.ssm#InvocationDoesNotExist":
          throw await deserializeAws_json1_1InvocationDoesNotExistResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetConnectionStatusCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetConnectionStatusCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetConnectionStatusResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetConnectionStatusCommand = deserializeAws_json1_1GetConnectionStatusCommand;
    var deserializeAws_json1_1GetConnectionStatusCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetDefaultPatchBaselineCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetDefaultPatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetDefaultPatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetDefaultPatchBaselineCommand = deserializeAws_json1_1GetDefaultPatchBaselineCommand;
    var deserializeAws_json1_1GetDefaultPatchBaselineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand = deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand;
    var deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "UnsupportedFeatureRequiredException":
        case "com.amazonaws.ssm#UnsupportedFeatureRequiredException":
          throw await deserializeAws_json1_1UnsupportedFeatureRequiredExceptionResponse(parsedOutput, context);
        case "UnsupportedOperatingSystem":
        case "com.amazonaws.ssm#UnsupportedOperatingSystem":
          throw await deserializeAws_json1_1UnsupportedOperatingSystemResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetDocumentCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetDocumentCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetDocumentResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetDocumentCommand = deserializeAws_json1_1GetDocumentCommand;
    var deserializeAws_json1_1GetDocumentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetInventoryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetInventoryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetInventoryResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetInventoryCommand = deserializeAws_json1_1GetInventoryCommand;
    var deserializeAws_json1_1GetInventoryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAggregatorException":
        case "com.amazonaws.ssm#InvalidAggregatorException":
          throw await deserializeAws_json1_1InvalidAggregatorExceptionResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidInventoryGroupException":
        case "com.amazonaws.ssm#InvalidInventoryGroupException":
          throw await deserializeAws_json1_1InvalidInventoryGroupExceptionResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "InvalidResultAttributeException":
        case "com.amazonaws.ssm#InvalidResultAttributeException":
          throw await deserializeAws_json1_1InvalidResultAttributeExceptionResponse(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await deserializeAws_json1_1InvalidTypeNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetInventorySchemaCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetInventorySchemaCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetInventorySchemaResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetInventorySchemaCommand = deserializeAws_json1_1GetInventorySchemaCommand;
    var deserializeAws_json1_1GetInventorySchemaCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await deserializeAws_json1_1InvalidTypeNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetMaintenanceWindowCommand = deserializeAws_json1_1GetMaintenanceWindowCommand;
    var deserializeAws_json1_1GetMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetMaintenanceWindowExecutionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetMaintenanceWindowExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetMaintenanceWindowExecutionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetMaintenanceWindowExecutionCommand = deserializeAws_json1_1GetMaintenanceWindowExecutionCommand;
    var deserializeAws_json1_1GetMaintenanceWindowExecutionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetMaintenanceWindowExecutionTaskCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetMaintenanceWindowExecutionTaskResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand = deserializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand;
    var deserializeAws_json1_1GetMaintenanceWindowExecutionTaskCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand = deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand;
    var deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetMaintenanceWindowTaskCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetMaintenanceWindowTaskCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetMaintenanceWindowTaskResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetMaintenanceWindowTaskCommand = deserializeAws_json1_1GetMaintenanceWindowTaskCommand;
    var deserializeAws_json1_1GetMaintenanceWindowTaskCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetOpsItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetOpsItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetOpsItemResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetOpsItemCommand = deserializeAws_json1_1GetOpsItemCommand;
    var deserializeAws_json1_1GetOpsItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
          throw await deserializeAws_json1_1OpsItemNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetOpsMetadataCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetOpsMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetOpsMetadataResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetOpsMetadataCommand = deserializeAws_json1_1GetOpsMetadataCommand;
    var deserializeAws_json1_1GetOpsMetadataCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
          throw await deserializeAws_json1_1OpsMetadataInvalidArgumentExceptionResponse(parsedOutput, context);
        case "OpsMetadataNotFoundException":
        case "com.amazonaws.ssm#OpsMetadataNotFoundException":
          throw await deserializeAws_json1_1OpsMetadataNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetOpsSummaryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetOpsSummaryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetOpsSummaryResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetOpsSummaryCommand = deserializeAws_json1_1GetOpsSummaryCommand;
    var deserializeAws_json1_1GetOpsSummaryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAggregatorException":
        case "com.amazonaws.ssm#InvalidAggregatorException":
          throw await deserializeAws_json1_1InvalidAggregatorExceptionResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await deserializeAws_json1_1InvalidTypeNameExceptionResponse(parsedOutput, context);
        case "ResourceDataSyncNotFoundException":
        case "com.amazonaws.ssm#ResourceDataSyncNotFoundException":
          throw await deserializeAws_json1_1ResourceDataSyncNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetParameterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetParameterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetParameterResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetParameterCommand = deserializeAws_json1_1GetParameterCommand;
    var deserializeAws_json1_1GetParameterCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
          throw await deserializeAws_json1_1InvalidKeyIdResponse(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
          throw await deserializeAws_json1_1ParameterNotFoundResponse(parsedOutput, context);
        case "ParameterVersionNotFound":
        case "com.amazonaws.ssm#ParameterVersionNotFound":
          throw await deserializeAws_json1_1ParameterVersionNotFoundResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetParameterHistoryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetParameterHistoryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetParameterHistoryResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetParameterHistoryCommand = deserializeAws_json1_1GetParameterHistoryCommand;
    var deserializeAws_json1_1GetParameterHistoryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
          throw await deserializeAws_json1_1InvalidKeyIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
          throw await deserializeAws_json1_1ParameterNotFoundResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetParametersCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetParametersCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetParametersResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetParametersCommand = deserializeAws_json1_1GetParametersCommand;
    var deserializeAws_json1_1GetParametersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
          throw await deserializeAws_json1_1InvalidKeyIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetParametersByPathCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetParametersByPathCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetParametersByPathResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetParametersByPathCommand = deserializeAws_json1_1GetParametersByPathCommand;
    var deserializeAws_json1_1GetParametersByPathCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidFilterOption":
        case "com.amazonaws.ssm#InvalidFilterOption":
          throw await deserializeAws_json1_1InvalidFilterOptionResponse(parsedOutput, context);
        case "InvalidFilterValue":
        case "com.amazonaws.ssm#InvalidFilterValue":
          throw await deserializeAws_json1_1InvalidFilterValueResponse(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
          throw await deserializeAws_json1_1InvalidKeyIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetPatchBaselineCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetPatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetPatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetPatchBaselineCommand = deserializeAws_json1_1GetPatchBaselineCommand;
    var deserializeAws_json1_1GetPatchBaselineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetPatchBaselineForPatchGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetPatchBaselineForPatchGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetPatchBaselineForPatchGroupResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetPatchBaselineForPatchGroupCommand = deserializeAws_json1_1GetPatchBaselineForPatchGroupCommand;
    var deserializeAws_json1_1GetPatchBaselineForPatchGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1GetServiceSettingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetServiceSettingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetServiceSettingResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetServiceSettingCommand = deserializeAws_json1_1GetServiceSettingCommand;
    var deserializeAws_json1_1GetServiceSettingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ServiceSettingNotFound":
        case "com.amazonaws.ssm#ServiceSettingNotFound":
          throw await deserializeAws_json1_1ServiceSettingNotFoundResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1LabelParameterVersionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1LabelParameterVersionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1LabelParameterVersionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1LabelParameterVersionCommand = deserializeAws_json1_1LabelParameterVersionCommand;
    var deserializeAws_json1_1LabelParameterVersionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
          throw await deserializeAws_json1_1ParameterNotFoundResponse(parsedOutput, context);
        case "ParameterVersionLabelLimitExceeded":
        case "com.amazonaws.ssm#ParameterVersionLabelLimitExceeded":
          throw await deserializeAws_json1_1ParameterVersionLabelLimitExceededResponse(parsedOutput, context);
        case "ParameterVersionNotFound":
        case "com.amazonaws.ssm#ParameterVersionNotFound":
          throw await deserializeAws_json1_1ParameterVersionNotFoundResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ListAssociationsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListAssociationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListAssociationsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListAssociationsCommand = deserializeAws_json1_1ListAssociationsCommand;
    var deserializeAws_json1_1ListAssociationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ListAssociationVersionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListAssociationVersionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListAssociationVersionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListAssociationVersionsCommand = deserializeAws_json1_1ListAssociationVersionsCommand;
    var deserializeAws_json1_1ListAssociationVersionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ListCommandInvocationsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListCommandInvocationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListCommandInvocationsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListCommandInvocationsCommand = deserializeAws_json1_1ListCommandInvocationsCommand;
    var deserializeAws_json1_1ListCommandInvocationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidCommandId":
        case "com.amazonaws.ssm#InvalidCommandId":
          throw await deserializeAws_json1_1InvalidCommandIdResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ListCommandsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListCommandsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListCommandsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListCommandsCommand = deserializeAws_json1_1ListCommandsCommand;
    var deserializeAws_json1_1ListCommandsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidCommandId":
        case "com.amazonaws.ssm#InvalidCommandId":
          throw await deserializeAws_json1_1InvalidCommandIdResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ListComplianceItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListComplianceItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListComplianceItemsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListComplianceItemsCommand = deserializeAws_json1_1ListComplianceItemsCommand;
    var deserializeAws_json1_1ListComplianceItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
          throw await deserializeAws_json1_1InvalidResourceTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ListComplianceSummariesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListComplianceSummariesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListComplianceSummariesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListComplianceSummariesCommand = deserializeAws_json1_1ListComplianceSummariesCommand;
    var deserializeAws_json1_1ListComplianceSummariesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ListDocumentMetadataHistoryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDocumentMetadataHistoryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListDocumentMetadataHistoryResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListDocumentMetadataHistoryCommand = deserializeAws_json1_1ListDocumentMetadataHistoryCommand;
    var deserializeAws_json1_1ListDocumentMetadataHistoryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ListDocumentsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDocumentsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListDocumentsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListDocumentsCommand = deserializeAws_json1_1ListDocumentsCommand;
    var deserializeAws_json1_1ListDocumentsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ListDocumentVersionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDocumentVersionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListDocumentVersionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListDocumentVersionsCommand = deserializeAws_json1_1ListDocumentVersionsCommand;
    var deserializeAws_json1_1ListDocumentVersionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ListInventoryEntriesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListInventoryEntriesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListInventoryEntriesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListInventoryEntriesCommand = deserializeAws_json1_1ListInventoryEntriesCommand;
    var deserializeAws_json1_1ListInventoryEntriesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await deserializeAws_json1_1InvalidTypeNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ListOpsItemEventsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListOpsItemEventsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListOpsItemEventsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListOpsItemEventsCommand = deserializeAws_json1_1ListOpsItemEventsCommand;
    var deserializeAws_json1_1ListOpsItemEventsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await deserializeAws_json1_1OpsItemInvalidParameterExceptionResponse(parsedOutput, context);
        case "OpsItemLimitExceededException":
        case "com.amazonaws.ssm#OpsItemLimitExceededException":
          throw await deserializeAws_json1_1OpsItemLimitExceededExceptionResponse(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
          throw await deserializeAws_json1_1OpsItemNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ListOpsItemRelatedItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListOpsItemRelatedItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListOpsItemRelatedItemsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListOpsItemRelatedItemsCommand = deserializeAws_json1_1ListOpsItemRelatedItemsCommand;
    var deserializeAws_json1_1ListOpsItemRelatedItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await deserializeAws_json1_1OpsItemInvalidParameterExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ListOpsMetadataCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListOpsMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListOpsMetadataResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListOpsMetadataCommand = deserializeAws_json1_1ListOpsMetadataCommand;
    var deserializeAws_json1_1ListOpsMetadataCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
          throw await deserializeAws_json1_1OpsMetadataInvalidArgumentExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ListResourceComplianceSummariesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListResourceComplianceSummariesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListResourceComplianceSummariesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListResourceComplianceSummariesCommand = deserializeAws_json1_1ListResourceComplianceSummariesCommand;
    var deserializeAws_json1_1ListResourceComplianceSummariesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ListResourceDataSyncCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListResourceDataSyncCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListResourceDataSyncResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListResourceDataSyncCommand = deserializeAws_json1_1ListResourceDataSyncCommand;
    var deserializeAws_json1_1ListResourceDataSyncCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "ResourceDataSyncInvalidConfigurationException":
        case "com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException":
          throw await deserializeAws_json1_1ResourceDataSyncInvalidConfigurationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ListTagsForResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTagsForResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListTagsForResourceResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListTagsForResourceCommand = deserializeAws_json1_1ListTagsForResourceCommand;
    var deserializeAws_json1_1ListTagsForResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
          throw await deserializeAws_json1_1InvalidResourceTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ModifyDocumentPermissionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ModifyDocumentPermissionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ModifyDocumentPermissionResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ModifyDocumentPermissionCommand = deserializeAws_json1_1ModifyDocumentPermissionCommand;
    var deserializeAws_json1_1ModifyDocumentPermissionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DocumentLimitExceeded":
        case "com.amazonaws.ssm#DocumentLimitExceeded":
          throw await deserializeAws_json1_1DocumentLimitExceededResponse(parsedOutput, context);
        case "DocumentPermissionLimit":
        case "com.amazonaws.ssm#DocumentPermissionLimit":
          throw await deserializeAws_json1_1DocumentPermissionLimitResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidPermissionType":
        case "com.amazonaws.ssm#InvalidPermissionType":
          throw await deserializeAws_json1_1InvalidPermissionTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1PutComplianceItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutComplianceItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1PutComplianceItemsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1PutComplianceItemsCommand = deserializeAws_json1_1PutComplianceItemsCommand;
    var deserializeAws_json1_1PutComplianceItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ComplianceTypeCountLimitExceededException":
        case "com.amazonaws.ssm#ComplianceTypeCountLimitExceededException":
          throw await deserializeAws_json1_1ComplianceTypeCountLimitExceededExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidItemContentException":
        case "com.amazonaws.ssm#InvalidItemContentException":
          throw await deserializeAws_json1_1InvalidItemContentExceptionResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
          throw await deserializeAws_json1_1InvalidResourceTypeResponse(parsedOutput, context);
        case "ItemSizeLimitExceededException":
        case "com.amazonaws.ssm#ItemSizeLimitExceededException":
          throw await deserializeAws_json1_1ItemSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "TotalSizeLimitExceededException":
        case "com.amazonaws.ssm#TotalSizeLimitExceededException":
          throw await deserializeAws_json1_1TotalSizeLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1PutInventoryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutInventoryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1PutInventoryResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1PutInventoryCommand = deserializeAws_json1_1PutInventoryCommand;
    var deserializeAws_json1_1PutInventoryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CustomSchemaCountLimitExceededException":
        case "com.amazonaws.ssm#CustomSchemaCountLimitExceededException":
          throw await deserializeAws_json1_1CustomSchemaCountLimitExceededExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidInventoryItemContextException":
        case "com.amazonaws.ssm#InvalidInventoryItemContextException":
          throw await deserializeAws_json1_1InvalidInventoryItemContextExceptionResponse(parsedOutput, context);
        case "InvalidItemContentException":
        case "com.amazonaws.ssm#InvalidItemContentException":
          throw await deserializeAws_json1_1InvalidItemContentExceptionResponse(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await deserializeAws_json1_1InvalidTypeNameExceptionResponse(parsedOutput, context);
        case "ItemContentMismatchException":
        case "com.amazonaws.ssm#ItemContentMismatchException":
          throw await deserializeAws_json1_1ItemContentMismatchExceptionResponse(parsedOutput, context);
        case "ItemSizeLimitExceededException":
        case "com.amazonaws.ssm#ItemSizeLimitExceededException":
          throw await deserializeAws_json1_1ItemSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "SubTypeCountLimitExceededException":
        case "com.amazonaws.ssm#SubTypeCountLimitExceededException":
          throw await deserializeAws_json1_1SubTypeCountLimitExceededExceptionResponse(parsedOutput, context);
        case "TotalSizeLimitExceededException":
        case "com.amazonaws.ssm#TotalSizeLimitExceededException":
          throw await deserializeAws_json1_1TotalSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "UnsupportedInventoryItemContextException":
        case "com.amazonaws.ssm#UnsupportedInventoryItemContextException":
          throw await deserializeAws_json1_1UnsupportedInventoryItemContextExceptionResponse(parsedOutput, context);
        case "UnsupportedInventorySchemaVersionException":
        case "com.amazonaws.ssm#UnsupportedInventorySchemaVersionException":
          throw await deserializeAws_json1_1UnsupportedInventorySchemaVersionExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1PutParameterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutParameterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1PutParameterResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1PutParameterCommand = deserializeAws_json1_1PutParameterCommand;
    var deserializeAws_json1_1PutParameterCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "HierarchyLevelLimitExceededException":
        case "com.amazonaws.ssm#HierarchyLevelLimitExceededException":
          throw await deserializeAws_json1_1HierarchyLevelLimitExceededExceptionResponse(parsedOutput, context);
        case "HierarchyTypeMismatchException":
        case "com.amazonaws.ssm#HierarchyTypeMismatchException":
          throw await deserializeAws_json1_1HierarchyTypeMismatchExceptionResponse(parsedOutput, context);
        case "IncompatiblePolicyException":
        case "com.amazonaws.ssm#IncompatiblePolicyException":
          throw await deserializeAws_json1_1IncompatiblePolicyExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAllowedPatternException":
        case "com.amazonaws.ssm#InvalidAllowedPatternException":
          throw await deserializeAws_json1_1InvalidAllowedPatternExceptionResponse(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
          throw await deserializeAws_json1_1InvalidKeyIdResponse(parsedOutput, context);
        case "InvalidPolicyAttributeException":
        case "com.amazonaws.ssm#InvalidPolicyAttributeException":
          throw await deserializeAws_json1_1InvalidPolicyAttributeExceptionResponse(parsedOutput, context);
        case "InvalidPolicyTypeException":
        case "com.amazonaws.ssm#InvalidPolicyTypeException":
          throw await deserializeAws_json1_1InvalidPolicyTypeExceptionResponse(parsedOutput, context);
        case "ParameterAlreadyExists":
        case "com.amazonaws.ssm#ParameterAlreadyExists":
          throw await deserializeAws_json1_1ParameterAlreadyExistsResponse(parsedOutput, context);
        case "ParameterLimitExceeded":
        case "com.amazonaws.ssm#ParameterLimitExceeded":
          throw await deserializeAws_json1_1ParameterLimitExceededResponse(parsedOutput, context);
        case "ParameterMaxVersionLimitExceeded":
        case "com.amazonaws.ssm#ParameterMaxVersionLimitExceeded":
          throw await deserializeAws_json1_1ParameterMaxVersionLimitExceededResponse(parsedOutput, context);
        case "ParameterPatternMismatchException":
        case "com.amazonaws.ssm#ParameterPatternMismatchException":
          throw await deserializeAws_json1_1ParameterPatternMismatchExceptionResponse(parsedOutput, context);
        case "PoliciesLimitExceededException":
        case "com.amazonaws.ssm#PoliciesLimitExceededException":
          throw await deserializeAws_json1_1PoliciesLimitExceededExceptionResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        case "UnsupportedParameterType":
        case "com.amazonaws.ssm#UnsupportedParameterType":
          throw await deserializeAws_json1_1UnsupportedParameterTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1RegisterDefaultPatchBaselineCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1RegisterDefaultPatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1RegisterDefaultPatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1RegisterDefaultPatchBaselineCommand = deserializeAws_json1_1RegisterDefaultPatchBaselineCommand;
    var deserializeAws_json1_1RegisterDefaultPatchBaselineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1RegisterPatchBaselineForPatchGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1RegisterPatchBaselineForPatchGroupResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand = deserializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand;
    var deserializeAws_json1_1RegisterPatchBaselineForPatchGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.ssm#AlreadyExistsException":
          throw await deserializeAws_json1_1AlreadyExistsExceptionResponse(parsedOutput, context);
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
          throw await deserializeAws_json1_1ResourceLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1RegisterTargetWithMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1RegisterTargetWithMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand = deserializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand;
    var deserializeAws_json1_1RegisterTargetWithMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await deserializeAws_json1_1IdempotentParameterMismatchResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
          throw await deserializeAws_json1_1ResourceLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1RegisterTaskWithMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1RegisterTaskWithMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand = deserializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand;
    var deserializeAws_json1_1RegisterTaskWithMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "FeatureNotAvailableException":
        case "com.amazonaws.ssm#FeatureNotAvailableException":
          throw await deserializeAws_json1_1FeatureNotAvailableExceptionResponse(parsedOutput, context);
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await deserializeAws_json1_1IdempotentParameterMismatchResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
          throw await deserializeAws_json1_1ResourceLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1RemoveTagsFromResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1RemoveTagsFromResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1RemoveTagsFromResourceResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1RemoveTagsFromResourceCommand = deserializeAws_json1_1RemoveTagsFromResourceCommand;
    var deserializeAws_json1_1RemoveTagsFromResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
          throw await deserializeAws_json1_1InvalidResourceTypeResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ResetServiceSettingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ResetServiceSettingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ResetServiceSettingResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ResetServiceSettingCommand = deserializeAws_json1_1ResetServiceSettingCommand;
    var deserializeAws_json1_1ResetServiceSettingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ServiceSettingNotFound":
        case "com.amazonaws.ssm#ServiceSettingNotFound":
          throw await deserializeAws_json1_1ServiceSettingNotFoundResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1ResumeSessionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ResumeSessionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ResumeSessionResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ResumeSessionCommand = deserializeAws_json1_1ResumeSessionCommand;
    var deserializeAws_json1_1ResumeSessionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1SendAutomationSignalCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1SendAutomationSignalCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1SendAutomationSignalResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1SendAutomationSignalCommand = deserializeAws_json1_1SendAutomationSignalCommand;
    var deserializeAws_json1_1SendAutomationSignalCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationExecutionNotFoundException":
        case "com.amazonaws.ssm#AutomationExecutionNotFoundException":
          throw await deserializeAws_json1_1AutomationExecutionNotFoundExceptionResponse(parsedOutput, context);
        case "AutomationStepNotFoundException":
        case "com.amazonaws.ssm#AutomationStepNotFoundException":
          throw await deserializeAws_json1_1AutomationStepNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAutomationSignalException":
        case "com.amazonaws.ssm#InvalidAutomationSignalException":
          throw await deserializeAws_json1_1InvalidAutomationSignalExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1SendCommandCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1SendCommandCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1SendCommandResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1SendCommandCommand = deserializeAws_json1_1SendCommandCommand;
    var deserializeAws_json1_1SendCommandCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DuplicateInstanceId":
        case "com.amazonaws.ssm#DuplicateInstanceId":
          throw await deserializeAws_json1_1DuplicateInstanceIdResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidNotificationConfig":
        case "com.amazonaws.ssm#InvalidNotificationConfig":
          throw await deserializeAws_json1_1InvalidNotificationConfigResponse(parsedOutput, context);
        case "InvalidOutputFolder":
        case "com.amazonaws.ssm#InvalidOutputFolder":
          throw await deserializeAws_json1_1InvalidOutputFolderResponse(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
          throw await deserializeAws_json1_1InvalidParametersResponse(parsedOutput, context);
        case "InvalidRole":
        case "com.amazonaws.ssm#InvalidRole":
          throw await deserializeAws_json1_1InvalidRoleResponse(parsedOutput, context);
        case "MaxDocumentSizeExceeded":
        case "com.amazonaws.ssm#MaxDocumentSizeExceeded":
          throw await deserializeAws_json1_1MaxDocumentSizeExceededResponse(parsedOutput, context);
        case "UnsupportedPlatformType":
        case "com.amazonaws.ssm#UnsupportedPlatformType":
          throw await deserializeAws_json1_1UnsupportedPlatformTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1StartAssociationsOnceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartAssociationsOnceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1StartAssociationsOnceResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1StartAssociationsOnceCommand = deserializeAws_json1_1StartAssociationsOnceCommand;
    var deserializeAws_json1_1StartAssociationsOnceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "InvalidAssociation":
        case "com.amazonaws.ssm#InvalidAssociation":
          throw await deserializeAws_json1_1InvalidAssociationResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1StartAutomationExecutionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartAutomationExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1StartAutomationExecutionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1StartAutomationExecutionCommand = deserializeAws_json1_1StartAutomationExecutionCommand;
    var deserializeAws_json1_1StartAutomationExecutionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationDefinitionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionNotFoundException":
          throw await deserializeAws_json1_1AutomationDefinitionNotFoundExceptionResponse(parsedOutput, context);
        case "AutomationDefinitionVersionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionVersionNotFoundException":
          throw await deserializeAws_json1_1AutomationDefinitionVersionNotFoundExceptionResponse(parsedOutput, context);
        case "AutomationExecutionLimitExceededException":
        case "com.amazonaws.ssm#AutomationExecutionLimitExceededException":
          throw await deserializeAws_json1_1AutomationExecutionLimitExceededExceptionResponse(parsedOutput, context);
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await deserializeAws_json1_1IdempotentParameterMismatchResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAutomationExecutionParametersException":
        case "com.amazonaws.ssm#InvalidAutomationExecutionParametersException":
          throw await deserializeAws_json1_1InvalidAutomationExecutionParametersExceptionResponse(parsedOutput, context);
        case "InvalidTarget":
        case "com.amazonaws.ssm#InvalidTarget":
          throw await deserializeAws_json1_1InvalidTargetResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1StartChangeRequestExecutionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartChangeRequestExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1StartChangeRequestExecutionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1StartChangeRequestExecutionCommand = deserializeAws_json1_1StartChangeRequestExecutionCommand;
    var deserializeAws_json1_1StartChangeRequestExecutionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationDefinitionNotApprovedException":
        case "com.amazonaws.ssm#AutomationDefinitionNotApprovedException":
          throw await deserializeAws_json1_1AutomationDefinitionNotApprovedExceptionResponse(parsedOutput, context);
        case "AutomationDefinitionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionNotFoundException":
          throw await deserializeAws_json1_1AutomationDefinitionNotFoundExceptionResponse(parsedOutput, context);
        case "AutomationDefinitionVersionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionVersionNotFoundException":
          throw await deserializeAws_json1_1AutomationDefinitionVersionNotFoundExceptionResponse(parsedOutput, context);
        case "AutomationExecutionLimitExceededException":
        case "com.amazonaws.ssm#AutomationExecutionLimitExceededException":
          throw await deserializeAws_json1_1AutomationExecutionLimitExceededExceptionResponse(parsedOutput, context);
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await deserializeAws_json1_1IdempotentParameterMismatchResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAutomationExecutionParametersException":
        case "com.amazonaws.ssm#InvalidAutomationExecutionParametersException":
          throw await deserializeAws_json1_1InvalidAutomationExecutionParametersExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1StartSessionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartSessionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1StartSessionResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1StartSessionCommand = deserializeAws_json1_1StartSessionCommand;
    var deserializeAws_json1_1StartSessionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "TargetNotConnected":
        case "com.amazonaws.ssm#TargetNotConnected":
          throw await deserializeAws_json1_1TargetNotConnectedResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1StopAutomationExecutionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopAutomationExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1StopAutomationExecutionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1StopAutomationExecutionCommand = deserializeAws_json1_1StopAutomationExecutionCommand;
    var deserializeAws_json1_1StopAutomationExecutionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationExecutionNotFoundException":
        case "com.amazonaws.ssm#AutomationExecutionNotFoundException":
          throw await deserializeAws_json1_1AutomationExecutionNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAutomationStatusUpdateException":
        case "com.amazonaws.ssm#InvalidAutomationStatusUpdateException":
          throw await deserializeAws_json1_1InvalidAutomationStatusUpdateExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1TerminateSessionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1TerminateSessionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1TerminateSessionResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1TerminateSessionCommand = deserializeAws_json1_1TerminateSessionCommand;
    var deserializeAws_json1_1TerminateSessionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1UnlabelParameterVersionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UnlabelParameterVersionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UnlabelParameterVersionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UnlabelParameterVersionCommand = deserializeAws_json1_1UnlabelParameterVersionCommand;
    var deserializeAws_json1_1UnlabelParameterVersionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
          throw await deserializeAws_json1_1ParameterNotFoundResponse(parsedOutput, context);
        case "ParameterVersionNotFound":
        case "com.amazonaws.ssm#ParameterVersionNotFound":
          throw await deserializeAws_json1_1ParameterVersionNotFoundResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1UpdateAssociationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateAssociationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateAssociationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateAssociationCommand = deserializeAws_json1_1UpdateAssociationCommand;
    var deserializeAws_json1_1UpdateAssociationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "AssociationVersionLimitExceeded":
        case "com.amazonaws.ssm#AssociationVersionLimitExceeded":
          throw await deserializeAws_json1_1AssociationVersionLimitExceededResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAssociationVersion":
        case "com.amazonaws.ssm#InvalidAssociationVersion":
          throw await deserializeAws_json1_1InvalidAssociationVersionResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        case "InvalidOutputLocation":
        case "com.amazonaws.ssm#InvalidOutputLocation":
          throw await deserializeAws_json1_1InvalidOutputLocationResponse(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
          throw await deserializeAws_json1_1InvalidParametersResponse(parsedOutput, context);
        case "InvalidSchedule":
        case "com.amazonaws.ssm#InvalidSchedule":
          throw await deserializeAws_json1_1InvalidScheduleResponse(parsedOutput, context);
        case "InvalidTarget":
        case "com.amazonaws.ssm#InvalidTarget":
          throw await deserializeAws_json1_1InvalidTargetResponse(parsedOutput, context);
        case "InvalidTargetMaps":
        case "com.amazonaws.ssm#InvalidTargetMaps":
          throw await deserializeAws_json1_1InvalidTargetMapsResponse(parsedOutput, context);
        case "InvalidUpdate":
        case "com.amazonaws.ssm#InvalidUpdate":
          throw await deserializeAws_json1_1InvalidUpdateResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1UpdateAssociationStatusCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateAssociationStatusCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateAssociationStatusResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateAssociationStatusCommand = deserializeAws_json1_1UpdateAssociationStatusCommand;
    var deserializeAws_json1_1UpdateAssociationStatusCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "StatusUnchanged":
        case "com.amazonaws.ssm#StatusUnchanged":
          throw await deserializeAws_json1_1StatusUnchangedResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1UpdateDocumentCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateDocumentCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateDocumentResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateDocumentCommand = deserializeAws_json1_1UpdateDocumentCommand;
    var deserializeAws_json1_1UpdateDocumentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DocumentVersionLimitExceeded":
        case "com.amazonaws.ssm#DocumentVersionLimitExceeded":
          throw await deserializeAws_json1_1DocumentVersionLimitExceededResponse(parsedOutput, context);
        case "DuplicateDocumentContent":
        case "com.amazonaws.ssm#DuplicateDocumentContent":
          throw await deserializeAws_json1_1DuplicateDocumentContentResponse(parsedOutput, context);
        case "DuplicateDocumentVersionName":
        case "com.amazonaws.ssm#DuplicateDocumentVersionName":
          throw await deserializeAws_json1_1DuplicateDocumentVersionNameResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentContent":
        case "com.amazonaws.ssm#InvalidDocumentContent":
          throw await deserializeAws_json1_1InvalidDocumentContentResponse(parsedOutput, context);
        case "InvalidDocumentOperation":
        case "com.amazonaws.ssm#InvalidDocumentOperation":
          throw await deserializeAws_json1_1InvalidDocumentOperationResponse(parsedOutput, context);
        case "InvalidDocumentSchemaVersion":
        case "com.amazonaws.ssm#InvalidDocumentSchemaVersion":
          throw await deserializeAws_json1_1InvalidDocumentSchemaVersionResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        case "MaxDocumentSizeExceeded":
        case "com.amazonaws.ssm#MaxDocumentSizeExceeded":
          throw await deserializeAws_json1_1MaxDocumentSizeExceededResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1UpdateDocumentDefaultVersionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateDocumentDefaultVersionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateDocumentDefaultVersionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateDocumentDefaultVersionCommand = deserializeAws_json1_1UpdateDocumentDefaultVersionCommand;
    var deserializeAws_json1_1UpdateDocumentDefaultVersionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentSchemaVersion":
        case "com.amazonaws.ssm#InvalidDocumentSchemaVersion":
          throw await deserializeAws_json1_1InvalidDocumentSchemaVersionResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1UpdateDocumentMetadataCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateDocumentMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateDocumentMetadataResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateDocumentMetadataCommand = deserializeAws_json1_1UpdateDocumentMetadataCommand;
    var deserializeAws_json1_1UpdateDocumentMetadataCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentOperation":
        case "com.amazonaws.ssm#InvalidDocumentOperation":
          throw await deserializeAws_json1_1InvalidDocumentOperationResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1UpdateMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateMaintenanceWindowCommand = deserializeAws_json1_1UpdateMaintenanceWindowCommand;
    var deserializeAws_json1_1UpdateMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1UpdateMaintenanceWindowTargetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateMaintenanceWindowTargetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateMaintenanceWindowTargetResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateMaintenanceWindowTargetCommand = deserializeAws_json1_1UpdateMaintenanceWindowTargetCommand;
    var deserializeAws_json1_1UpdateMaintenanceWindowTargetCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1UpdateMaintenanceWindowTaskCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateMaintenanceWindowTaskCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateMaintenanceWindowTaskResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateMaintenanceWindowTaskCommand = deserializeAws_json1_1UpdateMaintenanceWindowTaskCommand;
    var deserializeAws_json1_1UpdateMaintenanceWindowTaskCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1UpdateManagedInstanceRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateManagedInstanceRoleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateManagedInstanceRoleResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateManagedInstanceRoleCommand = deserializeAws_json1_1UpdateManagedInstanceRoleCommand;
    var deserializeAws_json1_1UpdateManagedInstanceRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1UpdateOpsItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateOpsItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateOpsItemResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateOpsItemCommand = deserializeAws_json1_1UpdateOpsItemCommand;
    var deserializeAws_json1_1UpdateOpsItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsItemAlreadyExistsException":
        case "com.amazonaws.ssm#OpsItemAlreadyExistsException":
          throw await deserializeAws_json1_1OpsItemAlreadyExistsExceptionResponse(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await deserializeAws_json1_1OpsItemInvalidParameterExceptionResponse(parsedOutput, context);
        case "OpsItemLimitExceededException":
        case "com.amazonaws.ssm#OpsItemLimitExceededException":
          throw await deserializeAws_json1_1OpsItemLimitExceededExceptionResponse(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
          throw await deserializeAws_json1_1OpsItemNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1UpdateOpsMetadataCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateOpsMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateOpsMetadataResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateOpsMetadataCommand = deserializeAws_json1_1UpdateOpsMetadataCommand;
    var deserializeAws_json1_1UpdateOpsMetadataCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
          throw await deserializeAws_json1_1OpsMetadataInvalidArgumentExceptionResponse(parsedOutput, context);
        case "OpsMetadataKeyLimitExceededException":
        case "com.amazonaws.ssm#OpsMetadataKeyLimitExceededException":
          throw await deserializeAws_json1_1OpsMetadataKeyLimitExceededExceptionResponse(parsedOutput, context);
        case "OpsMetadataNotFoundException":
        case "com.amazonaws.ssm#OpsMetadataNotFoundException":
          throw await deserializeAws_json1_1OpsMetadataNotFoundExceptionResponse(parsedOutput, context);
        case "OpsMetadataTooManyUpdatesException":
        case "com.amazonaws.ssm#OpsMetadataTooManyUpdatesException":
          throw await deserializeAws_json1_1OpsMetadataTooManyUpdatesExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1UpdatePatchBaselineCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdatePatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdatePatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdatePatchBaselineCommand = deserializeAws_json1_1UpdatePatchBaselineCommand;
    var deserializeAws_json1_1UpdatePatchBaselineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1UpdateResourceDataSyncCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateResourceDataSyncCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateResourceDataSyncResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateResourceDataSyncCommand = deserializeAws_json1_1UpdateResourceDataSyncCommand;
    var deserializeAws_json1_1UpdateResourceDataSyncCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceDataSyncConflictException":
        case "com.amazonaws.ssm#ResourceDataSyncConflictException":
          throw await deserializeAws_json1_1ResourceDataSyncConflictExceptionResponse(parsedOutput, context);
        case "ResourceDataSyncInvalidConfigurationException":
        case "com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException":
          throw await deserializeAws_json1_1ResourceDataSyncInvalidConfigurationExceptionResponse(parsedOutput, context);
        case "ResourceDataSyncNotFoundException":
        case "com.amazonaws.ssm#ResourceDataSyncNotFoundException":
          throw await deserializeAws_json1_1ResourceDataSyncNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1UpdateServiceSettingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateServiceSettingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateServiceSettingResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateServiceSettingCommand = deserializeAws_json1_1UpdateServiceSettingCommand;
    var deserializeAws_json1_1UpdateServiceSettingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ServiceSettingNotFound":
        case "com.amazonaws.ssm#ServiceSettingNotFound":
          throw await deserializeAws_json1_1ServiceSettingNotFoundResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSMServiceException_1.SSMServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_1AlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AlreadyExistsException(body, context);
      const exception = new models_0_1.AlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AssociatedInstancesResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AssociatedInstances(body, context);
      const exception = new models_0_1.AssociatedInstances({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AssociationAlreadyExistsResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AssociationAlreadyExists(body, context);
      const exception = new models_0_1.AssociationAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AssociationDoesNotExistResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AssociationDoesNotExist(body, context);
      const exception = new models_0_1.AssociationDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AssociationExecutionDoesNotExistResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AssociationExecutionDoesNotExist(body, context);
      const exception = new models_0_1.AssociationExecutionDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AssociationLimitExceededResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AssociationLimitExceeded(body, context);
      const exception = new models_0_1.AssociationLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AssociationVersionLimitExceededResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AssociationVersionLimitExceeded(body, context);
      const exception = new models_1_1.AssociationVersionLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AutomationDefinitionNotApprovedExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AutomationDefinitionNotApprovedException(body, context);
      const exception = new models_1_1.AutomationDefinitionNotApprovedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AutomationDefinitionNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AutomationDefinitionNotFoundException(body, context);
      const exception = new models_1_1.AutomationDefinitionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AutomationDefinitionVersionNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AutomationDefinitionVersionNotFoundException(body, context);
      const exception = new models_1_1.AutomationDefinitionVersionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AutomationExecutionLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AutomationExecutionLimitExceededException(body, context);
      const exception = new models_1_1.AutomationExecutionLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AutomationExecutionNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AutomationExecutionNotFoundException(body, context);
      const exception = new models_0_1.AutomationExecutionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AutomationStepNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AutomationStepNotFoundException(body, context);
      const exception = new models_1_1.AutomationStepNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ComplianceTypeCountLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ComplianceTypeCountLimitExceededException(body, context);
      const exception = new models_1_1.ComplianceTypeCountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1CustomSchemaCountLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1CustomSchemaCountLimitExceededException(body, context);
      const exception = new models_1_1.CustomSchemaCountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DocumentAlreadyExistsResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DocumentAlreadyExists(body, context);
      const exception = new models_0_1.DocumentAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DocumentLimitExceededResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DocumentLimitExceeded(body, context);
      const exception = new models_0_1.DocumentLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DocumentPermissionLimitResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DocumentPermissionLimit(body, context);
      const exception = new models_1_1.DocumentPermissionLimit({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DocumentVersionLimitExceededResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DocumentVersionLimitExceeded(body, context);
      const exception = new models_1_1.DocumentVersionLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DoesNotExistExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DoesNotExistException(body, context);
      const exception = new models_0_1.DoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DuplicateDocumentContentResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DuplicateDocumentContent(body, context);
      const exception = new models_1_1.DuplicateDocumentContent({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DuplicateDocumentVersionNameResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DuplicateDocumentVersionName(body, context);
      const exception = new models_1_1.DuplicateDocumentVersionName({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DuplicateInstanceIdResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DuplicateInstanceId(body, context);
      const exception = new models_0_1.DuplicateInstanceId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1FeatureNotAvailableExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1FeatureNotAvailableException(body, context);
      const exception = new models_1_1.FeatureNotAvailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1HierarchyLevelLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1HierarchyLevelLimitExceededException(body, context);
      const exception = new models_1_1.HierarchyLevelLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1HierarchyTypeMismatchExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1HierarchyTypeMismatchException(body, context);
      const exception = new models_1_1.HierarchyTypeMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1IdempotentParameterMismatchResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1IdempotentParameterMismatch(body, context);
      const exception = new models_0_1.IdempotentParameterMismatch({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1IncompatiblePolicyExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1IncompatiblePolicyException(body, context);
      const exception = new models_1_1.IncompatiblePolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InternalServerErrorResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InternalServerError(body, context);
      const exception = new models_0_1.InternalServerError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidActivationResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidActivation(body, context);
      const exception = new models_0_1.InvalidActivation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidActivationIdResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidActivationId(body, context);
      const exception = new models_0_1.InvalidActivationId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidAggregatorExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAggregatorException(body, context);
      const exception = new models_1_1.InvalidAggregatorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidAllowedPatternExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAllowedPatternException(body, context);
      const exception = new models_1_1.InvalidAllowedPatternException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidAssociationResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAssociation(body, context);
      const exception = new models_1_1.InvalidAssociation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidAssociationVersionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAssociationVersion(body, context);
      const exception = new models_0_1.InvalidAssociationVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidAutomationExecutionParametersExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAutomationExecutionParametersException(body, context);
      const exception = new models_1_1.InvalidAutomationExecutionParametersException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidAutomationSignalExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAutomationSignalException(body, context);
      const exception = new models_1_1.InvalidAutomationSignalException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidAutomationStatusUpdateExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAutomationStatusUpdateException(body, context);
      const exception = new models_1_1.InvalidAutomationStatusUpdateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidCommandIdResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidCommandId(body, context);
      const exception = new models_0_1.InvalidCommandId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDeleteInventoryParametersExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDeleteInventoryParametersException(body, context);
      const exception = new models_0_1.InvalidDeleteInventoryParametersException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDeletionIdExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDeletionIdException(body, context);
      const exception = new models_0_1.InvalidDeletionIdException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDocumentResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDocument(body, context);
      const exception = new models_0_1.InvalidDocument({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDocumentContentResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDocumentContent(body, context);
      const exception = new models_0_1.InvalidDocumentContent({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDocumentOperationResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDocumentOperation(body, context);
      const exception = new models_0_1.InvalidDocumentOperation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDocumentSchemaVersionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDocumentSchemaVersion(body, context);
      const exception = new models_0_1.InvalidDocumentSchemaVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDocumentTypeResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDocumentType(body, context);
      const exception = new models_1_1.InvalidDocumentType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDocumentVersionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDocumentVersion(body, context);
      const exception = new models_0_1.InvalidDocumentVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidFilterResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidFilter(body, context);
      const exception = new models_0_1.InvalidFilter({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidFilterKeyResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidFilterKey(body, context);
      const exception = new models_0_1.InvalidFilterKey({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidFilterOptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidFilterOption(body, context);
      const exception = new models_1_1.InvalidFilterOption({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidFilterValueResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidFilterValue(body, context);
      const exception = new models_0_1.InvalidFilterValue({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidInstanceIdResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidInstanceId(body, context);
      const exception = new models_0_1.InvalidInstanceId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidInstanceInformationFilterValueResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidInstanceInformationFilterValue(body, context);
      const exception = new models_0_1.InvalidInstanceInformationFilterValue({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidInventoryGroupExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidInventoryGroupException(body, context);
      const exception = new models_1_1.InvalidInventoryGroupException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidInventoryItemContextExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidInventoryItemContextException(body, context);
      const exception = new models_1_1.InvalidInventoryItemContextException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidInventoryRequestExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidInventoryRequestException(body, context);
      const exception = new models_0_1.InvalidInventoryRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidItemContentExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidItemContentException(body, context);
      const exception = new models_1_1.InvalidItemContentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidKeyIdResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidKeyId(body, context);
      const exception = new models_1_1.InvalidKeyId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidNextTokenResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidNextToken(body, context);
      const exception = new models_0_1.InvalidNextToken({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidNotificationConfigResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidNotificationConfig(body, context);
      const exception = new models_1_1.InvalidNotificationConfig({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidOptionExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidOptionException(body, context);
      const exception = new models_0_1.InvalidOptionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidOutputFolderResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidOutputFolder(body, context);
      const exception = new models_1_1.InvalidOutputFolder({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidOutputLocationResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidOutputLocation(body, context);
      const exception = new models_0_1.InvalidOutputLocation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidParametersResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidParameters(body, context);
      const exception = new models_0_1.InvalidParameters({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidPermissionTypeResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidPermissionType(body, context);
      const exception = new models_0_1.InvalidPermissionType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidPluginNameResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidPluginName(body, context);
      const exception = new models_1_1.InvalidPluginName({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidPolicyAttributeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidPolicyAttributeException(body, context);
      const exception = new models_1_1.InvalidPolicyAttributeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidPolicyTypeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidPolicyTypeException(body, context);
      const exception = new models_1_1.InvalidPolicyTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidResourceIdResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidResourceId(body, context);
      const exception = new models_0_1.InvalidResourceId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidResourceTypeResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidResourceType(body, context);
      const exception = new models_0_1.InvalidResourceType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidResultAttributeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidResultAttributeException(body, context);
      const exception = new models_1_1.InvalidResultAttributeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidRoleResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidRole(body, context);
      const exception = new models_1_1.InvalidRole({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidScheduleResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidSchedule(body, context);
      const exception = new models_0_1.InvalidSchedule({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidTargetResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidTarget(body, context);
      const exception = new models_0_1.InvalidTarget({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidTargetMapsResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidTargetMaps(body, context);
      const exception = new models_0_1.InvalidTargetMaps({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidTypeNameExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidTypeNameException(body, context);
      const exception = new models_0_1.InvalidTypeNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidUpdateResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidUpdate(body, context);
      const exception = new models_1_1.InvalidUpdate({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvocationDoesNotExistResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvocationDoesNotExist(body, context);
      const exception = new models_1_1.InvocationDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ItemContentMismatchExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ItemContentMismatchException(body, context);
      const exception = new models_1_1.ItemContentMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ItemSizeLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ItemSizeLimitExceededException(body, context);
      const exception = new models_1_1.ItemSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1MaxDocumentSizeExceededResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1MaxDocumentSizeExceeded(body, context);
      const exception = new models_0_1.MaxDocumentSizeExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsItemAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsItemAlreadyExistsException(body, context);
      const exception = new models_0_1.OpsItemAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsItemInvalidParameterExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsItemInvalidParameterException(body, context);
      const exception = new models_0_1.OpsItemInvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsItemLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsItemLimitExceededException(body, context);
      const exception = new models_0_1.OpsItemLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsItemNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsItemNotFoundException(body, context);
      const exception = new models_0_1.OpsItemNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsItemRelatedItemAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsItemRelatedItemAlreadyExistsException(body, context);
      const exception = new models_0_1.OpsItemRelatedItemAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsItemRelatedItemAssociationNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsItemRelatedItemAssociationNotFoundException(body, context);
      const exception = new models_1_1.OpsItemRelatedItemAssociationNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsMetadataAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsMetadataAlreadyExistsException(body, context);
      const exception = new models_0_1.OpsMetadataAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsMetadataInvalidArgumentExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsMetadataInvalidArgumentException(body, context);
      const exception = new models_0_1.OpsMetadataInvalidArgumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsMetadataKeyLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsMetadataKeyLimitExceededException(body, context);
      const exception = new models_2_1.OpsMetadataKeyLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsMetadataLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsMetadataLimitExceededException(body, context);
      const exception = new models_0_1.OpsMetadataLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsMetadataNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsMetadataNotFoundException(body, context);
      const exception = new models_0_1.OpsMetadataNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsMetadataTooManyUpdatesExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsMetadataTooManyUpdatesException(body, context);
      const exception = new models_0_1.OpsMetadataTooManyUpdatesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ParameterAlreadyExistsResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ParameterAlreadyExists(body, context);
      const exception = new models_1_1.ParameterAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ParameterLimitExceededResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ParameterLimitExceeded(body, context);
      const exception = new models_1_1.ParameterLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ParameterMaxVersionLimitExceededResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ParameterMaxVersionLimitExceeded(body, context);
      const exception = new models_1_1.ParameterMaxVersionLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ParameterNotFoundResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ParameterNotFound(body, context);
      const exception = new models_0_1.ParameterNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ParameterPatternMismatchExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ParameterPatternMismatchException(body, context);
      const exception = new models_1_1.ParameterPatternMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ParameterVersionLabelLimitExceededResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ParameterVersionLabelLimitExceeded(body, context);
      const exception = new models_1_1.ParameterVersionLabelLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ParameterVersionNotFoundResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ParameterVersionNotFound(body, context);
      const exception = new models_1_1.ParameterVersionNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1PoliciesLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1PoliciesLimitExceededException(body, context);
      const exception = new models_1_1.PoliciesLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ResourceDataSyncAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceDataSyncAlreadyExistsException(body, context);
      const exception = new models_0_1.ResourceDataSyncAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ResourceDataSyncConflictExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceDataSyncConflictException(body, context);
      const exception = new models_2_1.ResourceDataSyncConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ResourceDataSyncCountExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceDataSyncCountExceededException(body, context);
      const exception = new models_0_1.ResourceDataSyncCountExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ResourceDataSyncInvalidConfigurationExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceDataSyncInvalidConfigurationException(body, context);
      const exception = new models_0_1.ResourceDataSyncInvalidConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ResourceDataSyncNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceDataSyncNotFoundException(body, context);
      const exception = new models_0_1.ResourceDataSyncNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ResourceInUseExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceInUseException(body, context);
      const exception = new models_0_1.ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ResourceLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceLimitExceededException(body, context);
      const exception = new models_0_1.ResourceLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ServiceSettingNotFoundResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ServiceSettingNotFound(body, context);
      const exception = new models_1_1.ServiceSettingNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1StatusUnchangedResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1StatusUnchanged(body, context);
      const exception = new models_1_1.StatusUnchanged({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1SubTypeCountLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1SubTypeCountLimitExceededException(body, context);
      const exception = new models_1_1.SubTypeCountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1TargetInUseExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1TargetInUseException(body, context);
      const exception = new models_0_1.TargetInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1TargetNotConnectedResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1TargetNotConnected(body, context);
      const exception = new models_1_1.TargetNotConnected({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1TooManyTagsErrorResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1TooManyTagsError(body, context);
      const exception = new models_0_1.TooManyTagsError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1TooManyUpdatesResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1TooManyUpdates(body, context);
      const exception = new models_0_1.TooManyUpdates({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1TotalSizeLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1TotalSizeLimitExceededException(body, context);
      const exception = new models_1_1.TotalSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1UnsupportedCalendarExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1UnsupportedCalendarException(body, context);
      const exception = new models_1_1.UnsupportedCalendarException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1UnsupportedFeatureRequiredExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1UnsupportedFeatureRequiredException(body, context);
      const exception = new models_1_1.UnsupportedFeatureRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1UnsupportedInventoryItemContextExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1UnsupportedInventoryItemContextException(body, context);
      const exception = new models_1_1.UnsupportedInventoryItemContextException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1UnsupportedInventorySchemaVersionExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1UnsupportedInventorySchemaVersionException(body, context);
      const exception = new models_1_1.UnsupportedInventorySchemaVersionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1UnsupportedOperatingSystemResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1UnsupportedOperatingSystem(body, context);
      const exception = new models_0_1.UnsupportedOperatingSystem({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1UnsupportedParameterTypeResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1UnsupportedParameterType(body, context);
      const exception = new models_1_1.UnsupportedParameterType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1UnsupportedPlatformTypeResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1UnsupportedPlatformType(body, context);
      const exception = new models_0_1.UnsupportedPlatformType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var serializeAws_json1_1AccountIdList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1Accounts = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1AddTagsToResourceRequest = (input, context) => {
      return {
        ...input.ResourceId !== void 0 && input.ResourceId !== null && { ResourceId: input.ResourceId },
        ...input.ResourceType !== void 0 && input.ResourceType !== null && { ResourceType: input.ResourceType },
        ...input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }
      };
    };
    var serializeAws_json1_1AssociateOpsItemRelatedItemRequest = (input, context) => {
      return {
        ...input.AssociationType !== void 0 && input.AssociationType !== null && { AssociationType: input.AssociationType },
        ...input.OpsItemId !== void 0 && input.OpsItemId !== null && { OpsItemId: input.OpsItemId },
        ...input.ResourceType !== void 0 && input.ResourceType !== null && { ResourceType: input.ResourceType },
        ...input.ResourceUri !== void 0 && input.ResourceUri !== null && { ResourceUri: input.ResourceUri }
      };
    };
    var serializeAws_json1_1AssociationExecutionFilter = (input, context) => {
      return {
        ...input.Key !== void 0 && input.Key !== null && { Key: input.Key },
        ...input.Type !== void 0 && input.Type !== null && { Type: input.Type },
        ...input.Value !== void 0 && input.Value !== null && { Value: input.Value }
      };
    };
    var serializeAws_json1_1AssociationExecutionFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1AssociationExecutionFilter(entry, context);
      });
    };
    var serializeAws_json1_1AssociationExecutionTargetsFilter = (input, context) => {
      return {
        ...input.Key !== void 0 && input.Key !== null && { Key: input.Key },
        ...input.Value !== void 0 && input.Value !== null && { Value: input.Value }
      };
    };
    var serializeAws_json1_1AssociationExecutionTargetsFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1AssociationExecutionTargetsFilter(entry, context);
      });
    };
    var serializeAws_json1_1AssociationFilter = (input, context) => {
      return {
        ...input.key !== void 0 && input.key !== null && { key: input.key },
        ...input.value !== void 0 && input.value !== null && { value: input.value }
      };
    };
    var serializeAws_json1_1AssociationFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1AssociationFilter(entry, context);
      });
    };
    var serializeAws_json1_1AssociationIdList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1AssociationStatus = (input, context) => {
      return {
        ...input.AdditionalInfo !== void 0 && input.AdditionalInfo !== null && { AdditionalInfo: input.AdditionalInfo },
        ...input.Date !== void 0 && input.Date !== null && { Date: Math.round(input.Date.getTime() / 1e3) },
        ...input.Message !== void 0 && input.Message !== null && { Message: input.Message },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name }
      };
    };
    var serializeAws_json1_1AttachmentsSource = (input, context) => {
      return {
        ...input.Key !== void 0 && input.Key !== null && { Key: input.Key },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.Values !== void 0 && input.Values !== null && { Values: serializeAws_json1_1AttachmentsSourceValues(input.Values, context) }
      };
    };
    var serializeAws_json1_1AttachmentsSourceList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1AttachmentsSource(entry, context);
      });
    };
    var serializeAws_json1_1AttachmentsSourceValues = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1AutomationExecutionFilter = (input, context) => {
      return {
        ...input.Key !== void 0 && input.Key !== null && { Key: input.Key },
        ...input.Values !== void 0 && input.Values !== null && {
          Values: serializeAws_json1_1AutomationExecutionFilterValueList(input.Values, context)
        }
      };
    };
    var serializeAws_json1_1AutomationExecutionFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1AutomationExecutionFilter(entry, context);
      });
    };
    var serializeAws_json1_1AutomationExecutionFilterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1AutomationParameterMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_1AutomationParameterValueList(value, context)
        };
      }, {});
    };
    var serializeAws_json1_1AutomationParameterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1BaselineOverride = (input, context) => {
      return {
        ...input.ApprovalRules !== void 0 && input.ApprovalRules !== null && {
          ApprovalRules: serializeAws_json1_1PatchRuleGroup(input.ApprovalRules, context)
        },
        ...input.ApprovedPatches !== void 0 && input.ApprovedPatches !== null && {
          ApprovedPatches: serializeAws_json1_1PatchIdList(input.ApprovedPatches, context)
        },
        ...input.ApprovedPatchesComplianceLevel !== void 0 && input.ApprovedPatchesComplianceLevel !== null && {
          ApprovedPatchesComplianceLevel: input.ApprovedPatchesComplianceLevel
        },
        ...input.ApprovedPatchesEnableNonSecurity !== void 0 && input.ApprovedPatchesEnableNonSecurity !== null && {
          ApprovedPatchesEnableNonSecurity: input.ApprovedPatchesEnableNonSecurity
        },
        ...input.GlobalFilters !== void 0 && input.GlobalFilters !== null && {
          GlobalFilters: serializeAws_json1_1PatchFilterGroup(input.GlobalFilters, context)
        },
        ...input.OperatingSystem !== void 0 && input.OperatingSystem !== null && { OperatingSystem: input.OperatingSystem },
        ...input.RejectedPatches !== void 0 && input.RejectedPatches !== null && {
          RejectedPatches: serializeAws_json1_1PatchIdList(input.RejectedPatches, context)
        },
        ...input.RejectedPatchesAction !== void 0 && input.RejectedPatchesAction !== null && { RejectedPatchesAction: input.RejectedPatchesAction },
        ...input.Sources !== void 0 && input.Sources !== null && { Sources: serializeAws_json1_1PatchSourceList(input.Sources, context) }
      };
    };
    var serializeAws_json1_1CalendarNameOrARNList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1CancelCommandRequest = (input, context) => {
      return {
        ...input.CommandId !== void 0 && input.CommandId !== null && { CommandId: input.CommandId },
        ...input.InstanceIds !== void 0 && input.InstanceIds !== null && { InstanceIds: serializeAws_json1_1InstanceIdList(input.InstanceIds, context) }
      };
    };
    var serializeAws_json1_1CancelMaintenanceWindowExecutionRequest = (input, context) => {
      return {
        ...input.WindowExecutionId !== void 0 && input.WindowExecutionId !== null && { WindowExecutionId: input.WindowExecutionId }
      };
    };
    var serializeAws_json1_1CloudWatchOutputConfig = (input, context) => {
      return {
        ...input.CloudWatchLogGroupName !== void 0 && input.CloudWatchLogGroupName !== null && { CloudWatchLogGroupName: input.CloudWatchLogGroupName },
        ...input.CloudWatchOutputEnabled !== void 0 && input.CloudWatchOutputEnabled !== null && { CloudWatchOutputEnabled: input.CloudWatchOutputEnabled }
      };
    };
    var serializeAws_json1_1CommandFilter = (input, context) => {
      return {
        ...input.key !== void 0 && input.key !== null && { key: input.key },
        ...input.value !== void 0 && input.value !== null && { value: input.value }
      };
    };
    var serializeAws_json1_1CommandFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1CommandFilter(entry, context);
      });
    };
    var serializeAws_json1_1ComplianceExecutionSummary = (input, context) => {
      return {
        ...input.ExecutionId !== void 0 && input.ExecutionId !== null && { ExecutionId: input.ExecutionId },
        ...input.ExecutionTime !== void 0 && input.ExecutionTime !== null && { ExecutionTime: Math.round(input.ExecutionTime.getTime() / 1e3) },
        ...input.ExecutionType !== void 0 && input.ExecutionType !== null && { ExecutionType: input.ExecutionType }
      };
    };
    var serializeAws_json1_1ComplianceItemDetails = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: value
        };
      }, {});
    };
    var serializeAws_json1_1ComplianceItemEntry = (input, context) => {
      return {
        ...input.Details !== void 0 && input.Details !== null && { Details: serializeAws_json1_1ComplianceItemDetails(input.Details, context) },
        ...input.Id !== void 0 && input.Id !== null && { Id: input.Id },
        ...input.Severity !== void 0 && input.Severity !== null && { Severity: input.Severity },
        ...input.Status !== void 0 && input.Status !== null && { Status: input.Status },
        ...input.Title !== void 0 && input.Title !== null && { Title: input.Title }
      };
    };
    var serializeAws_json1_1ComplianceItemEntryList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1ComplianceItemEntry(entry, context);
      });
    };
    var serializeAws_json1_1ComplianceResourceIdList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1ComplianceResourceTypeList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1ComplianceStringFilter = (input, context) => {
      return {
        ...input.Key !== void 0 && input.Key !== null && { Key: input.Key },
        ...input.Type !== void 0 && input.Type !== null && { Type: input.Type },
        ...input.Values !== void 0 && input.Values !== null && { Values: serializeAws_json1_1ComplianceStringFilterValueList(input.Values, context) }
      };
    };
    var serializeAws_json1_1ComplianceStringFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1ComplianceStringFilter(entry, context);
      });
    };
    var serializeAws_json1_1ComplianceStringFilterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1CreateActivationRequest = (input, context) => {
      return {
        ...input.DefaultInstanceName !== void 0 && input.DefaultInstanceName !== null && { DefaultInstanceName: input.DefaultInstanceName },
        ...input.Description !== void 0 && input.Description !== null && { Description: input.Description },
        ...input.ExpirationDate !== void 0 && input.ExpirationDate !== null && { ExpirationDate: Math.round(input.ExpirationDate.getTime() / 1e3) },
        ...input.IamRole !== void 0 && input.IamRole !== null && { IamRole: input.IamRole },
        ...input.RegistrationLimit !== void 0 && input.RegistrationLimit !== null && { RegistrationLimit: input.RegistrationLimit },
        ...input.RegistrationMetadata !== void 0 && input.RegistrationMetadata !== null && {
          RegistrationMetadata: serializeAws_json1_1RegistrationMetadataList(input.RegistrationMetadata, context)
        },
        ...input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }
      };
    };
    var serializeAws_json1_1CreateAssociationBatchRequest = (input, context) => {
      return {
        ...input.Entries !== void 0 && input.Entries !== null && {
          Entries: serializeAws_json1_1CreateAssociationBatchRequestEntries(input.Entries, context)
        }
      };
    };
    var serializeAws_json1_1CreateAssociationBatchRequestEntries = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1CreateAssociationBatchRequestEntry(entry, context);
      });
    };
    var serializeAws_json1_1CreateAssociationBatchRequestEntry = (input, context) => {
      return {
        ...input.ApplyOnlyAtCronInterval !== void 0 && input.ApplyOnlyAtCronInterval !== null && { ApplyOnlyAtCronInterval: input.ApplyOnlyAtCronInterval },
        ...input.AssociationName !== void 0 && input.AssociationName !== null && { AssociationName: input.AssociationName },
        ...input.AutomationTargetParameterName !== void 0 && input.AutomationTargetParameterName !== null && {
          AutomationTargetParameterName: input.AutomationTargetParameterName
        },
        ...input.CalendarNames !== void 0 && input.CalendarNames !== null && {
          CalendarNames: serializeAws_json1_1CalendarNameOrARNList(input.CalendarNames, context)
        },
        ...input.ComplianceSeverity !== void 0 && input.ComplianceSeverity !== null && { ComplianceSeverity: input.ComplianceSeverity },
        ...input.DocumentVersion !== void 0 && input.DocumentVersion !== null && { DocumentVersion: input.DocumentVersion },
        ...input.InstanceId !== void 0 && input.InstanceId !== null && { InstanceId: input.InstanceId },
        ...input.MaxConcurrency !== void 0 && input.MaxConcurrency !== null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors !== void 0 && input.MaxErrors !== null && { MaxErrors: input.MaxErrors },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.OutputLocation !== void 0 && input.OutputLocation !== null && {
          OutputLocation: serializeAws_json1_1InstanceAssociationOutputLocation(input.OutputLocation, context)
        },
        ...input.Parameters !== void 0 && input.Parameters !== null && { Parameters: serializeAws_json1_1Parameters(input.Parameters, context) },
        ...input.ScheduleExpression !== void 0 && input.ScheduleExpression !== null && { ScheduleExpression: input.ScheduleExpression },
        ...input.ScheduleOffset !== void 0 && input.ScheduleOffset !== null && { ScheduleOffset: input.ScheduleOffset },
        ...input.SyncCompliance !== void 0 && input.SyncCompliance !== null && { SyncCompliance: input.SyncCompliance },
        ...input.TargetLocations !== void 0 && input.TargetLocations !== null && {
          TargetLocations: serializeAws_json1_1TargetLocations(input.TargetLocations, context)
        },
        ...input.TargetMaps !== void 0 && input.TargetMaps !== null && { TargetMaps: serializeAws_json1_1TargetMaps(input.TargetMaps, context) },
        ...input.Targets !== void 0 && input.Targets !== null && { Targets: serializeAws_json1_1Targets(input.Targets, context) }
      };
    };
    var serializeAws_json1_1CreateAssociationRequest = (input, context) => {
      return {
        ...input.ApplyOnlyAtCronInterval !== void 0 && input.ApplyOnlyAtCronInterval !== null && { ApplyOnlyAtCronInterval: input.ApplyOnlyAtCronInterval },
        ...input.AssociationName !== void 0 && input.AssociationName !== null && { AssociationName: input.AssociationName },
        ...input.AutomationTargetParameterName !== void 0 && input.AutomationTargetParameterName !== null && {
          AutomationTargetParameterName: input.AutomationTargetParameterName
        },
        ...input.CalendarNames !== void 0 && input.CalendarNames !== null && {
          CalendarNames: serializeAws_json1_1CalendarNameOrARNList(input.CalendarNames, context)
        },
        ...input.ComplianceSeverity !== void 0 && input.ComplianceSeverity !== null && { ComplianceSeverity: input.ComplianceSeverity },
        ...input.DocumentVersion !== void 0 && input.DocumentVersion !== null && { DocumentVersion: input.DocumentVersion },
        ...input.InstanceId !== void 0 && input.InstanceId !== null && { InstanceId: input.InstanceId },
        ...input.MaxConcurrency !== void 0 && input.MaxConcurrency !== null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors !== void 0 && input.MaxErrors !== null && { MaxErrors: input.MaxErrors },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.OutputLocation !== void 0 && input.OutputLocation !== null && {
          OutputLocation: serializeAws_json1_1InstanceAssociationOutputLocation(input.OutputLocation, context)
        },
        ...input.Parameters !== void 0 && input.Parameters !== null && { Parameters: serializeAws_json1_1Parameters(input.Parameters, context) },
        ...input.ScheduleExpression !== void 0 && input.ScheduleExpression !== null && { ScheduleExpression: input.ScheduleExpression },
        ...input.ScheduleOffset !== void 0 && input.ScheduleOffset !== null && { ScheduleOffset: input.ScheduleOffset },
        ...input.SyncCompliance !== void 0 && input.SyncCompliance !== null && { SyncCompliance: input.SyncCompliance },
        ...input.TargetLocations !== void 0 && input.TargetLocations !== null && {
          TargetLocations: serializeAws_json1_1TargetLocations(input.TargetLocations, context)
        },
        ...input.TargetMaps !== void 0 && input.TargetMaps !== null && { TargetMaps: serializeAws_json1_1TargetMaps(input.TargetMaps, context) },
        ...input.Targets !== void 0 && input.Targets !== null && { Targets: serializeAws_json1_1Targets(input.Targets, context) }
      };
    };
    var serializeAws_json1_1CreateDocumentRequest = (input, context) => {
      return {
        ...input.Attachments !== void 0 && input.Attachments !== null && {
          Attachments: serializeAws_json1_1AttachmentsSourceList(input.Attachments, context)
        },
        ...input.Content !== void 0 && input.Content !== null && { Content: input.Content },
        ...input.DisplayName !== void 0 && input.DisplayName !== null && { DisplayName: input.DisplayName },
        ...input.DocumentFormat !== void 0 && input.DocumentFormat !== null && { DocumentFormat: input.DocumentFormat },
        ...input.DocumentType !== void 0 && input.DocumentType !== null && { DocumentType: input.DocumentType },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.Requires !== void 0 && input.Requires !== null && { Requires: serializeAws_json1_1DocumentRequiresList(input.Requires, context) },
        ...input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) },
        ...input.TargetType !== void 0 && input.TargetType !== null && { TargetType: input.TargetType },
        ...input.VersionName !== void 0 && input.VersionName !== null && { VersionName: input.VersionName }
      };
    };
    var serializeAws_json1_1CreateMaintenanceWindowRequest = (input, context) => {
      var _a;
      return {
        ...input.AllowUnassociatedTargets !== void 0 && input.AllowUnassociatedTargets !== null && { AllowUnassociatedTargets: input.AllowUnassociatedTargets },
        ClientToken: (_a = input.ClientToken) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)(),
        ...input.Cutoff !== void 0 && input.Cutoff !== null && { Cutoff: input.Cutoff },
        ...input.Description !== void 0 && input.Description !== null && { Description: input.Description },
        ...input.Duration !== void 0 && input.Duration !== null && { Duration: input.Duration },
        ...input.EndDate !== void 0 && input.EndDate !== null && { EndDate: input.EndDate },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.Schedule !== void 0 && input.Schedule !== null && { Schedule: input.Schedule },
        ...input.ScheduleOffset !== void 0 && input.ScheduleOffset !== null && { ScheduleOffset: input.ScheduleOffset },
        ...input.ScheduleTimezone !== void 0 && input.ScheduleTimezone !== null && { ScheduleTimezone: input.ScheduleTimezone },
        ...input.StartDate !== void 0 && input.StartDate !== null && { StartDate: input.StartDate },
        ...input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }
      };
    };
    var serializeAws_json1_1CreateOpsItemRequest = (input, context) => {
      return {
        ...input.ActualEndTime !== void 0 && input.ActualEndTime !== null && { ActualEndTime: Math.round(input.ActualEndTime.getTime() / 1e3) },
        ...input.ActualStartTime !== void 0 && input.ActualStartTime !== null && { ActualStartTime: Math.round(input.ActualStartTime.getTime() / 1e3) },
        ...input.Category !== void 0 && input.Category !== null && { Category: input.Category },
        ...input.Description !== void 0 && input.Description !== null && { Description: input.Description },
        ...input.Notifications !== void 0 && input.Notifications !== null && {
          Notifications: serializeAws_json1_1OpsItemNotifications(input.Notifications, context)
        },
        ...input.OperationalData !== void 0 && input.OperationalData !== null && {
          OperationalData: serializeAws_json1_1OpsItemOperationalData(input.OperationalData, context)
        },
        ...input.OpsItemType !== void 0 && input.OpsItemType !== null && { OpsItemType: input.OpsItemType },
        ...input.PlannedEndTime !== void 0 && input.PlannedEndTime !== null && { PlannedEndTime: Math.round(input.PlannedEndTime.getTime() / 1e3) },
        ...input.PlannedStartTime !== void 0 && input.PlannedStartTime !== null && { PlannedStartTime: Math.round(input.PlannedStartTime.getTime() / 1e3) },
        ...input.Priority !== void 0 && input.Priority !== null && { Priority: input.Priority },
        ...input.RelatedOpsItems !== void 0 && input.RelatedOpsItems !== null && {
          RelatedOpsItems: serializeAws_json1_1RelatedOpsItems(input.RelatedOpsItems, context)
        },
        ...input.Severity !== void 0 && input.Severity !== null && { Severity: input.Severity },
        ...input.Source !== void 0 && input.Source !== null && { Source: input.Source },
        ...input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) },
        ...input.Title !== void 0 && input.Title !== null && { Title: input.Title }
      };
    };
    var serializeAws_json1_1CreateOpsMetadataRequest = (input, context) => {
      return {
        ...input.Metadata !== void 0 && input.Metadata !== null && { Metadata: serializeAws_json1_1MetadataMap(input.Metadata, context) },
        ...input.ResourceId !== void 0 && input.ResourceId !== null && { ResourceId: input.ResourceId },
        ...input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }
      };
    };
    var serializeAws_json1_1CreatePatchBaselineRequest = (input, context) => {
      var _a;
      return {
        ...input.ApprovalRules !== void 0 && input.ApprovalRules !== null && {
          ApprovalRules: serializeAws_json1_1PatchRuleGroup(input.ApprovalRules, context)
        },
        ...input.ApprovedPatches !== void 0 && input.ApprovedPatches !== null && {
          ApprovedPatches: serializeAws_json1_1PatchIdList(input.ApprovedPatches, context)
        },
        ...input.ApprovedPatchesComplianceLevel !== void 0 && input.ApprovedPatchesComplianceLevel !== null && {
          ApprovedPatchesComplianceLevel: input.ApprovedPatchesComplianceLevel
        },
        ...input.ApprovedPatchesEnableNonSecurity !== void 0 && input.ApprovedPatchesEnableNonSecurity !== null && {
          ApprovedPatchesEnableNonSecurity: input.ApprovedPatchesEnableNonSecurity
        },
        ClientToken: (_a = input.ClientToken) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)(),
        ...input.Description !== void 0 && input.Description !== null && { Description: input.Description },
        ...input.GlobalFilters !== void 0 && input.GlobalFilters !== null && {
          GlobalFilters: serializeAws_json1_1PatchFilterGroup(input.GlobalFilters, context)
        },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.OperatingSystem !== void 0 && input.OperatingSystem !== null && { OperatingSystem: input.OperatingSystem },
        ...input.RejectedPatches !== void 0 && input.RejectedPatches !== null && {
          RejectedPatches: serializeAws_json1_1PatchIdList(input.RejectedPatches, context)
        },
        ...input.RejectedPatchesAction !== void 0 && input.RejectedPatchesAction !== null && { RejectedPatchesAction: input.RejectedPatchesAction },
        ...input.Sources !== void 0 && input.Sources !== null && { Sources: serializeAws_json1_1PatchSourceList(input.Sources, context) },
        ...input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }
      };
    };
    var serializeAws_json1_1CreateResourceDataSyncRequest = (input, context) => {
      return {
        ...input.S3Destination !== void 0 && input.S3Destination !== null && {
          S3Destination: serializeAws_json1_1ResourceDataSyncS3Destination(input.S3Destination, context)
        },
        ...input.SyncName !== void 0 && input.SyncName !== null && { SyncName: input.SyncName },
        ...input.SyncSource !== void 0 && input.SyncSource !== null && {
          SyncSource: serializeAws_json1_1ResourceDataSyncSource(input.SyncSource, context)
        },
        ...input.SyncType !== void 0 && input.SyncType !== null && { SyncType: input.SyncType }
      };
    };
    var serializeAws_json1_1DeleteActivationRequest = (input, context) => {
      return {
        ...input.ActivationId !== void 0 && input.ActivationId !== null && { ActivationId: input.ActivationId }
      };
    };
    var serializeAws_json1_1DeleteAssociationRequest = (input, context) => {
      return {
        ...input.AssociationId !== void 0 && input.AssociationId !== null && { AssociationId: input.AssociationId },
        ...input.InstanceId !== void 0 && input.InstanceId !== null && { InstanceId: input.InstanceId },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name }
      };
    };
    var serializeAws_json1_1DeleteDocumentRequest = (input, context) => {
      return {
        ...input.DocumentVersion !== void 0 && input.DocumentVersion !== null && { DocumentVersion: input.DocumentVersion },
        ...input.Force !== void 0 && input.Force !== null && { Force: input.Force },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.VersionName !== void 0 && input.VersionName !== null && { VersionName: input.VersionName }
      };
    };
    var serializeAws_json1_1DeleteInventoryRequest = (input, context) => {
      var _a;
      return {
        ClientToken: (_a = input.ClientToken) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)(),
        ...input.DryRun !== void 0 && input.DryRun !== null && { DryRun: input.DryRun },
        ...input.SchemaDeleteOption !== void 0 && input.SchemaDeleteOption !== null && { SchemaDeleteOption: input.SchemaDeleteOption },
        ...input.TypeName !== void 0 && input.TypeName !== null && { TypeName: input.TypeName }
      };
    };
    var serializeAws_json1_1DeleteMaintenanceWindowRequest = (input, context) => {
      return {
        ...input.WindowId !== void 0 && input.WindowId !== null && { WindowId: input.WindowId }
      };
    };
    var serializeAws_json1_1DeleteOpsMetadataRequest = (input, context) => {
      return {
        ...input.OpsMetadataArn !== void 0 && input.OpsMetadataArn !== null && { OpsMetadataArn: input.OpsMetadataArn }
      };
    };
    var serializeAws_json1_1DeleteParameterRequest = (input, context) => {
      return {
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name }
      };
    };
    var serializeAws_json1_1DeleteParametersRequest = (input, context) => {
      return {
        ...input.Names !== void 0 && input.Names !== null && { Names: serializeAws_json1_1ParameterNameList(input.Names, context) }
      };
    };
    var serializeAws_json1_1DeletePatchBaselineRequest = (input, context) => {
      return {
        ...input.BaselineId !== void 0 && input.BaselineId !== null && { BaselineId: input.BaselineId }
      };
    };
    var serializeAws_json1_1DeleteResourceDataSyncRequest = (input, context) => {
      return {
        ...input.SyncName !== void 0 && input.SyncName !== null && { SyncName: input.SyncName },
        ...input.SyncType !== void 0 && input.SyncType !== null && { SyncType: input.SyncType }
      };
    };
    var serializeAws_json1_1DeregisterManagedInstanceRequest = (input, context) => {
      return {
        ...input.InstanceId !== void 0 && input.InstanceId !== null && { InstanceId: input.InstanceId }
      };
    };
    var serializeAws_json1_1DeregisterPatchBaselineForPatchGroupRequest = (input, context) => {
      return {
        ...input.BaselineId !== void 0 && input.BaselineId !== null && { BaselineId: input.BaselineId },
        ...input.PatchGroup !== void 0 && input.PatchGroup !== null && { PatchGroup: input.PatchGroup }
      };
    };
    var serializeAws_json1_1DeregisterTargetFromMaintenanceWindowRequest = (input, context) => {
      return {
        ...input.Safe !== void 0 && input.Safe !== null && { Safe: input.Safe },
        ...input.WindowId !== void 0 && input.WindowId !== null && { WindowId: input.WindowId },
        ...input.WindowTargetId !== void 0 && input.WindowTargetId !== null && { WindowTargetId: input.WindowTargetId }
      };
    };
    var serializeAws_json1_1DeregisterTaskFromMaintenanceWindowRequest = (input, context) => {
      return {
        ...input.WindowId !== void 0 && input.WindowId !== null && { WindowId: input.WindowId },
        ...input.WindowTaskId !== void 0 && input.WindowTaskId !== null && { WindowTaskId: input.WindowTaskId }
      };
    };
    var serializeAws_json1_1DescribeActivationsFilter = (input, context) => {
      return {
        ...input.FilterKey !== void 0 && input.FilterKey !== null && { FilterKey: input.FilterKey },
        ...input.FilterValues !== void 0 && input.FilterValues !== null && { FilterValues: serializeAws_json1_1StringList(input.FilterValues, context) }
      };
    };
    var serializeAws_json1_1DescribeActivationsFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1DescribeActivationsFilter(entry, context);
      });
    };
    var serializeAws_json1_1DescribeActivationsRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1DescribeActivationsFilterList(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeAssociationExecutionsRequest = (input, context) => {
      return {
        ...input.AssociationId !== void 0 && input.AssociationId !== null && { AssociationId: input.AssociationId },
        ...input.Filters !== void 0 && input.Filters !== null && {
          Filters: serializeAws_json1_1AssociationExecutionFilterList(input.Filters, context)
        },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeAssociationExecutionTargetsRequest = (input, context) => {
      return {
        ...input.AssociationId !== void 0 && input.AssociationId !== null && { AssociationId: input.AssociationId },
        ...input.ExecutionId !== void 0 && input.ExecutionId !== null && { ExecutionId: input.ExecutionId },
        ...input.Filters !== void 0 && input.Filters !== null && {
          Filters: serializeAws_json1_1AssociationExecutionTargetsFilterList(input.Filters, context)
        },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeAssociationRequest = (input, context) => {
      return {
        ...input.AssociationId !== void 0 && input.AssociationId !== null && { AssociationId: input.AssociationId },
        ...input.AssociationVersion !== void 0 && input.AssociationVersion !== null && { AssociationVersion: input.AssociationVersion },
        ...input.InstanceId !== void 0 && input.InstanceId !== null && { InstanceId: input.InstanceId },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name }
      };
    };
    var serializeAws_json1_1DescribeAutomationExecutionsRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1AutomationExecutionFilterList(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeAutomationStepExecutionsRequest = (input, context) => {
      return {
        ...input.AutomationExecutionId !== void 0 && input.AutomationExecutionId !== null && { AutomationExecutionId: input.AutomationExecutionId },
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1StepExecutionFilterList(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.ReverseOrder !== void 0 && input.ReverseOrder !== null && { ReverseOrder: input.ReverseOrder }
      };
    };
    var serializeAws_json1_1DescribeAvailablePatchesRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1PatchOrchestratorFilterList(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeDocumentPermissionRequest = (input, context) => {
      return {
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.PermissionType !== void 0 && input.PermissionType !== null && { PermissionType: input.PermissionType }
      };
    };
    var serializeAws_json1_1DescribeDocumentRequest = (input, context) => {
      return {
        ...input.DocumentVersion !== void 0 && input.DocumentVersion !== null && { DocumentVersion: input.DocumentVersion },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.VersionName !== void 0 && input.VersionName !== null && { VersionName: input.VersionName }
      };
    };
    var serializeAws_json1_1DescribeEffectiveInstanceAssociationsRequest = (input, context) => {
      return {
        ...input.InstanceId !== void 0 && input.InstanceId !== null && { InstanceId: input.InstanceId },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeEffectivePatchesForPatchBaselineRequest = (input, context) => {
      return {
        ...input.BaselineId !== void 0 && input.BaselineId !== null && { BaselineId: input.BaselineId },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeInstanceAssociationsStatusRequest = (input, context) => {
      return {
        ...input.InstanceId !== void 0 && input.InstanceId !== null && { InstanceId: input.InstanceId },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeInstanceInformationRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && {
          Filters: serializeAws_json1_1InstanceInformationStringFilterList(input.Filters, context)
        },
        ...input.InstanceInformationFilterList !== void 0 && input.InstanceInformationFilterList !== null && {
          InstanceInformationFilterList: serializeAws_json1_1InstanceInformationFilterList(input.InstanceInformationFilterList, context)
        },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeInstancePatchesRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1PatchOrchestratorFilterList(input.Filters, context) },
        ...input.InstanceId !== void 0 && input.InstanceId !== null && { InstanceId: input.InstanceId },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeInstancePatchStatesForPatchGroupRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1InstancePatchStateFilterList(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.PatchGroup !== void 0 && input.PatchGroup !== null && { PatchGroup: input.PatchGroup }
      };
    };
    var serializeAws_json1_1DescribeInstancePatchStatesRequest = (input, context) => {
      return {
        ...input.InstanceIds !== void 0 && input.InstanceIds !== null && { InstanceIds: serializeAws_json1_1InstanceIdList(input.InstanceIds, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeInventoryDeletionsRequest = (input, context) => {
      return {
        ...input.DeletionId !== void 0 && input.DeletionId !== null && { DeletionId: input.DeletionId },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeMaintenanceWindowExecutionsRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1MaintenanceWindowFilterList(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.WindowId !== void 0 && input.WindowId !== null && { WindowId: input.WindowId }
      };
    };
    var serializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1MaintenanceWindowFilterList(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.TaskId !== void 0 && input.TaskId !== null && { TaskId: input.TaskId },
        ...input.WindowExecutionId !== void 0 && input.WindowExecutionId !== null && { WindowExecutionId: input.WindowExecutionId }
      };
    };
    var serializeAws_json1_1DescribeMaintenanceWindowExecutionTasksRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1MaintenanceWindowFilterList(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.WindowExecutionId !== void 0 && input.WindowExecutionId !== null && { WindowExecutionId: input.WindowExecutionId }
      };
    };
    var serializeAws_json1_1DescribeMaintenanceWindowScheduleRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1PatchOrchestratorFilterList(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.ResourceType !== void 0 && input.ResourceType !== null && { ResourceType: input.ResourceType },
        ...input.Targets !== void 0 && input.Targets !== null && { Targets: serializeAws_json1_1Targets(input.Targets, context) },
        ...input.WindowId !== void 0 && input.WindowId !== null && { WindowId: input.WindowId }
      };
    };
    var serializeAws_json1_1DescribeMaintenanceWindowsForTargetRequest = (input, context) => {
      return {
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.ResourceType !== void 0 && input.ResourceType !== null && { ResourceType: input.ResourceType },
        ...input.Targets !== void 0 && input.Targets !== null && { Targets: serializeAws_json1_1Targets(input.Targets, context) }
      };
    };
    var serializeAws_json1_1DescribeMaintenanceWindowsRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1MaintenanceWindowFilterList(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeMaintenanceWindowTargetsRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1MaintenanceWindowFilterList(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.WindowId !== void 0 && input.WindowId !== null && { WindowId: input.WindowId }
      };
    };
    var serializeAws_json1_1DescribeMaintenanceWindowTasksRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1MaintenanceWindowFilterList(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.WindowId !== void 0 && input.WindowId !== null && { WindowId: input.WindowId }
      };
    };
    var serializeAws_json1_1DescribeOpsItemsRequest = (input, context) => {
      return {
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.OpsItemFilters !== void 0 && input.OpsItemFilters !== null && {
          OpsItemFilters: serializeAws_json1_1OpsItemFilters(input.OpsItemFilters, context)
        }
      };
    };
    var serializeAws_json1_1DescribeParametersRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1ParametersFilterList(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.ParameterFilters !== void 0 && input.ParameterFilters !== null && {
          ParameterFilters: serializeAws_json1_1ParameterStringFilterList(input.ParameterFilters, context)
        }
      };
    };
    var serializeAws_json1_1DescribePatchBaselinesRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1PatchOrchestratorFilterList(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribePatchGroupsRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1PatchOrchestratorFilterList(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribePatchGroupStateRequest = (input, context) => {
      return {
        ...input.PatchGroup !== void 0 && input.PatchGroup !== null && { PatchGroup: input.PatchGroup }
      };
    };
    var serializeAws_json1_1DescribePatchPropertiesRequest = (input, context) => {
      return {
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.OperatingSystem !== void 0 && input.OperatingSystem !== null && { OperatingSystem: input.OperatingSystem },
        ...input.PatchSet !== void 0 && input.PatchSet !== null && { PatchSet: input.PatchSet },
        ...input.Property !== void 0 && input.Property !== null && { Property: input.Property }
      };
    };
    var serializeAws_json1_1DescribeSessionsRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1SessionFilterList(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.State !== void 0 && input.State !== null && { State: input.State }
      };
    };
    var serializeAws_json1_1DisassociateOpsItemRelatedItemRequest = (input, context) => {
      return {
        ...input.AssociationId !== void 0 && input.AssociationId !== null && { AssociationId: input.AssociationId },
        ...input.OpsItemId !== void 0 && input.OpsItemId !== null && { OpsItemId: input.OpsItemId }
      };
    };
    var serializeAws_json1_1DocumentFilter = (input, context) => {
      return {
        ...input.key !== void 0 && input.key !== null && { key: input.key },
        ...input.value !== void 0 && input.value !== null && { value: input.value }
      };
    };
    var serializeAws_json1_1DocumentFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1DocumentFilter(entry, context);
      });
    };
    var serializeAws_json1_1DocumentKeyValuesFilter = (input, context) => {
      return {
        ...input.Key !== void 0 && input.Key !== null && { Key: input.Key },
        ...input.Values !== void 0 && input.Values !== null && { Values: serializeAws_json1_1DocumentKeyValuesFilterValues(input.Values, context) }
      };
    };
    var serializeAws_json1_1DocumentKeyValuesFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1DocumentKeyValuesFilter(entry, context);
      });
    };
    var serializeAws_json1_1DocumentKeyValuesFilterValues = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1DocumentRequires = (input, context) => {
      return {
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.Version !== void 0 && input.Version !== null && { Version: input.Version }
      };
    };
    var serializeAws_json1_1DocumentRequiresList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1DocumentRequires(entry, context);
      });
    };
    var serializeAws_json1_1DocumentReviewCommentList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1DocumentReviewCommentSource(entry, context);
      });
    };
    var serializeAws_json1_1DocumentReviewCommentSource = (input, context) => {
      return {
        ...input.Content !== void 0 && input.Content !== null && { Content: input.Content },
        ...input.Type !== void 0 && input.Type !== null && { Type: input.Type }
      };
    };
    var serializeAws_json1_1DocumentReviews = (input, context) => {
      return {
        ...input.Action !== void 0 && input.Action !== null && { Action: input.Action },
        ...input.Comment !== void 0 && input.Comment !== null && { Comment: serializeAws_json1_1DocumentReviewCommentList(input.Comment, context) }
      };
    };
    var serializeAws_json1_1GetAutomationExecutionRequest = (input, context) => {
      return {
        ...input.AutomationExecutionId !== void 0 && input.AutomationExecutionId !== null && { AutomationExecutionId: input.AutomationExecutionId }
      };
    };
    var serializeAws_json1_1GetCalendarStateRequest = (input, context) => {
      return {
        ...input.AtTime !== void 0 && input.AtTime !== null && { AtTime: input.AtTime },
        ...input.CalendarNames !== void 0 && input.CalendarNames !== null && {
          CalendarNames: serializeAws_json1_1CalendarNameOrARNList(input.CalendarNames, context)
        }
      };
    };
    var serializeAws_json1_1GetCommandInvocationRequest = (input, context) => {
      return {
        ...input.CommandId !== void 0 && input.CommandId !== null && { CommandId: input.CommandId },
        ...input.InstanceId !== void 0 && input.InstanceId !== null && { InstanceId: input.InstanceId },
        ...input.PluginName !== void 0 && input.PluginName !== null && { PluginName: input.PluginName }
      };
    };
    var serializeAws_json1_1GetConnectionStatusRequest = (input, context) => {
      return {
        ...input.Target !== void 0 && input.Target !== null && { Target: input.Target }
      };
    };
    var serializeAws_json1_1GetDefaultPatchBaselineRequest = (input, context) => {
      return {
        ...input.OperatingSystem !== void 0 && input.OperatingSystem !== null && { OperatingSystem: input.OperatingSystem }
      };
    };
    var serializeAws_json1_1GetDeployablePatchSnapshotForInstanceRequest = (input, context) => {
      return {
        ...input.BaselineOverride !== void 0 && input.BaselineOverride !== null && {
          BaselineOverride: serializeAws_json1_1BaselineOverride(input.BaselineOverride, context)
        },
        ...input.InstanceId !== void 0 && input.InstanceId !== null && { InstanceId: input.InstanceId },
        ...input.SnapshotId !== void 0 && input.SnapshotId !== null && { SnapshotId: input.SnapshotId }
      };
    };
    var serializeAws_json1_1GetDocumentRequest = (input, context) => {
      return {
        ...input.DocumentFormat !== void 0 && input.DocumentFormat !== null && { DocumentFormat: input.DocumentFormat },
        ...input.DocumentVersion !== void 0 && input.DocumentVersion !== null && { DocumentVersion: input.DocumentVersion },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.VersionName !== void 0 && input.VersionName !== null && { VersionName: input.VersionName }
      };
    };
    var serializeAws_json1_1GetInventoryRequest = (input, context) => {
      return {
        ...input.Aggregators !== void 0 && input.Aggregators !== null && {
          Aggregators: serializeAws_json1_1InventoryAggregatorList(input.Aggregators, context)
        },
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1InventoryFilterList(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.ResultAttributes !== void 0 && input.ResultAttributes !== null && {
          ResultAttributes: serializeAws_json1_1ResultAttributeList(input.ResultAttributes, context)
        }
      };
    };
    var serializeAws_json1_1GetInventorySchemaRequest = (input, context) => {
      return {
        ...input.Aggregator !== void 0 && input.Aggregator !== null && { Aggregator: input.Aggregator },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.SubType !== void 0 && input.SubType !== null && { SubType: input.SubType },
        ...input.TypeName !== void 0 && input.TypeName !== null && { TypeName: input.TypeName }
      };
    };
    var serializeAws_json1_1GetMaintenanceWindowExecutionRequest = (input, context) => {
      return {
        ...input.WindowExecutionId !== void 0 && input.WindowExecutionId !== null && { WindowExecutionId: input.WindowExecutionId }
      };
    };
    var serializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationRequest = (input, context) => {
      return {
        ...input.InvocationId !== void 0 && input.InvocationId !== null && { InvocationId: input.InvocationId },
        ...input.TaskId !== void 0 && input.TaskId !== null && { TaskId: input.TaskId },
        ...input.WindowExecutionId !== void 0 && input.WindowExecutionId !== null && { WindowExecutionId: input.WindowExecutionId }
      };
    };
    var serializeAws_json1_1GetMaintenanceWindowExecutionTaskRequest = (input, context) => {
      return {
        ...input.TaskId !== void 0 && input.TaskId !== null && { TaskId: input.TaskId },
        ...input.WindowExecutionId !== void 0 && input.WindowExecutionId !== null && { WindowExecutionId: input.WindowExecutionId }
      };
    };
    var serializeAws_json1_1GetMaintenanceWindowRequest = (input, context) => {
      return {
        ...input.WindowId !== void 0 && input.WindowId !== null && { WindowId: input.WindowId }
      };
    };
    var serializeAws_json1_1GetMaintenanceWindowTaskRequest = (input, context) => {
      return {
        ...input.WindowId !== void 0 && input.WindowId !== null && { WindowId: input.WindowId },
        ...input.WindowTaskId !== void 0 && input.WindowTaskId !== null && { WindowTaskId: input.WindowTaskId }
      };
    };
    var serializeAws_json1_1GetOpsItemRequest = (input, context) => {
      return {
        ...input.OpsItemId !== void 0 && input.OpsItemId !== null && { OpsItemId: input.OpsItemId }
      };
    };
    var serializeAws_json1_1GetOpsMetadataRequest = (input, context) => {
      return {
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.OpsMetadataArn !== void 0 && input.OpsMetadataArn !== null && { OpsMetadataArn: input.OpsMetadataArn }
      };
    };
    var serializeAws_json1_1GetOpsSummaryRequest = (input, context) => {
      return {
        ...input.Aggregators !== void 0 && input.Aggregators !== null && { Aggregators: serializeAws_json1_1OpsAggregatorList(input.Aggregators, context) },
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1OpsFilterList(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.ResultAttributes !== void 0 && input.ResultAttributes !== null && {
          ResultAttributes: serializeAws_json1_1OpsResultAttributeList(input.ResultAttributes, context)
        },
        ...input.SyncName !== void 0 && input.SyncName !== null && { SyncName: input.SyncName }
      };
    };
    var serializeAws_json1_1GetParameterHistoryRequest = (input, context) => {
      return {
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.WithDecryption !== void 0 && input.WithDecryption !== null && { WithDecryption: input.WithDecryption }
      };
    };
    var serializeAws_json1_1GetParameterRequest = (input, context) => {
      return {
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.WithDecryption !== void 0 && input.WithDecryption !== null && { WithDecryption: input.WithDecryption }
      };
    };
    var serializeAws_json1_1GetParametersByPathRequest = (input, context) => {
      return {
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.ParameterFilters !== void 0 && input.ParameterFilters !== null && {
          ParameterFilters: serializeAws_json1_1ParameterStringFilterList(input.ParameterFilters, context)
        },
        ...input.Path !== void 0 && input.Path !== null && { Path: input.Path },
        ...input.Recursive !== void 0 && input.Recursive !== null && { Recursive: input.Recursive },
        ...input.WithDecryption !== void 0 && input.WithDecryption !== null && { WithDecryption: input.WithDecryption }
      };
    };
    var serializeAws_json1_1GetParametersRequest = (input, context) => {
      return {
        ...input.Names !== void 0 && input.Names !== null && { Names: serializeAws_json1_1ParameterNameList(input.Names, context) },
        ...input.WithDecryption !== void 0 && input.WithDecryption !== null && { WithDecryption: input.WithDecryption }
      };
    };
    var serializeAws_json1_1GetPatchBaselineForPatchGroupRequest = (input, context) => {
      return {
        ...input.OperatingSystem !== void 0 && input.OperatingSystem !== null && { OperatingSystem: input.OperatingSystem },
        ...input.PatchGroup !== void 0 && input.PatchGroup !== null && { PatchGroup: input.PatchGroup }
      };
    };
    var serializeAws_json1_1GetPatchBaselineRequest = (input, context) => {
      return {
        ...input.BaselineId !== void 0 && input.BaselineId !== null && { BaselineId: input.BaselineId }
      };
    };
    var serializeAws_json1_1GetServiceSettingRequest = (input, context) => {
      return {
        ...input.SettingId !== void 0 && input.SettingId !== null && { SettingId: input.SettingId }
      };
    };
    var serializeAws_json1_1InstanceAssociationOutputLocation = (input, context) => {
      return {
        ...input.S3Location !== void 0 && input.S3Location !== null && { S3Location: serializeAws_json1_1S3OutputLocation(input.S3Location, context) }
      };
    };
    var serializeAws_json1_1InstanceIdList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1InstanceInformationFilter = (input, context) => {
      return {
        ...input.key !== void 0 && input.key !== null && { key: input.key },
        ...input.valueSet !== void 0 && input.valueSet !== null && {
          valueSet: serializeAws_json1_1InstanceInformationFilterValueSet(input.valueSet, context)
        }
      };
    };
    var serializeAws_json1_1InstanceInformationFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1InstanceInformationFilter(entry, context);
      });
    };
    var serializeAws_json1_1InstanceInformationFilterValueSet = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1InstanceInformationStringFilter = (input, context) => {
      return {
        ...input.Key !== void 0 && input.Key !== null && { Key: input.Key },
        ...input.Values !== void 0 && input.Values !== null && {
          Values: serializeAws_json1_1InstanceInformationFilterValueSet(input.Values, context)
        }
      };
    };
    var serializeAws_json1_1InstanceInformationStringFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1InstanceInformationStringFilter(entry, context);
      });
    };
    var serializeAws_json1_1InstancePatchStateFilter = (input, context) => {
      return {
        ...input.Key !== void 0 && input.Key !== null && { Key: input.Key },
        ...input.Type !== void 0 && input.Type !== null && { Type: input.Type },
        ...input.Values !== void 0 && input.Values !== null && { Values: serializeAws_json1_1InstancePatchStateFilterValues(input.Values, context) }
      };
    };
    var serializeAws_json1_1InstancePatchStateFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1InstancePatchStateFilter(entry, context);
      });
    };
    var serializeAws_json1_1InstancePatchStateFilterValues = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1InventoryAggregator = (input, context) => {
      return {
        ...input.Aggregators !== void 0 && input.Aggregators !== null && {
          Aggregators: serializeAws_json1_1InventoryAggregatorList(input.Aggregators, context)
        },
        ...input.Expression !== void 0 && input.Expression !== null && { Expression: input.Expression },
        ...input.Groups !== void 0 && input.Groups !== null && { Groups: serializeAws_json1_1InventoryGroupList(input.Groups, context) }
      };
    };
    var serializeAws_json1_1InventoryAggregatorList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1InventoryAggregator(entry, context);
      });
    };
    var serializeAws_json1_1InventoryFilter = (input, context) => {
      return {
        ...input.Key !== void 0 && input.Key !== null && { Key: input.Key },
        ...input.Type !== void 0 && input.Type !== null && { Type: input.Type },
        ...input.Values !== void 0 && input.Values !== null && { Values: serializeAws_json1_1InventoryFilterValueList(input.Values, context) }
      };
    };
    var serializeAws_json1_1InventoryFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1InventoryFilter(entry, context);
      });
    };
    var serializeAws_json1_1InventoryFilterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1InventoryGroup = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1InventoryFilterList(input.Filters, context) },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name }
      };
    };
    var serializeAws_json1_1InventoryGroupList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1InventoryGroup(entry, context);
      });
    };
    var serializeAws_json1_1InventoryItem = (input, context) => {
      return {
        ...input.CaptureTime !== void 0 && input.CaptureTime !== null && { CaptureTime: input.CaptureTime },
        ...input.Content !== void 0 && input.Content !== null && { Content: serializeAws_json1_1InventoryItemEntryList(input.Content, context) },
        ...input.ContentHash !== void 0 && input.ContentHash !== null && { ContentHash: input.ContentHash },
        ...input.Context !== void 0 && input.Context !== null && { Context: serializeAws_json1_1InventoryItemContentContext(input.Context, context) },
        ...input.SchemaVersion !== void 0 && input.SchemaVersion !== null && { SchemaVersion: input.SchemaVersion },
        ...input.TypeName !== void 0 && input.TypeName !== null && { TypeName: input.TypeName }
      };
    };
    var serializeAws_json1_1InventoryItemContentContext = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: value
        };
      }, {});
    };
    var serializeAws_json1_1InventoryItemEntry = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: value
        };
      }, {});
    };
    var serializeAws_json1_1InventoryItemEntryList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1InventoryItemEntry(entry, context);
      });
    };
    var serializeAws_json1_1InventoryItemList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1InventoryItem(entry, context);
      });
    };
    var serializeAws_json1_1KeyList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1LabelParameterVersionRequest = (input, context) => {
      return {
        ...input.Labels !== void 0 && input.Labels !== null && { Labels: serializeAws_json1_1ParameterLabelList(input.Labels, context) },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.ParameterVersion !== void 0 && input.ParameterVersion !== null && { ParameterVersion: input.ParameterVersion }
      };
    };
    var serializeAws_json1_1ListAssociationsRequest = (input, context) => {
      return {
        ...input.AssociationFilterList !== void 0 && input.AssociationFilterList !== null && {
          AssociationFilterList: serializeAws_json1_1AssociationFilterList(input.AssociationFilterList, context)
        },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1ListAssociationVersionsRequest = (input, context) => {
      return {
        ...input.AssociationId !== void 0 && input.AssociationId !== null && { AssociationId: input.AssociationId },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1ListCommandInvocationsRequest = (input, context) => {
      return {
        ...input.CommandId !== void 0 && input.CommandId !== null && { CommandId: input.CommandId },
        ...input.Details !== void 0 && input.Details !== null && { Details: input.Details },
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1CommandFilterList(input.Filters, context) },
        ...input.InstanceId !== void 0 && input.InstanceId !== null && { InstanceId: input.InstanceId },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1ListCommandsRequest = (input, context) => {
      return {
        ...input.CommandId !== void 0 && input.CommandId !== null && { CommandId: input.CommandId },
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1CommandFilterList(input.Filters, context) },
        ...input.InstanceId !== void 0 && input.InstanceId !== null && { InstanceId: input.InstanceId },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1ListComplianceItemsRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1ComplianceStringFilterList(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.ResourceIds !== void 0 && input.ResourceIds !== null && {
          ResourceIds: serializeAws_json1_1ComplianceResourceIdList(input.ResourceIds, context)
        },
        ...input.ResourceTypes !== void 0 && input.ResourceTypes !== null && {
          ResourceTypes: serializeAws_json1_1ComplianceResourceTypeList(input.ResourceTypes, context)
        }
      };
    };
    var serializeAws_json1_1ListComplianceSummariesRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1ComplianceStringFilterList(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1ListDocumentMetadataHistoryRequest = (input, context) => {
      return {
        ...input.DocumentVersion !== void 0 && input.DocumentVersion !== null && { DocumentVersion: input.DocumentVersion },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.Metadata !== void 0 && input.Metadata !== null && { Metadata: input.Metadata },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1ListDocumentsRequest = (input, context) => {
      return {
        ...input.DocumentFilterList !== void 0 && input.DocumentFilterList !== null && {
          DocumentFilterList: serializeAws_json1_1DocumentFilterList(input.DocumentFilterList, context)
        },
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1DocumentKeyValuesFilterList(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1ListDocumentVersionsRequest = (input, context) => {
      return {
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1ListInventoryEntriesRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1InventoryFilterList(input.Filters, context) },
        ...input.InstanceId !== void 0 && input.InstanceId !== null && { InstanceId: input.InstanceId },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.TypeName !== void 0 && input.TypeName !== null && { TypeName: input.TypeName }
      };
    };
    var serializeAws_json1_1ListOpsItemEventsRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1OpsItemEventFilters(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1ListOpsItemRelatedItemsRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1OpsItemRelatedItemsFilters(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.OpsItemId !== void 0 && input.OpsItemId !== null && { OpsItemId: input.OpsItemId }
      };
    };
    var serializeAws_json1_1ListOpsMetadataRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1OpsMetadataFilterList(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1ListResourceComplianceSummariesRequest = (input, context) => {
      return {
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1ComplianceStringFilterList(input.Filters, context) },
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1ListResourceDataSyncRequest = (input, context) => {
      return {
        ...input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults },
        ...input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken },
        ...input.SyncType !== void 0 && input.SyncType !== null && { SyncType: input.SyncType }
      };
    };
    var serializeAws_json1_1ListTagsForResourceRequest = (input, context) => {
      return {
        ...input.ResourceId !== void 0 && input.ResourceId !== null && { ResourceId: input.ResourceId },
        ...input.ResourceType !== void 0 && input.ResourceType !== null && { ResourceType: input.ResourceType }
      };
    };
    var serializeAws_json1_1LoggingInfo = (input, context) => {
      return {
        ...input.S3BucketName !== void 0 && input.S3BucketName !== null && { S3BucketName: input.S3BucketName },
        ...input.S3KeyPrefix !== void 0 && input.S3KeyPrefix !== null && { S3KeyPrefix: input.S3KeyPrefix },
        ...input.S3Region !== void 0 && input.S3Region !== null && { S3Region: input.S3Region }
      };
    };
    var serializeAws_json1_1MaintenanceWindowAutomationParameters = (input, context) => {
      return {
        ...input.DocumentVersion !== void 0 && input.DocumentVersion !== null && { DocumentVersion: input.DocumentVersion },
        ...input.Parameters !== void 0 && input.Parameters !== null && {
          Parameters: serializeAws_json1_1AutomationParameterMap(input.Parameters, context)
        }
      };
    };
    var serializeAws_json1_1MaintenanceWindowFilter = (input, context) => {
      return {
        ...input.Key !== void 0 && input.Key !== null && { Key: input.Key },
        ...input.Values !== void 0 && input.Values !== null && { Values: serializeAws_json1_1MaintenanceWindowFilterValues(input.Values, context) }
      };
    };
    var serializeAws_json1_1MaintenanceWindowFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1MaintenanceWindowFilter(entry, context);
      });
    };
    var serializeAws_json1_1MaintenanceWindowFilterValues = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1MaintenanceWindowLambdaParameters = (input, context) => {
      return {
        ...input.ClientContext !== void 0 && input.ClientContext !== null && { ClientContext: input.ClientContext },
        ...input.Payload !== void 0 && input.Payload !== null && { Payload: context.base64Encoder(input.Payload) },
        ...input.Qualifier !== void 0 && input.Qualifier !== null && { Qualifier: input.Qualifier }
      };
    };
    var serializeAws_json1_1MaintenanceWindowRunCommandParameters = (input, context) => {
      return {
        ...input.CloudWatchOutputConfig !== void 0 && input.CloudWatchOutputConfig !== null && {
          CloudWatchOutputConfig: serializeAws_json1_1CloudWatchOutputConfig(input.CloudWatchOutputConfig, context)
        },
        ...input.Comment !== void 0 && input.Comment !== null && { Comment: input.Comment },
        ...input.DocumentHash !== void 0 && input.DocumentHash !== null && { DocumentHash: input.DocumentHash },
        ...input.DocumentHashType !== void 0 && input.DocumentHashType !== null && { DocumentHashType: input.DocumentHashType },
        ...input.DocumentVersion !== void 0 && input.DocumentVersion !== null && { DocumentVersion: input.DocumentVersion },
        ...input.NotificationConfig !== void 0 && input.NotificationConfig !== null && {
          NotificationConfig: serializeAws_json1_1NotificationConfig(input.NotificationConfig, context)
        },
        ...input.OutputS3BucketName !== void 0 && input.OutputS3BucketName !== null && { OutputS3BucketName: input.OutputS3BucketName },
        ...input.OutputS3KeyPrefix !== void 0 && input.OutputS3KeyPrefix !== null && { OutputS3KeyPrefix: input.OutputS3KeyPrefix },
        ...input.Parameters !== void 0 && input.Parameters !== null && { Parameters: serializeAws_json1_1Parameters(input.Parameters, context) },
        ...input.ServiceRoleArn !== void 0 && input.ServiceRoleArn !== null && { ServiceRoleArn: input.ServiceRoleArn },
        ...input.TimeoutSeconds !== void 0 && input.TimeoutSeconds !== null && { TimeoutSeconds: input.TimeoutSeconds }
      };
    };
    var serializeAws_json1_1MaintenanceWindowStepFunctionsParameters = (input, context) => {
      return {
        ...input.Input !== void 0 && input.Input !== null && { Input: input.Input },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name }
      };
    };
    var serializeAws_json1_1MaintenanceWindowTaskInvocationParameters = (input, context) => {
      return {
        ...input.Automation !== void 0 && input.Automation !== null && {
          Automation: serializeAws_json1_1MaintenanceWindowAutomationParameters(input.Automation, context)
        },
        ...input.Lambda !== void 0 && input.Lambda !== null && {
          Lambda: serializeAws_json1_1MaintenanceWindowLambdaParameters(input.Lambda, context)
        },
        ...input.RunCommand !== void 0 && input.RunCommand !== null && {
          RunCommand: serializeAws_json1_1MaintenanceWindowRunCommandParameters(input.RunCommand, context)
        },
        ...input.StepFunctions !== void 0 && input.StepFunctions !== null && {
          StepFunctions: serializeAws_json1_1MaintenanceWindowStepFunctionsParameters(input.StepFunctions, context)
        }
      };
    };
    var serializeAws_json1_1MaintenanceWindowTaskParameters = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_1MaintenanceWindowTaskParameterValueExpression(value, context)
        };
      }, {});
    };
    var serializeAws_json1_1MaintenanceWindowTaskParameterValueExpression = (input, context) => {
      return {
        ...input.Values !== void 0 && input.Values !== null && {
          Values: serializeAws_json1_1MaintenanceWindowTaskParameterValueList(input.Values, context)
        }
      };
    };
    var serializeAws_json1_1MaintenanceWindowTaskParameterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1MetadataKeysToDeleteList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1MetadataMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_1MetadataValue(value, context)
        };
      }, {});
    };
    var serializeAws_json1_1MetadataValue = (input, context) => {
      return {
        ...input.Value !== void 0 && input.Value !== null && { Value: input.Value }
      };
    };
    var serializeAws_json1_1ModifyDocumentPermissionRequest = (input, context) => {
      return {
        ...input.AccountIdsToAdd !== void 0 && input.AccountIdsToAdd !== null && {
          AccountIdsToAdd: serializeAws_json1_1AccountIdList(input.AccountIdsToAdd, context)
        },
        ...input.AccountIdsToRemove !== void 0 && input.AccountIdsToRemove !== null && {
          AccountIdsToRemove: serializeAws_json1_1AccountIdList(input.AccountIdsToRemove, context)
        },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.PermissionType !== void 0 && input.PermissionType !== null && { PermissionType: input.PermissionType },
        ...input.SharedDocumentVersion !== void 0 && input.SharedDocumentVersion !== null && { SharedDocumentVersion: input.SharedDocumentVersion }
      };
    };
    var serializeAws_json1_1NotificationConfig = (input, context) => {
      return {
        ...input.NotificationArn !== void 0 && input.NotificationArn !== null && { NotificationArn: input.NotificationArn },
        ...input.NotificationEvents !== void 0 && input.NotificationEvents !== null && {
          NotificationEvents: serializeAws_json1_1NotificationEventList(input.NotificationEvents, context)
        },
        ...input.NotificationType !== void 0 && input.NotificationType !== null && { NotificationType: input.NotificationType }
      };
    };
    var serializeAws_json1_1NotificationEventList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1OpsAggregator = (input, context) => {
      return {
        ...input.AggregatorType !== void 0 && input.AggregatorType !== null && { AggregatorType: input.AggregatorType },
        ...input.Aggregators !== void 0 && input.Aggregators !== null && { Aggregators: serializeAws_json1_1OpsAggregatorList(input.Aggregators, context) },
        ...input.AttributeName !== void 0 && input.AttributeName !== null && { AttributeName: input.AttributeName },
        ...input.Filters !== void 0 && input.Filters !== null && { Filters: serializeAws_json1_1OpsFilterList(input.Filters, context) },
        ...input.TypeName !== void 0 && input.TypeName !== null && { TypeName: input.TypeName },
        ...input.Values !== void 0 && input.Values !== null && { Values: serializeAws_json1_1OpsAggregatorValueMap(input.Values, context) }
      };
    };
    var serializeAws_json1_1OpsAggregatorList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1OpsAggregator(entry, context);
      });
    };
    var serializeAws_json1_1OpsAggregatorValueMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: value
        };
      }, {});
    };
    var serializeAws_json1_1OpsFilter = (input, context) => {
      return {
        ...input.Key !== void 0 && input.Key !== null && { Key: input.Key },
        ...input.Type !== void 0 && input.Type !== null && { Type: input.Type },
        ...input.Values !== void 0 && input.Values !== null && { Values: serializeAws_json1_1OpsFilterValueList(input.Values, context) }
      };
    };
    var serializeAws_json1_1OpsFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1OpsFilter(entry, context);
      });
    };
    var serializeAws_json1_1OpsFilterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1OpsItemDataValue = (input, context) => {
      return {
        ...input.Type !== void 0 && input.Type !== null && { Type: input.Type },
        ...input.Value !== void 0 && input.Value !== null && { Value: input.Value }
      };
    };
    var serializeAws_json1_1OpsItemEventFilter = (input, context) => {
      return {
        ...input.Key !== void 0 && input.Key !== null && { Key: input.Key },
        ...input.Operator !== void 0 && input.Operator !== null && { Operator: input.Operator },
        ...input.Values !== void 0 && input.Values !== null && { Values: serializeAws_json1_1OpsItemEventFilterValues(input.Values, context) }
      };
    };
    var serializeAws_json1_1OpsItemEventFilters = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1OpsItemEventFilter(entry, context);
      });
    };
    var serializeAws_json1_1OpsItemEventFilterValues = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1OpsItemFilter = (input, context) => {
      return {
        ...input.Key !== void 0 && input.Key !== null && { Key: input.Key },
        ...input.Operator !== void 0 && input.Operator !== null && { Operator: input.Operator },
        ...input.Values !== void 0 && input.Values !== null && { Values: serializeAws_json1_1OpsItemFilterValues(input.Values, context) }
      };
    };
    var serializeAws_json1_1OpsItemFilters = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1OpsItemFilter(entry, context);
      });
    };
    var serializeAws_json1_1OpsItemFilterValues = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1OpsItemNotification = (input, context) => {
      return {
        ...input.Arn !== void 0 && input.Arn !== null && { Arn: input.Arn }
      };
    };
    var serializeAws_json1_1OpsItemNotifications = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1OpsItemNotification(entry, context);
      });
    };
    var serializeAws_json1_1OpsItemOperationalData = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_1OpsItemDataValue(value, context)
        };
      }, {});
    };
    var serializeAws_json1_1OpsItemOpsDataKeysList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1OpsItemRelatedItemsFilter = (input, context) => {
      return {
        ...input.Key !== void 0 && input.Key !== null && { Key: input.Key },
        ...input.Operator !== void 0 && input.Operator !== null && { Operator: input.Operator },
        ...input.Values !== void 0 && input.Values !== null && { Values: serializeAws_json1_1OpsItemRelatedItemsFilterValues(input.Values, context) }
      };
    };
    var serializeAws_json1_1OpsItemRelatedItemsFilters = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1OpsItemRelatedItemsFilter(entry, context);
      });
    };
    var serializeAws_json1_1OpsItemRelatedItemsFilterValues = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1OpsMetadataFilter = (input, context) => {
      return {
        ...input.Key !== void 0 && input.Key !== null && { Key: input.Key },
        ...input.Values !== void 0 && input.Values !== null && { Values: serializeAws_json1_1OpsMetadataFilterValueList(input.Values, context) }
      };
    };
    var serializeAws_json1_1OpsMetadataFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1OpsMetadataFilter(entry, context);
      });
    };
    var serializeAws_json1_1OpsMetadataFilterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1OpsResultAttribute = (input, context) => {
      return {
        ...input.TypeName !== void 0 && input.TypeName !== null && { TypeName: input.TypeName }
      };
    };
    var serializeAws_json1_1OpsResultAttributeList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1OpsResultAttribute(entry, context);
      });
    };
    var serializeAws_json1_1ParameterLabelList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1ParameterNameList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1Parameters = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_1ParameterValueList(value, context)
        };
      }, {});
    };
    var serializeAws_json1_1ParametersFilter = (input, context) => {
      return {
        ...input.Key !== void 0 && input.Key !== null && { Key: input.Key },
        ...input.Values !== void 0 && input.Values !== null && { Values: serializeAws_json1_1ParametersFilterValueList(input.Values, context) }
      };
    };
    var serializeAws_json1_1ParametersFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1ParametersFilter(entry, context);
      });
    };
    var serializeAws_json1_1ParametersFilterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1ParameterStringFilter = (input, context) => {
      return {
        ...input.Key !== void 0 && input.Key !== null && { Key: input.Key },
        ...input.Option !== void 0 && input.Option !== null && { Option: input.Option },
        ...input.Values !== void 0 && input.Values !== null && { Values: serializeAws_json1_1ParameterStringFilterValueList(input.Values, context) }
      };
    };
    var serializeAws_json1_1ParameterStringFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1ParameterStringFilter(entry, context);
      });
    };
    var serializeAws_json1_1ParameterStringFilterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1ParameterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1PatchFilter = (input, context) => {
      return {
        ...input.Key !== void 0 && input.Key !== null && { Key: input.Key },
        ...input.Values !== void 0 && input.Values !== null && { Values: serializeAws_json1_1PatchFilterValueList(input.Values, context) }
      };
    };
    var serializeAws_json1_1PatchFilterGroup = (input, context) => {
      return {
        ...input.PatchFilters !== void 0 && input.PatchFilters !== null && {
          PatchFilters: serializeAws_json1_1PatchFilterList(input.PatchFilters, context)
        }
      };
    };
    var serializeAws_json1_1PatchFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1PatchFilter(entry, context);
      });
    };
    var serializeAws_json1_1PatchFilterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1PatchIdList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1PatchOrchestratorFilter = (input, context) => {
      return {
        ...input.Key !== void 0 && input.Key !== null && { Key: input.Key },
        ...input.Values !== void 0 && input.Values !== null && { Values: serializeAws_json1_1PatchOrchestratorFilterValues(input.Values, context) }
      };
    };
    var serializeAws_json1_1PatchOrchestratorFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1PatchOrchestratorFilter(entry, context);
      });
    };
    var serializeAws_json1_1PatchOrchestratorFilterValues = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1PatchRule = (input, context) => {
      return {
        ...input.ApproveAfterDays !== void 0 && input.ApproveAfterDays !== null && { ApproveAfterDays: input.ApproveAfterDays },
        ...input.ApproveUntilDate !== void 0 && input.ApproveUntilDate !== null && { ApproveUntilDate: input.ApproveUntilDate },
        ...input.ComplianceLevel !== void 0 && input.ComplianceLevel !== null && { ComplianceLevel: input.ComplianceLevel },
        ...input.EnableNonSecurity !== void 0 && input.EnableNonSecurity !== null && { EnableNonSecurity: input.EnableNonSecurity },
        ...input.PatchFilterGroup !== void 0 && input.PatchFilterGroup !== null && {
          PatchFilterGroup: serializeAws_json1_1PatchFilterGroup(input.PatchFilterGroup, context)
        }
      };
    };
    var serializeAws_json1_1PatchRuleGroup = (input, context) => {
      return {
        ...input.PatchRules !== void 0 && input.PatchRules !== null && { PatchRules: serializeAws_json1_1PatchRuleList(input.PatchRules, context) }
      };
    };
    var serializeAws_json1_1PatchRuleList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1PatchRule(entry, context);
      });
    };
    var serializeAws_json1_1PatchSource = (input, context) => {
      return {
        ...input.Configuration !== void 0 && input.Configuration !== null && { Configuration: input.Configuration },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.Products !== void 0 && input.Products !== null && { Products: serializeAws_json1_1PatchSourceProductList(input.Products, context) }
      };
    };
    var serializeAws_json1_1PatchSourceList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1PatchSource(entry, context);
      });
    };
    var serializeAws_json1_1PatchSourceProductList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1PutComplianceItemsRequest = (input, context) => {
      return {
        ...input.ComplianceType !== void 0 && input.ComplianceType !== null && { ComplianceType: input.ComplianceType },
        ...input.ExecutionSummary !== void 0 && input.ExecutionSummary !== null && {
          ExecutionSummary: serializeAws_json1_1ComplianceExecutionSummary(input.ExecutionSummary, context)
        },
        ...input.ItemContentHash !== void 0 && input.ItemContentHash !== null && { ItemContentHash: input.ItemContentHash },
        ...input.Items !== void 0 && input.Items !== null && { Items: serializeAws_json1_1ComplianceItemEntryList(input.Items, context) },
        ...input.ResourceId !== void 0 && input.ResourceId !== null && { ResourceId: input.ResourceId },
        ...input.ResourceType !== void 0 && input.ResourceType !== null && { ResourceType: input.ResourceType },
        ...input.UploadType !== void 0 && input.UploadType !== null && { UploadType: input.UploadType }
      };
    };
    var serializeAws_json1_1PutInventoryRequest = (input, context) => {
      return {
        ...input.InstanceId !== void 0 && input.InstanceId !== null && { InstanceId: input.InstanceId },
        ...input.Items !== void 0 && input.Items !== null && { Items: serializeAws_json1_1InventoryItemList(input.Items, context) }
      };
    };
    var serializeAws_json1_1PutParameterRequest = (input, context) => {
      return {
        ...input.AllowedPattern !== void 0 && input.AllowedPattern !== null && { AllowedPattern: input.AllowedPattern },
        ...input.DataType !== void 0 && input.DataType !== null && { DataType: input.DataType },
        ...input.Description !== void 0 && input.Description !== null && { Description: input.Description },
        ...input.KeyId !== void 0 && input.KeyId !== null && { KeyId: input.KeyId },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.Overwrite !== void 0 && input.Overwrite !== null && { Overwrite: input.Overwrite },
        ...input.Policies !== void 0 && input.Policies !== null && { Policies: input.Policies },
        ...input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) },
        ...input.Tier !== void 0 && input.Tier !== null && { Tier: input.Tier },
        ...input.Type !== void 0 && input.Type !== null && { Type: input.Type },
        ...input.Value !== void 0 && input.Value !== null && { Value: input.Value }
      };
    };
    var serializeAws_json1_1Regions = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1RegisterDefaultPatchBaselineRequest = (input, context) => {
      return {
        ...input.BaselineId !== void 0 && input.BaselineId !== null && { BaselineId: input.BaselineId }
      };
    };
    var serializeAws_json1_1RegisterPatchBaselineForPatchGroupRequest = (input, context) => {
      return {
        ...input.BaselineId !== void 0 && input.BaselineId !== null && { BaselineId: input.BaselineId },
        ...input.PatchGroup !== void 0 && input.PatchGroup !== null && { PatchGroup: input.PatchGroup }
      };
    };
    var serializeAws_json1_1RegisterTargetWithMaintenanceWindowRequest = (input, context) => {
      var _a;
      return {
        ClientToken: (_a = input.ClientToken) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)(),
        ...input.Description !== void 0 && input.Description !== null && { Description: input.Description },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.OwnerInformation !== void 0 && input.OwnerInformation !== null && { OwnerInformation: input.OwnerInformation },
        ...input.ResourceType !== void 0 && input.ResourceType !== null && { ResourceType: input.ResourceType },
        ...input.Targets !== void 0 && input.Targets !== null && { Targets: serializeAws_json1_1Targets(input.Targets, context) },
        ...input.WindowId !== void 0 && input.WindowId !== null && { WindowId: input.WindowId }
      };
    };
    var serializeAws_json1_1RegisterTaskWithMaintenanceWindowRequest = (input, context) => {
      var _a;
      return {
        ClientToken: (_a = input.ClientToken) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)(),
        ...input.CutoffBehavior !== void 0 && input.CutoffBehavior !== null && { CutoffBehavior: input.CutoffBehavior },
        ...input.Description !== void 0 && input.Description !== null && { Description: input.Description },
        ...input.LoggingInfo !== void 0 && input.LoggingInfo !== null && { LoggingInfo: serializeAws_json1_1LoggingInfo(input.LoggingInfo, context) },
        ...input.MaxConcurrency !== void 0 && input.MaxConcurrency !== null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors !== void 0 && input.MaxErrors !== null && { MaxErrors: input.MaxErrors },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.Priority !== void 0 && input.Priority !== null && { Priority: input.Priority },
        ...input.ServiceRoleArn !== void 0 && input.ServiceRoleArn !== null && { ServiceRoleArn: input.ServiceRoleArn },
        ...input.Targets !== void 0 && input.Targets !== null && { Targets: serializeAws_json1_1Targets(input.Targets, context) },
        ...input.TaskArn !== void 0 && input.TaskArn !== null && { TaskArn: input.TaskArn },
        ...input.TaskInvocationParameters !== void 0 && input.TaskInvocationParameters !== null && {
          TaskInvocationParameters: serializeAws_json1_1MaintenanceWindowTaskInvocationParameters(input.TaskInvocationParameters, context)
        },
        ...input.TaskParameters !== void 0 && input.TaskParameters !== null && {
          TaskParameters: serializeAws_json1_1MaintenanceWindowTaskParameters(input.TaskParameters, context)
        },
        ...input.TaskType !== void 0 && input.TaskType !== null && { TaskType: input.TaskType },
        ...input.WindowId !== void 0 && input.WindowId !== null && { WindowId: input.WindowId }
      };
    };
    var serializeAws_json1_1RegistrationMetadataItem = (input, context) => {
      return {
        ...input.Key !== void 0 && input.Key !== null && { Key: input.Key },
        ...input.Value !== void 0 && input.Value !== null && { Value: input.Value }
      };
    };
    var serializeAws_json1_1RegistrationMetadataList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1RegistrationMetadataItem(entry, context);
      });
    };
    var serializeAws_json1_1RelatedOpsItem = (input, context) => {
      return {
        ...input.OpsItemId !== void 0 && input.OpsItemId !== null && { OpsItemId: input.OpsItemId }
      };
    };
    var serializeAws_json1_1RelatedOpsItems = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1RelatedOpsItem(entry, context);
      });
    };
    var serializeAws_json1_1RemoveTagsFromResourceRequest = (input, context) => {
      return {
        ...input.ResourceId !== void 0 && input.ResourceId !== null && { ResourceId: input.ResourceId },
        ...input.ResourceType !== void 0 && input.ResourceType !== null && { ResourceType: input.ResourceType },
        ...input.TagKeys !== void 0 && input.TagKeys !== null && { TagKeys: serializeAws_json1_1KeyList(input.TagKeys, context) }
      };
    };
    var serializeAws_json1_1ResetServiceSettingRequest = (input, context) => {
      return {
        ...input.SettingId !== void 0 && input.SettingId !== null && { SettingId: input.SettingId }
      };
    };
    var serializeAws_json1_1ResourceDataSyncAwsOrganizationsSource = (input, context) => {
      return {
        ...input.OrganizationSourceType !== void 0 && input.OrganizationSourceType !== null && { OrganizationSourceType: input.OrganizationSourceType },
        ...input.OrganizationalUnits !== void 0 && input.OrganizationalUnits !== null && {
          OrganizationalUnits: serializeAws_json1_1ResourceDataSyncOrganizationalUnitList(input.OrganizationalUnits, context)
        }
      };
    };
    var serializeAws_json1_1ResourceDataSyncDestinationDataSharing = (input, context) => {
      return {
        ...input.DestinationDataSharingType !== void 0 && input.DestinationDataSharingType !== null && { DestinationDataSharingType: input.DestinationDataSharingType }
      };
    };
    var serializeAws_json1_1ResourceDataSyncOrganizationalUnit = (input, context) => {
      return {
        ...input.OrganizationalUnitId !== void 0 && input.OrganizationalUnitId !== null && { OrganizationalUnitId: input.OrganizationalUnitId }
      };
    };
    var serializeAws_json1_1ResourceDataSyncOrganizationalUnitList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1ResourceDataSyncOrganizationalUnit(entry, context);
      });
    };
    var serializeAws_json1_1ResourceDataSyncS3Destination = (input, context) => {
      return {
        ...input.AWSKMSKeyARN !== void 0 && input.AWSKMSKeyARN !== null && { AWSKMSKeyARN: input.AWSKMSKeyARN },
        ...input.BucketName !== void 0 && input.BucketName !== null && { BucketName: input.BucketName },
        ...input.DestinationDataSharing !== void 0 && input.DestinationDataSharing !== null && {
          DestinationDataSharing: serializeAws_json1_1ResourceDataSyncDestinationDataSharing(input.DestinationDataSharing, context)
        },
        ...input.Prefix !== void 0 && input.Prefix !== null && { Prefix: input.Prefix },
        ...input.Region !== void 0 && input.Region !== null && { Region: input.Region },
        ...input.SyncFormat !== void 0 && input.SyncFormat !== null && { SyncFormat: input.SyncFormat }
      };
    };
    var serializeAws_json1_1ResourceDataSyncSource = (input, context) => {
      return {
        ...input.AwsOrganizationsSource !== void 0 && input.AwsOrganizationsSource !== null && {
          AwsOrganizationsSource: serializeAws_json1_1ResourceDataSyncAwsOrganizationsSource(input.AwsOrganizationsSource, context)
        },
        ...input.EnableAllOpsDataSources !== void 0 && input.EnableAllOpsDataSources !== null && { EnableAllOpsDataSources: input.EnableAllOpsDataSources },
        ...input.IncludeFutureRegions !== void 0 && input.IncludeFutureRegions !== null && { IncludeFutureRegions: input.IncludeFutureRegions },
        ...input.SourceRegions !== void 0 && input.SourceRegions !== null && {
          SourceRegions: serializeAws_json1_1ResourceDataSyncSourceRegionList(input.SourceRegions, context)
        },
        ...input.SourceType !== void 0 && input.SourceType !== null && { SourceType: input.SourceType }
      };
    };
    var serializeAws_json1_1ResourceDataSyncSourceRegionList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1ResultAttribute = (input, context) => {
      return {
        ...input.TypeName !== void 0 && input.TypeName !== null && { TypeName: input.TypeName }
      };
    };
    var serializeAws_json1_1ResultAttributeList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1ResultAttribute(entry, context);
      });
    };
    var serializeAws_json1_1ResumeSessionRequest = (input, context) => {
      return {
        ...input.SessionId !== void 0 && input.SessionId !== null && { SessionId: input.SessionId }
      };
    };
    var serializeAws_json1_1Runbook = (input, context) => {
      return {
        ...input.DocumentName !== void 0 && input.DocumentName !== null && { DocumentName: input.DocumentName },
        ...input.DocumentVersion !== void 0 && input.DocumentVersion !== null && { DocumentVersion: input.DocumentVersion },
        ...input.MaxConcurrency !== void 0 && input.MaxConcurrency !== null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors !== void 0 && input.MaxErrors !== null && { MaxErrors: input.MaxErrors },
        ...input.Parameters !== void 0 && input.Parameters !== null && {
          Parameters: serializeAws_json1_1AutomationParameterMap(input.Parameters, context)
        },
        ...input.TargetLocations !== void 0 && input.TargetLocations !== null && {
          TargetLocations: serializeAws_json1_1TargetLocations(input.TargetLocations, context)
        },
        ...input.TargetMaps !== void 0 && input.TargetMaps !== null && { TargetMaps: serializeAws_json1_1TargetMaps(input.TargetMaps, context) },
        ...input.TargetParameterName !== void 0 && input.TargetParameterName !== null && { TargetParameterName: input.TargetParameterName },
        ...input.Targets !== void 0 && input.Targets !== null && { Targets: serializeAws_json1_1Targets(input.Targets, context) }
      };
    };
    var serializeAws_json1_1Runbooks = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1Runbook(entry, context);
      });
    };
    var serializeAws_json1_1S3OutputLocation = (input, context) => {
      return {
        ...input.OutputS3BucketName !== void 0 && input.OutputS3BucketName !== null && { OutputS3BucketName: input.OutputS3BucketName },
        ...input.OutputS3KeyPrefix !== void 0 && input.OutputS3KeyPrefix !== null && { OutputS3KeyPrefix: input.OutputS3KeyPrefix },
        ...input.OutputS3Region !== void 0 && input.OutputS3Region !== null && { OutputS3Region: input.OutputS3Region }
      };
    };
    var serializeAws_json1_1SendAutomationSignalRequest = (input, context) => {
      return {
        ...input.AutomationExecutionId !== void 0 && input.AutomationExecutionId !== null && { AutomationExecutionId: input.AutomationExecutionId },
        ...input.Payload !== void 0 && input.Payload !== null && { Payload: serializeAws_json1_1AutomationParameterMap(input.Payload, context) },
        ...input.SignalType !== void 0 && input.SignalType !== null && { SignalType: input.SignalType }
      };
    };
    var serializeAws_json1_1SendCommandRequest = (input, context) => {
      return {
        ...input.CloudWatchOutputConfig !== void 0 && input.CloudWatchOutputConfig !== null && {
          CloudWatchOutputConfig: serializeAws_json1_1CloudWatchOutputConfig(input.CloudWatchOutputConfig, context)
        },
        ...input.Comment !== void 0 && input.Comment !== null && { Comment: input.Comment },
        ...input.DocumentHash !== void 0 && input.DocumentHash !== null && { DocumentHash: input.DocumentHash },
        ...input.DocumentHashType !== void 0 && input.DocumentHashType !== null && { DocumentHashType: input.DocumentHashType },
        ...input.DocumentName !== void 0 && input.DocumentName !== null && { DocumentName: input.DocumentName },
        ...input.DocumentVersion !== void 0 && input.DocumentVersion !== null && { DocumentVersion: input.DocumentVersion },
        ...input.InstanceIds !== void 0 && input.InstanceIds !== null && { InstanceIds: serializeAws_json1_1InstanceIdList(input.InstanceIds, context) },
        ...input.MaxConcurrency !== void 0 && input.MaxConcurrency !== null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors !== void 0 && input.MaxErrors !== null && { MaxErrors: input.MaxErrors },
        ...input.NotificationConfig !== void 0 && input.NotificationConfig !== null && {
          NotificationConfig: serializeAws_json1_1NotificationConfig(input.NotificationConfig, context)
        },
        ...input.OutputS3BucketName !== void 0 && input.OutputS3BucketName !== null && { OutputS3BucketName: input.OutputS3BucketName },
        ...input.OutputS3KeyPrefix !== void 0 && input.OutputS3KeyPrefix !== null && { OutputS3KeyPrefix: input.OutputS3KeyPrefix },
        ...input.OutputS3Region !== void 0 && input.OutputS3Region !== null && { OutputS3Region: input.OutputS3Region },
        ...input.Parameters !== void 0 && input.Parameters !== null && { Parameters: serializeAws_json1_1Parameters(input.Parameters, context) },
        ...input.ServiceRoleArn !== void 0 && input.ServiceRoleArn !== null && { ServiceRoleArn: input.ServiceRoleArn },
        ...input.Targets !== void 0 && input.Targets !== null && { Targets: serializeAws_json1_1Targets(input.Targets, context) },
        ...input.TimeoutSeconds !== void 0 && input.TimeoutSeconds !== null && { TimeoutSeconds: input.TimeoutSeconds }
      };
    };
    var serializeAws_json1_1SessionFilter = (input, context) => {
      return {
        ...input.key !== void 0 && input.key !== null && { key: input.key },
        ...input.value !== void 0 && input.value !== null && { value: input.value }
      };
    };
    var serializeAws_json1_1SessionFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1SessionFilter(entry, context);
      });
    };
    var serializeAws_json1_1SessionManagerParameters = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_1SessionManagerParameterValueList(value, context)
        };
      }, {});
    };
    var serializeAws_json1_1SessionManagerParameterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1StartAssociationsOnceRequest = (input, context) => {
      return {
        ...input.AssociationIds !== void 0 && input.AssociationIds !== null && {
          AssociationIds: serializeAws_json1_1AssociationIdList(input.AssociationIds, context)
        }
      };
    };
    var serializeAws_json1_1StartAutomationExecutionRequest = (input, context) => {
      return {
        ...input.ClientToken !== void 0 && input.ClientToken !== null && { ClientToken: input.ClientToken },
        ...input.DocumentName !== void 0 && input.DocumentName !== null && { DocumentName: input.DocumentName },
        ...input.DocumentVersion !== void 0 && input.DocumentVersion !== null && { DocumentVersion: input.DocumentVersion },
        ...input.MaxConcurrency !== void 0 && input.MaxConcurrency !== null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors !== void 0 && input.MaxErrors !== null && { MaxErrors: input.MaxErrors },
        ...input.Mode !== void 0 && input.Mode !== null && { Mode: input.Mode },
        ...input.Parameters !== void 0 && input.Parameters !== null && {
          Parameters: serializeAws_json1_1AutomationParameterMap(input.Parameters, context)
        },
        ...input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) },
        ...input.TargetLocations !== void 0 && input.TargetLocations !== null && {
          TargetLocations: serializeAws_json1_1TargetLocations(input.TargetLocations, context)
        },
        ...input.TargetMaps !== void 0 && input.TargetMaps !== null && { TargetMaps: serializeAws_json1_1TargetMaps(input.TargetMaps, context) },
        ...input.TargetParameterName !== void 0 && input.TargetParameterName !== null && { TargetParameterName: input.TargetParameterName },
        ...input.Targets !== void 0 && input.Targets !== null && { Targets: serializeAws_json1_1Targets(input.Targets, context) }
      };
    };
    var serializeAws_json1_1StartChangeRequestExecutionRequest = (input, context) => {
      return {
        ...input.AutoApprove !== void 0 && input.AutoApprove !== null && { AutoApprove: input.AutoApprove },
        ...input.ChangeDetails !== void 0 && input.ChangeDetails !== null && { ChangeDetails: input.ChangeDetails },
        ...input.ChangeRequestName !== void 0 && input.ChangeRequestName !== null && { ChangeRequestName: input.ChangeRequestName },
        ...input.ClientToken !== void 0 && input.ClientToken !== null && { ClientToken: input.ClientToken },
        ...input.DocumentName !== void 0 && input.DocumentName !== null && { DocumentName: input.DocumentName },
        ...input.DocumentVersion !== void 0 && input.DocumentVersion !== null && { DocumentVersion: input.DocumentVersion },
        ...input.Parameters !== void 0 && input.Parameters !== null && {
          Parameters: serializeAws_json1_1AutomationParameterMap(input.Parameters, context)
        },
        ...input.Runbooks !== void 0 && input.Runbooks !== null && { Runbooks: serializeAws_json1_1Runbooks(input.Runbooks, context) },
        ...input.ScheduledEndTime !== void 0 && input.ScheduledEndTime !== null && { ScheduledEndTime: Math.round(input.ScheduledEndTime.getTime() / 1e3) },
        ...input.ScheduledTime !== void 0 && input.ScheduledTime !== null && { ScheduledTime: Math.round(input.ScheduledTime.getTime() / 1e3) },
        ...input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }
      };
    };
    var serializeAws_json1_1StartSessionRequest = (input, context) => {
      return {
        ...input.DocumentName !== void 0 && input.DocumentName !== null && { DocumentName: input.DocumentName },
        ...input.Parameters !== void 0 && input.Parameters !== null && {
          Parameters: serializeAws_json1_1SessionManagerParameters(input.Parameters, context)
        },
        ...input.Reason !== void 0 && input.Reason !== null && { Reason: input.Reason },
        ...input.Target !== void 0 && input.Target !== null && { Target: input.Target }
      };
    };
    var serializeAws_json1_1StepExecutionFilter = (input, context) => {
      return {
        ...input.Key !== void 0 && input.Key !== null && { Key: input.Key },
        ...input.Values !== void 0 && input.Values !== null && { Values: serializeAws_json1_1StepExecutionFilterValueList(input.Values, context) }
      };
    };
    var serializeAws_json1_1StepExecutionFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1StepExecutionFilter(entry, context);
      });
    };
    var serializeAws_json1_1StepExecutionFilterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1StopAutomationExecutionRequest = (input, context) => {
      return {
        ...input.AutomationExecutionId !== void 0 && input.AutomationExecutionId !== null && { AutomationExecutionId: input.AutomationExecutionId },
        ...input.Type !== void 0 && input.Type !== null && { Type: input.Type }
      };
    };
    var serializeAws_json1_1StringList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1Tag = (input, context) => {
      return {
        ...input.Key !== void 0 && input.Key !== null && { Key: input.Key },
        ...input.Value !== void 0 && input.Value !== null && { Value: input.Value }
      };
    };
    var serializeAws_json1_1TagList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1Tag(entry, context);
      });
    };
    var serializeAws_json1_1Target = (input, context) => {
      return {
        ...input.Key !== void 0 && input.Key !== null && { Key: input.Key },
        ...input.Values !== void 0 && input.Values !== null && { Values: serializeAws_json1_1TargetValues(input.Values, context) }
      };
    };
    var serializeAws_json1_1TargetLocation = (input, context) => {
      return {
        ...input.Accounts !== void 0 && input.Accounts !== null && { Accounts: serializeAws_json1_1Accounts(input.Accounts, context) },
        ...input.ExecutionRoleName !== void 0 && input.ExecutionRoleName !== null && { ExecutionRoleName: input.ExecutionRoleName },
        ...input.Regions !== void 0 && input.Regions !== null && { Regions: serializeAws_json1_1Regions(input.Regions, context) },
        ...input.TargetLocationMaxConcurrency !== void 0 && input.TargetLocationMaxConcurrency !== null && {
          TargetLocationMaxConcurrency: input.TargetLocationMaxConcurrency
        },
        ...input.TargetLocationMaxErrors !== void 0 && input.TargetLocationMaxErrors !== null && { TargetLocationMaxErrors: input.TargetLocationMaxErrors }
      };
    };
    var serializeAws_json1_1TargetLocations = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1TargetLocation(entry, context);
      });
    };
    var serializeAws_json1_1TargetMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_1TargetMapValueList(value, context)
        };
      }, {});
    };
    var serializeAws_json1_1TargetMaps = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1TargetMap(entry, context);
      });
    };
    var serializeAws_json1_1TargetMapValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1Targets = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_1Target(entry, context);
      });
    };
    var serializeAws_json1_1TargetValues = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_1TerminateSessionRequest = (input, context) => {
      return {
        ...input.SessionId !== void 0 && input.SessionId !== null && { SessionId: input.SessionId }
      };
    };
    var serializeAws_json1_1UnlabelParameterVersionRequest = (input, context) => {
      return {
        ...input.Labels !== void 0 && input.Labels !== null && { Labels: serializeAws_json1_1ParameterLabelList(input.Labels, context) },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.ParameterVersion !== void 0 && input.ParameterVersion !== null && { ParameterVersion: input.ParameterVersion }
      };
    };
    var serializeAws_json1_1UpdateAssociationRequest = (input, context) => {
      return {
        ...input.ApplyOnlyAtCronInterval !== void 0 && input.ApplyOnlyAtCronInterval !== null && { ApplyOnlyAtCronInterval: input.ApplyOnlyAtCronInterval },
        ...input.AssociationId !== void 0 && input.AssociationId !== null && { AssociationId: input.AssociationId },
        ...input.AssociationName !== void 0 && input.AssociationName !== null && { AssociationName: input.AssociationName },
        ...input.AssociationVersion !== void 0 && input.AssociationVersion !== null && { AssociationVersion: input.AssociationVersion },
        ...input.AutomationTargetParameterName !== void 0 && input.AutomationTargetParameterName !== null && {
          AutomationTargetParameterName: input.AutomationTargetParameterName
        },
        ...input.CalendarNames !== void 0 && input.CalendarNames !== null && {
          CalendarNames: serializeAws_json1_1CalendarNameOrARNList(input.CalendarNames, context)
        },
        ...input.ComplianceSeverity !== void 0 && input.ComplianceSeverity !== null && { ComplianceSeverity: input.ComplianceSeverity },
        ...input.DocumentVersion !== void 0 && input.DocumentVersion !== null && { DocumentVersion: input.DocumentVersion },
        ...input.MaxConcurrency !== void 0 && input.MaxConcurrency !== null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors !== void 0 && input.MaxErrors !== null && { MaxErrors: input.MaxErrors },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.OutputLocation !== void 0 && input.OutputLocation !== null && {
          OutputLocation: serializeAws_json1_1InstanceAssociationOutputLocation(input.OutputLocation, context)
        },
        ...input.Parameters !== void 0 && input.Parameters !== null && { Parameters: serializeAws_json1_1Parameters(input.Parameters, context) },
        ...input.ScheduleExpression !== void 0 && input.ScheduleExpression !== null && { ScheduleExpression: input.ScheduleExpression },
        ...input.ScheduleOffset !== void 0 && input.ScheduleOffset !== null && { ScheduleOffset: input.ScheduleOffset },
        ...input.SyncCompliance !== void 0 && input.SyncCompliance !== null && { SyncCompliance: input.SyncCompliance },
        ...input.TargetLocations !== void 0 && input.TargetLocations !== null && {
          TargetLocations: serializeAws_json1_1TargetLocations(input.TargetLocations, context)
        },
        ...input.TargetMaps !== void 0 && input.TargetMaps !== null && { TargetMaps: serializeAws_json1_1TargetMaps(input.TargetMaps, context) },
        ...input.Targets !== void 0 && input.Targets !== null && { Targets: serializeAws_json1_1Targets(input.Targets, context) }
      };
    };
    var serializeAws_json1_1UpdateAssociationStatusRequest = (input, context) => {
      return {
        ...input.AssociationStatus !== void 0 && input.AssociationStatus !== null && {
          AssociationStatus: serializeAws_json1_1AssociationStatus(input.AssociationStatus, context)
        },
        ...input.InstanceId !== void 0 && input.InstanceId !== null && { InstanceId: input.InstanceId },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name }
      };
    };
    var serializeAws_json1_1UpdateDocumentDefaultVersionRequest = (input, context) => {
      return {
        ...input.DocumentVersion !== void 0 && input.DocumentVersion !== null && { DocumentVersion: input.DocumentVersion },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name }
      };
    };
    var serializeAws_json1_1UpdateDocumentMetadataRequest = (input, context) => {
      return {
        ...input.DocumentReviews !== void 0 && input.DocumentReviews !== null && {
          DocumentReviews: serializeAws_json1_1DocumentReviews(input.DocumentReviews, context)
        },
        ...input.DocumentVersion !== void 0 && input.DocumentVersion !== null && { DocumentVersion: input.DocumentVersion },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name }
      };
    };
    var serializeAws_json1_1UpdateDocumentRequest = (input, context) => {
      return {
        ...input.Attachments !== void 0 && input.Attachments !== null && {
          Attachments: serializeAws_json1_1AttachmentsSourceList(input.Attachments, context)
        },
        ...input.Content !== void 0 && input.Content !== null && { Content: input.Content },
        ...input.DisplayName !== void 0 && input.DisplayName !== null && { DisplayName: input.DisplayName },
        ...input.DocumentFormat !== void 0 && input.DocumentFormat !== null && { DocumentFormat: input.DocumentFormat },
        ...input.DocumentVersion !== void 0 && input.DocumentVersion !== null && { DocumentVersion: input.DocumentVersion },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.TargetType !== void 0 && input.TargetType !== null && { TargetType: input.TargetType },
        ...input.VersionName !== void 0 && input.VersionName !== null && { VersionName: input.VersionName }
      };
    };
    var serializeAws_json1_1UpdateMaintenanceWindowRequest = (input, context) => {
      return {
        ...input.AllowUnassociatedTargets !== void 0 && input.AllowUnassociatedTargets !== null && { AllowUnassociatedTargets: input.AllowUnassociatedTargets },
        ...input.Cutoff !== void 0 && input.Cutoff !== null && { Cutoff: input.Cutoff },
        ...input.Description !== void 0 && input.Description !== null && { Description: input.Description },
        ...input.Duration !== void 0 && input.Duration !== null && { Duration: input.Duration },
        ...input.Enabled !== void 0 && input.Enabled !== null && { Enabled: input.Enabled },
        ...input.EndDate !== void 0 && input.EndDate !== null && { EndDate: input.EndDate },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.Replace !== void 0 && input.Replace !== null && { Replace: input.Replace },
        ...input.Schedule !== void 0 && input.Schedule !== null && { Schedule: input.Schedule },
        ...input.ScheduleOffset !== void 0 && input.ScheduleOffset !== null && { ScheduleOffset: input.ScheduleOffset },
        ...input.ScheduleTimezone !== void 0 && input.ScheduleTimezone !== null && { ScheduleTimezone: input.ScheduleTimezone },
        ...input.StartDate !== void 0 && input.StartDate !== null && { StartDate: input.StartDate },
        ...input.WindowId !== void 0 && input.WindowId !== null && { WindowId: input.WindowId }
      };
    };
    var serializeAws_json1_1UpdateMaintenanceWindowTargetRequest = (input, context) => {
      return {
        ...input.Description !== void 0 && input.Description !== null && { Description: input.Description },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.OwnerInformation !== void 0 && input.OwnerInformation !== null && { OwnerInformation: input.OwnerInformation },
        ...input.Replace !== void 0 && input.Replace !== null && { Replace: input.Replace },
        ...input.Targets !== void 0 && input.Targets !== null && { Targets: serializeAws_json1_1Targets(input.Targets, context) },
        ...input.WindowId !== void 0 && input.WindowId !== null && { WindowId: input.WindowId },
        ...input.WindowTargetId !== void 0 && input.WindowTargetId !== null && { WindowTargetId: input.WindowTargetId }
      };
    };
    var serializeAws_json1_1UpdateMaintenanceWindowTaskRequest = (input, context) => {
      return {
        ...input.CutoffBehavior !== void 0 && input.CutoffBehavior !== null && { CutoffBehavior: input.CutoffBehavior },
        ...input.Description !== void 0 && input.Description !== null && { Description: input.Description },
        ...input.LoggingInfo !== void 0 && input.LoggingInfo !== null && { LoggingInfo: serializeAws_json1_1LoggingInfo(input.LoggingInfo, context) },
        ...input.MaxConcurrency !== void 0 && input.MaxConcurrency !== null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors !== void 0 && input.MaxErrors !== null && { MaxErrors: input.MaxErrors },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.Priority !== void 0 && input.Priority !== null && { Priority: input.Priority },
        ...input.Replace !== void 0 && input.Replace !== null && { Replace: input.Replace },
        ...input.ServiceRoleArn !== void 0 && input.ServiceRoleArn !== null && { ServiceRoleArn: input.ServiceRoleArn },
        ...input.Targets !== void 0 && input.Targets !== null && { Targets: serializeAws_json1_1Targets(input.Targets, context) },
        ...input.TaskArn !== void 0 && input.TaskArn !== null && { TaskArn: input.TaskArn },
        ...input.TaskInvocationParameters !== void 0 && input.TaskInvocationParameters !== null && {
          TaskInvocationParameters: serializeAws_json1_1MaintenanceWindowTaskInvocationParameters(input.TaskInvocationParameters, context)
        },
        ...input.TaskParameters !== void 0 && input.TaskParameters !== null && {
          TaskParameters: serializeAws_json1_1MaintenanceWindowTaskParameters(input.TaskParameters, context)
        },
        ...input.WindowId !== void 0 && input.WindowId !== null && { WindowId: input.WindowId },
        ...input.WindowTaskId !== void 0 && input.WindowTaskId !== null && { WindowTaskId: input.WindowTaskId }
      };
    };
    var serializeAws_json1_1UpdateManagedInstanceRoleRequest = (input, context) => {
      return {
        ...input.IamRole !== void 0 && input.IamRole !== null && { IamRole: input.IamRole },
        ...input.InstanceId !== void 0 && input.InstanceId !== null && { InstanceId: input.InstanceId }
      };
    };
    var serializeAws_json1_1UpdateOpsItemRequest = (input, context) => {
      return {
        ...input.ActualEndTime !== void 0 && input.ActualEndTime !== null && { ActualEndTime: Math.round(input.ActualEndTime.getTime() / 1e3) },
        ...input.ActualStartTime !== void 0 && input.ActualStartTime !== null && { ActualStartTime: Math.round(input.ActualStartTime.getTime() / 1e3) },
        ...input.Category !== void 0 && input.Category !== null && { Category: input.Category },
        ...input.Description !== void 0 && input.Description !== null && { Description: input.Description },
        ...input.Notifications !== void 0 && input.Notifications !== null && {
          Notifications: serializeAws_json1_1OpsItemNotifications(input.Notifications, context)
        },
        ...input.OperationalData !== void 0 && input.OperationalData !== null && {
          OperationalData: serializeAws_json1_1OpsItemOperationalData(input.OperationalData, context)
        },
        ...input.OperationalDataToDelete !== void 0 && input.OperationalDataToDelete !== null && {
          OperationalDataToDelete: serializeAws_json1_1OpsItemOpsDataKeysList(input.OperationalDataToDelete, context)
        },
        ...input.OpsItemId !== void 0 && input.OpsItemId !== null && { OpsItemId: input.OpsItemId },
        ...input.PlannedEndTime !== void 0 && input.PlannedEndTime !== null && { PlannedEndTime: Math.round(input.PlannedEndTime.getTime() / 1e3) },
        ...input.PlannedStartTime !== void 0 && input.PlannedStartTime !== null && { PlannedStartTime: Math.round(input.PlannedStartTime.getTime() / 1e3) },
        ...input.Priority !== void 0 && input.Priority !== null && { Priority: input.Priority },
        ...input.RelatedOpsItems !== void 0 && input.RelatedOpsItems !== null && {
          RelatedOpsItems: serializeAws_json1_1RelatedOpsItems(input.RelatedOpsItems, context)
        },
        ...input.Severity !== void 0 && input.Severity !== null && { Severity: input.Severity },
        ...input.Status !== void 0 && input.Status !== null && { Status: input.Status },
        ...input.Title !== void 0 && input.Title !== null && { Title: input.Title }
      };
    };
    var serializeAws_json1_1UpdateOpsMetadataRequest = (input, context) => {
      return {
        ...input.KeysToDelete !== void 0 && input.KeysToDelete !== null && {
          KeysToDelete: serializeAws_json1_1MetadataKeysToDeleteList(input.KeysToDelete, context)
        },
        ...input.MetadataToUpdate !== void 0 && input.MetadataToUpdate !== null && {
          MetadataToUpdate: serializeAws_json1_1MetadataMap(input.MetadataToUpdate, context)
        },
        ...input.OpsMetadataArn !== void 0 && input.OpsMetadataArn !== null && { OpsMetadataArn: input.OpsMetadataArn }
      };
    };
    var serializeAws_json1_1UpdatePatchBaselineRequest = (input, context) => {
      return {
        ...input.ApprovalRules !== void 0 && input.ApprovalRules !== null && {
          ApprovalRules: serializeAws_json1_1PatchRuleGroup(input.ApprovalRules, context)
        },
        ...input.ApprovedPatches !== void 0 && input.ApprovedPatches !== null && {
          ApprovedPatches: serializeAws_json1_1PatchIdList(input.ApprovedPatches, context)
        },
        ...input.ApprovedPatchesComplianceLevel !== void 0 && input.ApprovedPatchesComplianceLevel !== null && {
          ApprovedPatchesComplianceLevel: input.ApprovedPatchesComplianceLevel
        },
        ...input.ApprovedPatchesEnableNonSecurity !== void 0 && input.ApprovedPatchesEnableNonSecurity !== null && {
          ApprovedPatchesEnableNonSecurity: input.ApprovedPatchesEnableNonSecurity
        },
        ...input.BaselineId !== void 0 && input.BaselineId !== null && { BaselineId: input.BaselineId },
        ...input.Description !== void 0 && input.Description !== null && { Description: input.Description },
        ...input.GlobalFilters !== void 0 && input.GlobalFilters !== null && {
          GlobalFilters: serializeAws_json1_1PatchFilterGroup(input.GlobalFilters, context)
        },
        ...input.Name !== void 0 && input.Name !== null && { Name: input.Name },
        ...input.RejectedPatches !== void 0 && input.RejectedPatches !== null && {
          RejectedPatches: serializeAws_json1_1PatchIdList(input.RejectedPatches, context)
        },
        ...input.RejectedPatchesAction !== void 0 && input.RejectedPatchesAction !== null && { RejectedPatchesAction: input.RejectedPatchesAction },
        ...input.Replace !== void 0 && input.Replace !== null && { Replace: input.Replace },
        ...input.Sources !== void 0 && input.Sources !== null && { Sources: serializeAws_json1_1PatchSourceList(input.Sources, context) }
      };
    };
    var serializeAws_json1_1UpdateResourceDataSyncRequest = (input, context) => {
      return {
        ...input.SyncName !== void 0 && input.SyncName !== null && { SyncName: input.SyncName },
        ...input.SyncSource !== void 0 && input.SyncSource !== null && {
          SyncSource: serializeAws_json1_1ResourceDataSyncSource(input.SyncSource, context)
        },
        ...input.SyncType !== void 0 && input.SyncType !== null && { SyncType: input.SyncType }
      };
    };
    var serializeAws_json1_1UpdateServiceSettingRequest = (input, context) => {
      return {
        ...input.SettingId !== void 0 && input.SettingId !== null && { SettingId: input.SettingId },
        ...input.SettingValue !== void 0 && input.SettingValue !== null && { SettingValue: input.SettingValue }
      };
    };
    var deserializeAws_json1_1AccountIdList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1Accounts = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1AccountSharingInfo = (output, context) => {
      return {
        AccountId: (0, smithy_client_1.expectString)(output.AccountId),
        SharedDocumentVersion: (0, smithy_client_1.expectString)(output.SharedDocumentVersion)
      };
    };
    var deserializeAws_json1_1AccountSharingInfoList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AccountSharingInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1Activation = (output, context) => {
      return {
        ActivationId: (0, smithy_client_1.expectString)(output.ActivationId),
        CreatedDate: output.CreatedDate !== void 0 && output.CreatedDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        DefaultInstanceName: (0, smithy_client_1.expectString)(output.DefaultInstanceName),
        Description: (0, smithy_client_1.expectString)(output.Description),
        ExpirationDate: output.ExpirationDate !== void 0 && output.ExpirationDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExpirationDate))) : void 0,
        Expired: (0, smithy_client_1.expectBoolean)(output.Expired),
        IamRole: (0, smithy_client_1.expectString)(output.IamRole),
        RegistrationLimit: (0, smithy_client_1.expectInt32)(output.RegistrationLimit),
        RegistrationsCount: (0, smithy_client_1.expectInt32)(output.RegistrationsCount),
        Tags: output.Tags !== void 0 && output.Tags !== null ? deserializeAws_json1_1TagList(output.Tags, context) : void 0
      };
    };
    var deserializeAws_json1_1ActivationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Activation(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1AddTagsToResourceResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1AlreadyExistsException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1AssociatedInstances = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1AssociateOpsItemRelatedItemResponse = (output, context) => {
      return {
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId)
      };
    };
    var deserializeAws_json1_1Association = (output, context) => {
      return {
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationName: (0, smithy_client_1.expectString)(output.AssociationName),
        AssociationVersion: (0, smithy_client_1.expectString)(output.AssociationVersion),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        LastExecutionDate: output.LastExecutionDate !== void 0 && output.LastExecutionDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastExecutionDate))) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        Overview: output.Overview !== void 0 && output.Overview !== null ? deserializeAws_json1_1AssociationOverview(output.Overview, context) : void 0,
        ScheduleExpression: (0, smithy_client_1.expectString)(output.ScheduleExpression),
        ScheduleOffset: (0, smithy_client_1.expectInt32)(output.ScheduleOffset),
        TargetMaps: output.TargetMaps !== void 0 && output.TargetMaps !== null ? deserializeAws_json1_1TargetMaps(output.TargetMaps, context) : void 0,
        Targets: output.Targets !== void 0 && output.Targets !== null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0
      };
    };
    var deserializeAws_json1_1AssociationAlreadyExists = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1AssociationDescription = (output, context) => {
      return {
        ApplyOnlyAtCronInterval: (0, smithy_client_1.expectBoolean)(output.ApplyOnlyAtCronInterval),
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationName: (0, smithy_client_1.expectString)(output.AssociationName),
        AssociationVersion: (0, smithy_client_1.expectString)(output.AssociationVersion),
        AutomationTargetParameterName: (0, smithy_client_1.expectString)(output.AutomationTargetParameterName),
        CalendarNames: output.CalendarNames !== void 0 && output.CalendarNames !== null ? deserializeAws_json1_1CalendarNameOrARNList(output.CalendarNames, context) : void 0,
        ComplianceSeverity: (0, smithy_client_1.expectString)(output.ComplianceSeverity),
        Date: output.Date !== void 0 && output.Date !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.Date))) : void 0,
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        LastExecutionDate: output.LastExecutionDate !== void 0 && output.LastExecutionDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastExecutionDate))) : void 0,
        LastSuccessfulExecutionDate: output.LastSuccessfulExecutionDate !== void 0 && output.LastSuccessfulExecutionDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastSuccessfulExecutionDate))) : void 0,
        LastUpdateAssociationDate: output.LastUpdateAssociationDate !== void 0 && output.LastUpdateAssociationDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdateAssociationDate))) : void 0,
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Name: (0, smithy_client_1.expectString)(output.Name),
        OutputLocation: output.OutputLocation !== void 0 && output.OutputLocation !== null ? deserializeAws_json1_1InstanceAssociationOutputLocation(output.OutputLocation, context) : void 0,
        Overview: output.Overview !== void 0 && output.Overview !== null ? deserializeAws_json1_1AssociationOverview(output.Overview, context) : void 0,
        Parameters: output.Parameters !== void 0 && output.Parameters !== null ? deserializeAws_json1_1Parameters(output.Parameters, context) : void 0,
        ScheduleExpression: (0, smithy_client_1.expectString)(output.ScheduleExpression),
        ScheduleOffset: (0, smithy_client_1.expectInt32)(output.ScheduleOffset),
        Status: output.Status !== void 0 && output.Status !== null ? deserializeAws_json1_1AssociationStatus(output.Status, context) : void 0,
        SyncCompliance: (0, smithy_client_1.expectString)(output.SyncCompliance),
        TargetLocations: output.TargetLocations !== void 0 && output.TargetLocations !== null ? deserializeAws_json1_1TargetLocations(output.TargetLocations, context) : void 0,
        TargetMaps: output.TargetMaps !== void 0 && output.TargetMaps !== null ? deserializeAws_json1_1TargetMaps(output.TargetMaps, context) : void 0,
        Targets: output.Targets !== void 0 && output.Targets !== null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0
      };
    };
    var deserializeAws_json1_1AssociationDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AssociationDescription(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1AssociationDoesNotExist = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1AssociationExecution = (output, context) => {
      return {
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationVersion: (0, smithy_client_1.expectString)(output.AssociationVersion),
        CreatedTime: output.CreatedTime !== void 0 && output.CreatedTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedTime))) : void 0,
        DetailedStatus: (0, smithy_client_1.expectString)(output.DetailedStatus),
        ExecutionId: (0, smithy_client_1.expectString)(output.ExecutionId),
        LastExecutionDate: output.LastExecutionDate !== void 0 && output.LastExecutionDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastExecutionDate))) : void 0,
        ResourceCountByStatus: (0, smithy_client_1.expectString)(output.ResourceCountByStatus),
        Status: (0, smithy_client_1.expectString)(output.Status)
      };
    };
    var deserializeAws_json1_1AssociationExecutionDoesNotExist = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1AssociationExecutionsList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AssociationExecution(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1AssociationExecutionTarget = (output, context) => {
      return {
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationVersion: (0, smithy_client_1.expectString)(output.AssociationVersion),
        DetailedStatus: (0, smithy_client_1.expectString)(output.DetailedStatus),
        ExecutionId: (0, smithy_client_1.expectString)(output.ExecutionId),
        LastExecutionDate: output.LastExecutionDate !== void 0 && output.LastExecutionDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastExecutionDate))) : void 0,
        OutputSource: output.OutputSource !== void 0 && output.OutputSource !== null ? deserializeAws_json1_1OutputSource(output.OutputSource, context) : void 0,
        ResourceId: (0, smithy_client_1.expectString)(output.ResourceId),
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
        Status: (0, smithy_client_1.expectString)(output.Status)
      };
    };
    var deserializeAws_json1_1AssociationExecutionTargetsList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AssociationExecutionTarget(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1AssociationLimitExceeded = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1AssociationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Association(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1AssociationOverview = (output, context) => {
      return {
        AssociationStatusAggregatedCount: output.AssociationStatusAggregatedCount !== void 0 && output.AssociationStatusAggregatedCount !== null ? deserializeAws_json1_1AssociationStatusAggregatedCount(output.AssociationStatusAggregatedCount, context) : void 0,
        DetailedStatus: (0, smithy_client_1.expectString)(output.DetailedStatus),
        Status: (0, smithy_client_1.expectString)(output.Status)
      };
    };
    var deserializeAws_json1_1AssociationStatus = (output, context) => {
      return {
        AdditionalInfo: (0, smithy_client_1.expectString)(output.AdditionalInfo),
        Date: output.Date !== void 0 && output.Date !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.Date))) : void 0,
        Message: (0, smithy_client_1.expectString)(output.Message),
        Name: (0, smithy_client_1.expectString)(output.Name)
      };
    };
    var deserializeAws_json1_1AssociationStatusAggregatedCount = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: (0, smithy_client_1.expectInt32)(value)
        };
      }, {});
    };
    var deserializeAws_json1_1AssociationVersionInfo = (output, context) => {
      return {
        ApplyOnlyAtCronInterval: (0, smithy_client_1.expectBoolean)(output.ApplyOnlyAtCronInterval),
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationName: (0, smithy_client_1.expectString)(output.AssociationName),
        AssociationVersion: (0, smithy_client_1.expectString)(output.AssociationVersion),
        CalendarNames: output.CalendarNames !== void 0 && output.CalendarNames !== null ? deserializeAws_json1_1CalendarNameOrARNList(output.CalendarNames, context) : void 0,
        ComplianceSeverity: (0, smithy_client_1.expectString)(output.ComplianceSeverity),
        CreatedDate: output.CreatedDate !== void 0 && output.CreatedDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Name: (0, smithy_client_1.expectString)(output.Name),
        OutputLocation: output.OutputLocation !== void 0 && output.OutputLocation !== null ? deserializeAws_json1_1InstanceAssociationOutputLocation(output.OutputLocation, context) : void 0,
        Parameters: output.Parameters !== void 0 && output.Parameters !== null ? deserializeAws_json1_1Parameters(output.Parameters, context) : void 0,
        ScheduleExpression: (0, smithy_client_1.expectString)(output.ScheduleExpression),
        ScheduleOffset: (0, smithy_client_1.expectInt32)(output.ScheduleOffset),
        SyncCompliance: (0, smithy_client_1.expectString)(output.SyncCompliance),
        TargetLocations: output.TargetLocations !== void 0 && output.TargetLocations !== null ? deserializeAws_json1_1TargetLocations(output.TargetLocations, context) : void 0,
        TargetMaps: output.TargetMaps !== void 0 && output.TargetMaps !== null ? deserializeAws_json1_1TargetMaps(output.TargetMaps, context) : void 0,
        Targets: output.Targets !== void 0 && output.Targets !== null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0
      };
    };
    var deserializeAws_json1_1AssociationVersionLimitExceeded = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1AssociationVersionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AssociationVersionInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1AttachmentContent = (output, context) => {
      return {
        Hash: (0, smithy_client_1.expectString)(output.Hash),
        HashType: (0, smithy_client_1.expectString)(output.HashType),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Size: (0, smithy_client_1.expectLong)(output.Size),
        Url: (0, smithy_client_1.expectString)(output.Url)
      };
    };
    var deserializeAws_json1_1AttachmentContentList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AttachmentContent(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1AttachmentInformation = (output, context) => {
      return {
        Name: (0, smithy_client_1.expectString)(output.Name)
      };
    };
    var deserializeAws_json1_1AttachmentInformationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AttachmentInformation(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1AutomationDefinitionNotApprovedException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1AutomationDefinitionNotFoundException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1AutomationDefinitionVersionNotFoundException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1AutomationExecution = (output, context) => {
      return {
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AutomationExecutionId: (0, smithy_client_1.expectString)(output.AutomationExecutionId),
        AutomationExecutionStatus: (0, smithy_client_1.expectString)(output.AutomationExecutionStatus),
        AutomationSubtype: (0, smithy_client_1.expectString)(output.AutomationSubtype),
        ChangeRequestName: (0, smithy_client_1.expectString)(output.ChangeRequestName),
        CurrentAction: (0, smithy_client_1.expectString)(output.CurrentAction),
        CurrentStepName: (0, smithy_client_1.expectString)(output.CurrentStepName),
        DocumentName: (0, smithy_client_1.expectString)(output.DocumentName),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        ExecutedBy: (0, smithy_client_1.expectString)(output.ExecutedBy),
        ExecutionEndTime: output.ExecutionEndTime !== void 0 && output.ExecutionEndTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionEndTime))) : void 0,
        ExecutionStartTime: output.ExecutionStartTime !== void 0 && output.ExecutionStartTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionStartTime))) : void 0,
        FailureMessage: (0, smithy_client_1.expectString)(output.FailureMessage),
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Mode: (0, smithy_client_1.expectString)(output.Mode),
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId),
        Outputs: output.Outputs !== void 0 && output.Outputs !== null ? deserializeAws_json1_1AutomationParameterMap(output.Outputs, context) : void 0,
        Parameters: output.Parameters !== void 0 && output.Parameters !== null ? deserializeAws_json1_1AutomationParameterMap(output.Parameters, context) : void 0,
        ParentAutomationExecutionId: (0, smithy_client_1.expectString)(output.ParentAutomationExecutionId),
        ProgressCounters: output.ProgressCounters !== void 0 && output.ProgressCounters !== null ? deserializeAws_json1_1ProgressCounters(output.ProgressCounters, context) : void 0,
        ResolvedTargets: output.ResolvedTargets !== void 0 && output.ResolvedTargets !== null ? deserializeAws_json1_1ResolvedTargets(output.ResolvedTargets, context) : void 0,
        Runbooks: output.Runbooks !== void 0 && output.Runbooks !== null ? deserializeAws_json1_1Runbooks(output.Runbooks, context) : void 0,
        ScheduledTime: output.ScheduledTime !== void 0 && output.ScheduledTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ScheduledTime))) : void 0,
        StepExecutions: output.StepExecutions !== void 0 && output.StepExecutions !== null ? deserializeAws_json1_1StepExecutionList(output.StepExecutions, context) : void 0,
        StepExecutionsTruncated: (0, smithy_client_1.expectBoolean)(output.StepExecutionsTruncated),
        Target: (0, smithy_client_1.expectString)(output.Target),
        TargetLocations: output.TargetLocations !== void 0 && output.TargetLocations !== null ? deserializeAws_json1_1TargetLocations(output.TargetLocations, context) : void 0,
        TargetMaps: output.TargetMaps !== void 0 && output.TargetMaps !== null ? deserializeAws_json1_1TargetMaps(output.TargetMaps, context) : void 0,
        TargetParameterName: (0, smithy_client_1.expectString)(output.TargetParameterName),
        Targets: output.Targets !== void 0 && output.Targets !== null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0
      };
    };
    var deserializeAws_json1_1AutomationExecutionLimitExceededException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1AutomationExecutionMetadata = (output, context) => {
      return {
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AutomationExecutionId: (0, smithy_client_1.expectString)(output.AutomationExecutionId),
        AutomationExecutionStatus: (0, smithy_client_1.expectString)(output.AutomationExecutionStatus),
        AutomationSubtype: (0, smithy_client_1.expectString)(output.AutomationSubtype),
        AutomationType: (0, smithy_client_1.expectString)(output.AutomationType),
        ChangeRequestName: (0, smithy_client_1.expectString)(output.ChangeRequestName),
        CurrentAction: (0, smithy_client_1.expectString)(output.CurrentAction),
        CurrentStepName: (0, smithy_client_1.expectString)(output.CurrentStepName),
        DocumentName: (0, smithy_client_1.expectString)(output.DocumentName),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        ExecutedBy: (0, smithy_client_1.expectString)(output.ExecutedBy),
        ExecutionEndTime: output.ExecutionEndTime !== void 0 && output.ExecutionEndTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionEndTime))) : void 0,
        ExecutionStartTime: output.ExecutionStartTime !== void 0 && output.ExecutionStartTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionStartTime))) : void 0,
        FailureMessage: (0, smithy_client_1.expectString)(output.FailureMessage),
        LogFile: (0, smithy_client_1.expectString)(output.LogFile),
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Mode: (0, smithy_client_1.expectString)(output.Mode),
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId),
        Outputs: output.Outputs !== void 0 && output.Outputs !== null ? deserializeAws_json1_1AutomationParameterMap(output.Outputs, context) : void 0,
        ParentAutomationExecutionId: (0, smithy_client_1.expectString)(output.ParentAutomationExecutionId),
        ResolvedTargets: output.ResolvedTargets !== void 0 && output.ResolvedTargets !== null ? deserializeAws_json1_1ResolvedTargets(output.ResolvedTargets, context) : void 0,
        Runbooks: output.Runbooks !== void 0 && output.Runbooks !== null ? deserializeAws_json1_1Runbooks(output.Runbooks, context) : void 0,
        ScheduledTime: output.ScheduledTime !== void 0 && output.ScheduledTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ScheduledTime))) : void 0,
        Target: (0, smithy_client_1.expectString)(output.Target),
        TargetMaps: output.TargetMaps !== void 0 && output.TargetMaps !== null ? deserializeAws_json1_1TargetMaps(output.TargetMaps, context) : void 0,
        TargetParameterName: (0, smithy_client_1.expectString)(output.TargetParameterName),
        Targets: output.Targets !== void 0 && output.Targets !== null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0
      };
    };
    var deserializeAws_json1_1AutomationExecutionMetadataList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AutomationExecutionMetadata(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1AutomationExecutionNotFoundException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1AutomationParameterMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_1AutomationParameterValueList(value, context)
        };
      }, {});
    };
    var deserializeAws_json1_1AutomationParameterValueList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1AutomationStepNotFoundException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1CalendarNameOrARNList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1CancelCommandResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1CancelMaintenanceWindowExecutionResult = (output, context) => {
      return {
        WindowExecutionId: (0, smithy_client_1.expectString)(output.WindowExecutionId)
      };
    };
    var deserializeAws_json1_1CategoryEnumList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1CategoryList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1CloudWatchOutputConfig = (output, context) => {
      return {
        CloudWatchLogGroupName: (0, smithy_client_1.expectString)(output.CloudWatchLogGroupName),
        CloudWatchOutputEnabled: (0, smithy_client_1.expectBoolean)(output.CloudWatchOutputEnabled)
      };
    };
    var deserializeAws_json1_1Command = (output, context) => {
      return {
        CloudWatchOutputConfig: output.CloudWatchOutputConfig !== void 0 && output.CloudWatchOutputConfig !== null ? deserializeAws_json1_1CloudWatchOutputConfig(output.CloudWatchOutputConfig, context) : void 0,
        CommandId: (0, smithy_client_1.expectString)(output.CommandId),
        Comment: (0, smithy_client_1.expectString)(output.Comment),
        CompletedCount: (0, smithy_client_1.expectInt32)(output.CompletedCount),
        DeliveryTimedOutCount: (0, smithy_client_1.expectInt32)(output.DeliveryTimedOutCount),
        DocumentName: (0, smithy_client_1.expectString)(output.DocumentName),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        ErrorCount: (0, smithy_client_1.expectInt32)(output.ErrorCount),
        ExpiresAfter: output.ExpiresAfter !== void 0 && output.ExpiresAfter !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExpiresAfter))) : void 0,
        InstanceIds: output.InstanceIds !== void 0 && output.InstanceIds !== null ? deserializeAws_json1_1InstanceIdList(output.InstanceIds, context) : void 0,
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        NotificationConfig: output.NotificationConfig !== void 0 && output.NotificationConfig !== null ? deserializeAws_json1_1NotificationConfig(output.NotificationConfig, context) : void 0,
        OutputS3BucketName: (0, smithy_client_1.expectString)(output.OutputS3BucketName),
        OutputS3KeyPrefix: (0, smithy_client_1.expectString)(output.OutputS3KeyPrefix),
        OutputS3Region: (0, smithy_client_1.expectString)(output.OutputS3Region),
        Parameters: output.Parameters !== void 0 && output.Parameters !== null ? deserializeAws_json1_1Parameters(output.Parameters, context) : void 0,
        RequestedDateTime: output.RequestedDateTime !== void 0 && output.RequestedDateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.RequestedDateTime))) : void 0,
        ServiceRole: (0, smithy_client_1.expectString)(output.ServiceRole),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        TargetCount: (0, smithy_client_1.expectInt32)(output.TargetCount),
        Targets: output.Targets !== void 0 && output.Targets !== null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        TimeoutSeconds: (0, smithy_client_1.expectInt32)(output.TimeoutSeconds)
      };
    };
    var deserializeAws_json1_1CommandInvocation = (output, context) => {
      return {
        CloudWatchOutputConfig: output.CloudWatchOutputConfig !== void 0 && output.CloudWatchOutputConfig !== null ? deserializeAws_json1_1CloudWatchOutputConfig(output.CloudWatchOutputConfig, context) : void 0,
        CommandId: (0, smithy_client_1.expectString)(output.CommandId),
        CommandPlugins: output.CommandPlugins !== void 0 && output.CommandPlugins !== null ? deserializeAws_json1_1CommandPluginList(output.CommandPlugins, context) : void 0,
        Comment: (0, smithy_client_1.expectString)(output.Comment),
        DocumentName: (0, smithy_client_1.expectString)(output.DocumentName),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        InstanceName: (0, smithy_client_1.expectString)(output.InstanceName),
        NotificationConfig: output.NotificationConfig !== void 0 && output.NotificationConfig !== null ? deserializeAws_json1_1NotificationConfig(output.NotificationConfig, context) : void 0,
        RequestedDateTime: output.RequestedDateTime !== void 0 && output.RequestedDateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.RequestedDateTime))) : void 0,
        ServiceRole: (0, smithy_client_1.expectString)(output.ServiceRole),
        StandardErrorUrl: (0, smithy_client_1.expectString)(output.StandardErrorUrl),
        StandardOutputUrl: (0, smithy_client_1.expectString)(output.StandardOutputUrl),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        TraceOutput: (0, smithy_client_1.expectString)(output.TraceOutput)
      };
    };
    var deserializeAws_json1_1CommandInvocationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1CommandInvocation(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1CommandList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Command(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1CommandPlugin = (output, context) => {
      return {
        Name: (0, smithy_client_1.expectString)(output.Name),
        Output: (0, smithy_client_1.expectString)(output.Output),
        OutputS3BucketName: (0, smithy_client_1.expectString)(output.OutputS3BucketName),
        OutputS3KeyPrefix: (0, smithy_client_1.expectString)(output.OutputS3KeyPrefix),
        OutputS3Region: (0, smithy_client_1.expectString)(output.OutputS3Region),
        ResponseCode: (0, smithy_client_1.expectInt32)(output.ResponseCode),
        ResponseFinishDateTime: output.ResponseFinishDateTime !== void 0 && output.ResponseFinishDateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ResponseFinishDateTime))) : void 0,
        ResponseStartDateTime: output.ResponseStartDateTime !== void 0 && output.ResponseStartDateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ResponseStartDateTime))) : void 0,
        StandardErrorUrl: (0, smithy_client_1.expectString)(output.StandardErrorUrl),
        StandardOutputUrl: (0, smithy_client_1.expectString)(output.StandardOutputUrl),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails)
      };
    };
    var deserializeAws_json1_1CommandPluginList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1CommandPlugin(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ComplianceExecutionSummary = (output, context) => {
      return {
        ExecutionId: (0, smithy_client_1.expectString)(output.ExecutionId),
        ExecutionTime: output.ExecutionTime !== void 0 && output.ExecutionTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionTime))) : void 0,
        ExecutionType: (0, smithy_client_1.expectString)(output.ExecutionType)
      };
    };
    var deserializeAws_json1_1ComplianceItem = (output, context) => {
      return {
        ComplianceType: (0, smithy_client_1.expectString)(output.ComplianceType),
        Details: output.Details !== void 0 && output.Details !== null ? deserializeAws_json1_1ComplianceItemDetails(output.Details, context) : void 0,
        ExecutionSummary: output.ExecutionSummary !== void 0 && output.ExecutionSummary !== null ? deserializeAws_json1_1ComplianceExecutionSummary(output.ExecutionSummary, context) : void 0,
        Id: (0, smithy_client_1.expectString)(output.Id),
        ResourceId: (0, smithy_client_1.expectString)(output.ResourceId),
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
        Severity: (0, smithy_client_1.expectString)(output.Severity),
        Status: (0, smithy_client_1.expectString)(output.Status),
        Title: (0, smithy_client_1.expectString)(output.Title)
      };
    };
    var deserializeAws_json1_1ComplianceItemDetails = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: (0, smithy_client_1.expectString)(value)
        };
      }, {});
    };
    var deserializeAws_json1_1ComplianceItemList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ComplianceItem(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ComplianceSummaryItem = (output, context) => {
      return {
        ComplianceType: (0, smithy_client_1.expectString)(output.ComplianceType),
        CompliantSummary: output.CompliantSummary !== void 0 && output.CompliantSummary !== null ? deserializeAws_json1_1CompliantSummary(output.CompliantSummary, context) : void 0,
        NonCompliantSummary: output.NonCompliantSummary !== void 0 && output.NonCompliantSummary !== null ? deserializeAws_json1_1NonCompliantSummary(output.NonCompliantSummary, context) : void 0
      };
    };
    var deserializeAws_json1_1ComplianceSummaryItemList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ComplianceSummaryItem(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ComplianceTypeCountLimitExceededException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1CompliantSummary = (output, context) => {
      return {
        CompliantCount: (0, smithy_client_1.expectInt32)(output.CompliantCount),
        SeveritySummary: output.SeveritySummary !== void 0 && output.SeveritySummary !== null ? deserializeAws_json1_1SeveritySummary(output.SeveritySummary, context) : void 0
      };
    };
    var deserializeAws_json1_1CreateActivationResult = (output, context) => {
      return {
        ActivationCode: (0, smithy_client_1.expectString)(output.ActivationCode),
        ActivationId: (0, smithy_client_1.expectString)(output.ActivationId)
      };
    };
    var deserializeAws_json1_1CreateAssociationBatchRequestEntry = (output, context) => {
      return {
        ApplyOnlyAtCronInterval: (0, smithy_client_1.expectBoolean)(output.ApplyOnlyAtCronInterval),
        AssociationName: (0, smithy_client_1.expectString)(output.AssociationName),
        AutomationTargetParameterName: (0, smithy_client_1.expectString)(output.AutomationTargetParameterName),
        CalendarNames: output.CalendarNames !== void 0 && output.CalendarNames !== null ? deserializeAws_json1_1CalendarNameOrARNList(output.CalendarNames, context) : void 0,
        ComplianceSeverity: (0, smithy_client_1.expectString)(output.ComplianceSeverity),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Name: (0, smithy_client_1.expectString)(output.Name),
        OutputLocation: output.OutputLocation !== void 0 && output.OutputLocation !== null ? deserializeAws_json1_1InstanceAssociationOutputLocation(output.OutputLocation, context) : void 0,
        Parameters: output.Parameters !== void 0 && output.Parameters !== null ? deserializeAws_json1_1Parameters(output.Parameters, context) : void 0,
        ScheduleExpression: (0, smithy_client_1.expectString)(output.ScheduleExpression),
        ScheduleOffset: (0, smithy_client_1.expectInt32)(output.ScheduleOffset),
        SyncCompliance: (0, smithy_client_1.expectString)(output.SyncCompliance),
        TargetLocations: output.TargetLocations !== void 0 && output.TargetLocations !== null ? deserializeAws_json1_1TargetLocations(output.TargetLocations, context) : void 0,
        TargetMaps: output.TargetMaps !== void 0 && output.TargetMaps !== null ? deserializeAws_json1_1TargetMaps(output.TargetMaps, context) : void 0,
        Targets: output.Targets !== void 0 && output.Targets !== null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0
      };
    };
    var deserializeAws_json1_1CreateAssociationBatchResult = (output, context) => {
      return {
        Failed: output.Failed !== void 0 && output.Failed !== null ? deserializeAws_json1_1FailedCreateAssociationList(output.Failed, context) : void 0,
        Successful: output.Successful !== void 0 && output.Successful !== null ? deserializeAws_json1_1AssociationDescriptionList(output.Successful, context) : void 0
      };
    };
    var deserializeAws_json1_1CreateAssociationResult = (output, context) => {
      return {
        AssociationDescription: output.AssociationDescription !== void 0 && output.AssociationDescription !== null ? deserializeAws_json1_1AssociationDescription(output.AssociationDescription, context) : void 0
      };
    };
    var deserializeAws_json1_1CreateDocumentResult = (output, context) => {
      return {
        DocumentDescription: output.DocumentDescription !== void 0 && output.DocumentDescription !== null ? deserializeAws_json1_1DocumentDescription(output.DocumentDescription, context) : void 0
      };
    };
    var deserializeAws_json1_1CreateMaintenanceWindowResult = (output, context) => {
      return {
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    };
    var deserializeAws_json1_1CreateOpsItemResponse = (output, context) => {
      return {
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId)
      };
    };
    var deserializeAws_json1_1CreateOpsMetadataResult = (output, context) => {
      return {
        OpsMetadataArn: (0, smithy_client_1.expectString)(output.OpsMetadataArn)
      };
    };
    var deserializeAws_json1_1CreatePatchBaselineResult = (output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId)
      };
    };
    var deserializeAws_json1_1CreateResourceDataSyncResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1CustomSchemaCountLimitExceededException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1DeleteActivationResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1DeleteAssociationResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1DeleteDocumentResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1DeleteInventoryResult = (output, context) => {
      return {
        DeletionId: (0, smithy_client_1.expectString)(output.DeletionId),
        DeletionSummary: output.DeletionSummary !== void 0 && output.DeletionSummary !== null ? deserializeAws_json1_1InventoryDeletionSummary(output.DeletionSummary, context) : void 0,
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    };
    var deserializeAws_json1_1DeleteMaintenanceWindowResult = (output, context) => {
      return {
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    };
    var deserializeAws_json1_1DeleteOpsMetadataResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1DeleteParameterResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1DeleteParametersResult = (output, context) => {
      return {
        DeletedParameters: output.DeletedParameters !== void 0 && output.DeletedParameters !== null ? deserializeAws_json1_1ParameterNameList(output.DeletedParameters, context) : void 0,
        InvalidParameters: output.InvalidParameters !== void 0 && output.InvalidParameters !== null ? deserializeAws_json1_1ParameterNameList(output.InvalidParameters, context) : void 0
      };
    };
    var deserializeAws_json1_1DeletePatchBaselineResult = (output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId)
      };
    };
    var deserializeAws_json1_1DeleteResourceDataSyncResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1DeregisterManagedInstanceResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupResult = (output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        PatchGroup: (0, smithy_client_1.expectString)(output.PatchGroup)
      };
    };
    var deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowResult = (output, context) => {
      return {
        WindowId: (0, smithy_client_1.expectString)(output.WindowId),
        WindowTargetId: (0, smithy_client_1.expectString)(output.WindowTargetId)
      };
    };
    var deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowResult = (output, context) => {
      return {
        WindowId: (0, smithy_client_1.expectString)(output.WindowId),
        WindowTaskId: (0, smithy_client_1.expectString)(output.WindowTaskId)
      };
    };
    var deserializeAws_json1_1DescribeActivationsResult = (output, context) => {
      return {
        ActivationList: output.ActivationList !== void 0 && output.ActivationList !== null ? deserializeAws_json1_1ActivationList(output.ActivationList, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeAssociationExecutionsResult = (output, context) => {
      return {
        AssociationExecutions: output.AssociationExecutions !== void 0 && output.AssociationExecutions !== null ? deserializeAws_json1_1AssociationExecutionsList(output.AssociationExecutions, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeAssociationExecutionTargetsResult = (output, context) => {
      return {
        AssociationExecutionTargets: output.AssociationExecutionTargets !== void 0 && output.AssociationExecutionTargets !== null ? deserializeAws_json1_1AssociationExecutionTargetsList(output.AssociationExecutionTargets, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeAssociationResult = (output, context) => {
      return {
        AssociationDescription: output.AssociationDescription !== void 0 && output.AssociationDescription !== null ? deserializeAws_json1_1AssociationDescription(output.AssociationDescription, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeAutomationExecutionsResult = (output, context) => {
      return {
        AutomationExecutionMetadataList: output.AutomationExecutionMetadataList !== void 0 && output.AutomationExecutionMetadataList !== null ? deserializeAws_json1_1AutomationExecutionMetadataList(output.AutomationExecutionMetadataList, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeAutomationStepExecutionsResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        StepExecutions: output.StepExecutions !== void 0 && output.StepExecutions !== null ? deserializeAws_json1_1StepExecutionList(output.StepExecutions, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeAvailablePatchesResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Patches: output.Patches !== void 0 && output.Patches !== null ? deserializeAws_json1_1PatchList(output.Patches, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeDocumentPermissionResponse = (output, context) => {
      return {
        AccountIds: output.AccountIds !== void 0 && output.AccountIds !== null ? deserializeAws_json1_1AccountIdList(output.AccountIds, context) : void 0,
        AccountSharingInfoList: output.AccountSharingInfoList !== void 0 && output.AccountSharingInfoList !== null ? deserializeAws_json1_1AccountSharingInfoList(output.AccountSharingInfoList, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeDocumentResult = (output, context) => {
      return {
        Document: output.Document !== void 0 && output.Document !== null ? deserializeAws_json1_1DocumentDescription(output.Document, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeEffectiveInstanceAssociationsResult = (output, context) => {
      return {
        Associations: output.Associations !== void 0 && output.Associations !== null ? deserializeAws_json1_1InstanceAssociationList(output.Associations, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineResult = (output, context) => {
      return {
        EffectivePatches: output.EffectivePatches !== void 0 && output.EffectivePatches !== null ? deserializeAws_json1_1EffectivePatchList(output.EffectivePatches, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeInstanceAssociationsStatusResult = (output, context) => {
      return {
        InstanceAssociationStatusInfos: output.InstanceAssociationStatusInfos !== void 0 && output.InstanceAssociationStatusInfos !== null ? deserializeAws_json1_1InstanceAssociationStatusInfos(output.InstanceAssociationStatusInfos, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeInstanceInformationResult = (output, context) => {
      return {
        InstanceInformationList: output.InstanceInformationList !== void 0 && output.InstanceInformationList !== null ? deserializeAws_json1_1InstanceInformationList(output.InstanceInformationList, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeInstancePatchesResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Patches: output.Patches !== void 0 && output.Patches !== null ? deserializeAws_json1_1PatchComplianceDataList(output.Patches, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupResult = (output, context) => {
      return {
        InstancePatchStates: output.InstancePatchStates !== void 0 && output.InstancePatchStates !== null ? deserializeAws_json1_1InstancePatchStatesList(output.InstancePatchStates, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeInstancePatchStatesResult = (output, context) => {
      return {
        InstancePatchStates: output.InstancePatchStates !== void 0 && output.InstancePatchStates !== null ? deserializeAws_json1_1InstancePatchStateList(output.InstancePatchStates, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeInventoryDeletionsResult = (output, context) => {
      return {
        InventoryDeletions: output.InventoryDeletions !== void 0 && output.InventoryDeletions !== null ? deserializeAws_json1_1InventoryDeletionsList(output.InventoryDeletions, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionsResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        WindowExecutions: output.WindowExecutions !== void 0 && output.WindowExecutions !== null ? deserializeAws_json1_1MaintenanceWindowExecutionList(output.WindowExecutions, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        WindowExecutionTaskInvocationIdentities: output.WindowExecutionTaskInvocationIdentities !== void 0 && output.WindowExecutionTaskInvocationIdentities !== null ? deserializeAws_json1_1MaintenanceWindowExecutionTaskInvocationIdentityList(output.WindowExecutionTaskInvocationIdentities, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        WindowExecutionTaskIdentities: output.WindowExecutionTaskIdentities !== void 0 && output.WindowExecutionTaskIdentities !== null ? deserializeAws_json1_1MaintenanceWindowExecutionTaskIdentityList(output.WindowExecutionTaskIdentities, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowScheduleResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        ScheduledWindowExecutions: output.ScheduledWindowExecutions !== void 0 && output.ScheduledWindowExecutions !== null ? deserializeAws_json1_1ScheduledWindowExecutionList(output.ScheduledWindowExecutions, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowsForTargetResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        WindowIdentities: output.WindowIdentities !== void 0 && output.WindowIdentities !== null ? deserializeAws_json1_1MaintenanceWindowsForTargetList(output.WindowIdentities, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowsResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        WindowIdentities: output.WindowIdentities !== void 0 && output.WindowIdentities !== null ? deserializeAws_json1_1MaintenanceWindowIdentityList(output.WindowIdentities, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowTargetsResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Targets: output.Targets !== void 0 && output.Targets !== null ? deserializeAws_json1_1MaintenanceWindowTargetList(output.Targets, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowTasksResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Tasks: output.Tasks !== void 0 && output.Tasks !== null ? deserializeAws_json1_1MaintenanceWindowTaskList(output.Tasks, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeOpsItemsResponse = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        OpsItemSummaries: output.OpsItemSummaries !== void 0 && output.OpsItemSummaries !== null ? deserializeAws_json1_1OpsItemSummaries(output.OpsItemSummaries, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeParametersResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Parameters: output.Parameters !== void 0 && output.Parameters !== null ? deserializeAws_json1_1ParameterMetadataList(output.Parameters, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribePatchBaselinesResult = (output, context) => {
      return {
        BaselineIdentities: output.BaselineIdentities !== void 0 && output.BaselineIdentities !== null ? deserializeAws_json1_1PatchBaselineIdentityList(output.BaselineIdentities, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribePatchGroupsResult = (output, context) => {
      return {
        Mappings: output.Mappings !== void 0 && output.Mappings !== null ? deserializeAws_json1_1PatchGroupPatchBaselineMappingList(output.Mappings, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribePatchGroupStateResult = (output, context) => {
      return {
        Instances: (0, smithy_client_1.expectInt32)(output.Instances),
        InstancesWithCriticalNonCompliantPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithCriticalNonCompliantPatches),
        InstancesWithFailedPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithFailedPatches),
        InstancesWithInstalledOtherPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithInstalledOtherPatches),
        InstancesWithInstalledPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithInstalledPatches),
        InstancesWithInstalledPendingRebootPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithInstalledPendingRebootPatches),
        InstancesWithInstalledRejectedPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithInstalledRejectedPatches),
        InstancesWithMissingPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithMissingPatches),
        InstancesWithNotApplicablePatches: (0, smithy_client_1.expectInt32)(output.InstancesWithNotApplicablePatches),
        InstancesWithOtherNonCompliantPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithOtherNonCompliantPatches),
        InstancesWithSecurityNonCompliantPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithSecurityNonCompliantPatches),
        InstancesWithUnreportedNotApplicablePatches: (0, smithy_client_1.expectInt32)(output.InstancesWithUnreportedNotApplicablePatches)
      };
    };
    var deserializeAws_json1_1DescribePatchPropertiesResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Properties: output.Properties !== void 0 && output.Properties !== null ? deserializeAws_json1_1PatchPropertiesList(output.Properties, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeSessionsResponse = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Sessions: output.Sessions !== void 0 && output.Sessions !== null ? deserializeAws_json1_1SessionList(output.Sessions, context) : void 0
      };
    };
    var deserializeAws_json1_1DisassociateOpsItemRelatedItemResponse = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1DocumentAlreadyExists = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1DocumentDefaultVersionDescription = (output, context) => {
      return {
        DefaultVersion: (0, smithy_client_1.expectString)(output.DefaultVersion),
        DefaultVersionName: (0, smithy_client_1.expectString)(output.DefaultVersionName),
        Name: (0, smithy_client_1.expectString)(output.Name)
      };
    };
    var deserializeAws_json1_1DocumentDescription = (output, context) => {
      return {
        ApprovedVersion: (0, smithy_client_1.expectString)(output.ApprovedVersion),
        AttachmentsInformation: output.AttachmentsInformation !== void 0 && output.AttachmentsInformation !== null ? deserializeAws_json1_1AttachmentInformationList(output.AttachmentsInformation, context) : void 0,
        Author: (0, smithy_client_1.expectString)(output.Author),
        Category: output.Category !== void 0 && output.Category !== null ? deserializeAws_json1_1CategoryList(output.Category, context) : void 0,
        CategoryEnum: output.CategoryEnum !== void 0 && output.CategoryEnum !== null ? deserializeAws_json1_1CategoryEnumList(output.CategoryEnum, context) : void 0,
        CreatedDate: output.CreatedDate !== void 0 && output.CreatedDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        DefaultVersion: (0, smithy_client_1.expectString)(output.DefaultVersion),
        Description: (0, smithy_client_1.expectString)(output.Description),
        DisplayName: (0, smithy_client_1.expectString)(output.DisplayName),
        DocumentFormat: (0, smithy_client_1.expectString)(output.DocumentFormat),
        DocumentType: (0, smithy_client_1.expectString)(output.DocumentType),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        Hash: (0, smithy_client_1.expectString)(output.Hash),
        HashType: (0, smithy_client_1.expectString)(output.HashType),
        LatestVersion: (0, smithy_client_1.expectString)(output.LatestVersion),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Owner: (0, smithy_client_1.expectString)(output.Owner),
        Parameters: output.Parameters !== void 0 && output.Parameters !== null ? deserializeAws_json1_1DocumentParameterList(output.Parameters, context) : void 0,
        PendingReviewVersion: (0, smithy_client_1.expectString)(output.PendingReviewVersion),
        PlatformTypes: output.PlatformTypes !== void 0 && output.PlatformTypes !== null ? deserializeAws_json1_1PlatformTypeList(output.PlatformTypes, context) : void 0,
        Requires: output.Requires !== void 0 && output.Requires !== null ? deserializeAws_json1_1DocumentRequiresList(output.Requires, context) : void 0,
        ReviewInformation: output.ReviewInformation !== void 0 && output.ReviewInformation !== null ? deserializeAws_json1_1ReviewInformationList(output.ReviewInformation, context) : void 0,
        ReviewStatus: (0, smithy_client_1.expectString)(output.ReviewStatus),
        SchemaVersion: (0, smithy_client_1.expectString)(output.SchemaVersion),
        Sha1: (0, smithy_client_1.expectString)(output.Sha1),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusInformation: (0, smithy_client_1.expectString)(output.StatusInformation),
        Tags: output.Tags !== void 0 && output.Tags !== null ? deserializeAws_json1_1TagList(output.Tags, context) : void 0,
        TargetType: (0, smithy_client_1.expectString)(output.TargetType),
        VersionName: (0, smithy_client_1.expectString)(output.VersionName)
      };
    };
    var deserializeAws_json1_1DocumentIdentifier = (output, context) => {
      return {
        Author: (0, smithy_client_1.expectString)(output.Author),
        CreatedDate: output.CreatedDate !== void 0 && output.CreatedDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        DisplayName: (0, smithy_client_1.expectString)(output.DisplayName),
        DocumentFormat: (0, smithy_client_1.expectString)(output.DocumentFormat),
        DocumentType: (0, smithy_client_1.expectString)(output.DocumentType),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Owner: (0, smithy_client_1.expectString)(output.Owner),
        PlatformTypes: output.PlatformTypes !== void 0 && output.PlatformTypes !== null ? deserializeAws_json1_1PlatformTypeList(output.PlatformTypes, context) : void 0,
        Requires: output.Requires !== void 0 && output.Requires !== null ? deserializeAws_json1_1DocumentRequiresList(output.Requires, context) : void 0,
        ReviewStatus: (0, smithy_client_1.expectString)(output.ReviewStatus),
        SchemaVersion: (0, smithy_client_1.expectString)(output.SchemaVersion),
        Tags: output.Tags !== void 0 && output.Tags !== null ? deserializeAws_json1_1TagList(output.Tags, context) : void 0,
        TargetType: (0, smithy_client_1.expectString)(output.TargetType),
        VersionName: (0, smithy_client_1.expectString)(output.VersionName)
      };
    };
    var deserializeAws_json1_1DocumentIdentifierList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1DocumentIdentifier(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1DocumentLimitExceeded = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1DocumentMetadataResponseInfo = (output, context) => {
      return {
        ReviewerResponse: output.ReviewerResponse !== void 0 && output.ReviewerResponse !== null ? deserializeAws_json1_1DocumentReviewerResponseList(output.ReviewerResponse, context) : void 0
      };
    };
    var deserializeAws_json1_1DocumentParameter = (output, context) => {
      return {
        DefaultValue: (0, smithy_client_1.expectString)(output.DefaultValue),
        Description: (0, smithy_client_1.expectString)(output.Description),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Type: (0, smithy_client_1.expectString)(output.Type)
      };
    };
    var deserializeAws_json1_1DocumentParameterList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1DocumentParameter(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1DocumentPermissionLimit = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1DocumentRequires = (output, context) => {
      return {
        Name: (0, smithy_client_1.expectString)(output.Name),
        Version: (0, smithy_client_1.expectString)(output.Version)
      };
    };
    var deserializeAws_json1_1DocumentRequiresList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1DocumentRequires(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1DocumentReviewCommentList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1DocumentReviewCommentSource(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1DocumentReviewCommentSource = (output, context) => {
      return {
        Content: (0, smithy_client_1.expectString)(output.Content),
        Type: (0, smithy_client_1.expectString)(output.Type)
      };
    };
    var deserializeAws_json1_1DocumentReviewerResponseList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1DocumentReviewerResponseSource(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1DocumentReviewerResponseSource = (output, context) => {
      return {
        Comment: output.Comment !== void 0 && output.Comment !== null ? deserializeAws_json1_1DocumentReviewCommentList(output.Comment, context) : void 0,
        CreateTime: output.CreateTime !== void 0 && output.CreateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreateTime))) : void 0,
        ReviewStatus: (0, smithy_client_1.expectString)(output.ReviewStatus),
        Reviewer: (0, smithy_client_1.expectString)(output.Reviewer),
        UpdatedTime: output.UpdatedTime !== void 0 && output.UpdatedTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.UpdatedTime))) : void 0
      };
    };
    var deserializeAws_json1_1DocumentVersionInfo = (output, context) => {
      return {
        CreatedDate: output.CreatedDate !== void 0 && output.CreatedDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        DisplayName: (0, smithy_client_1.expectString)(output.DisplayName),
        DocumentFormat: (0, smithy_client_1.expectString)(output.DocumentFormat),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        IsDefaultVersion: (0, smithy_client_1.expectBoolean)(output.IsDefaultVersion),
        Name: (0, smithy_client_1.expectString)(output.Name),
        ReviewStatus: (0, smithy_client_1.expectString)(output.ReviewStatus),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusInformation: (0, smithy_client_1.expectString)(output.StatusInformation),
        VersionName: (0, smithy_client_1.expectString)(output.VersionName)
      };
    };
    var deserializeAws_json1_1DocumentVersionLimitExceeded = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1DocumentVersionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1DocumentVersionInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1DoesNotExistException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1DuplicateDocumentContent = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1DuplicateDocumentVersionName = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1DuplicateInstanceId = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1EffectivePatch = (output, context) => {
      return {
        Patch: output.Patch !== void 0 && output.Patch !== null ? deserializeAws_json1_1Patch(output.Patch, context) : void 0,
        PatchStatus: output.PatchStatus !== void 0 && output.PatchStatus !== null ? deserializeAws_json1_1PatchStatus(output.PatchStatus, context) : void 0
      };
    };
    var deserializeAws_json1_1EffectivePatchList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1EffectivePatch(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1FailedCreateAssociation = (output, context) => {
      return {
        Entry: output.Entry !== void 0 && output.Entry !== null ? deserializeAws_json1_1CreateAssociationBatchRequestEntry(output.Entry, context) : void 0,
        Fault: (0, smithy_client_1.expectString)(output.Fault),
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1FailedCreateAssociationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1FailedCreateAssociation(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1FailureDetails = (output, context) => {
      return {
        Details: output.Details !== void 0 && output.Details !== null ? deserializeAws_json1_1AutomationParameterMap(output.Details, context) : void 0,
        FailureStage: (0, smithy_client_1.expectString)(output.FailureStage),
        FailureType: (0, smithy_client_1.expectString)(output.FailureType)
      };
    };
    var deserializeAws_json1_1FeatureNotAvailableException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1GetAutomationExecutionResult = (output, context) => {
      return {
        AutomationExecution: output.AutomationExecution !== void 0 && output.AutomationExecution !== null ? deserializeAws_json1_1AutomationExecution(output.AutomationExecution, context) : void 0
      };
    };
    var deserializeAws_json1_1GetCalendarStateResponse = (output, context) => {
      return {
        AtTime: (0, smithy_client_1.expectString)(output.AtTime),
        NextTransitionTime: (0, smithy_client_1.expectString)(output.NextTransitionTime),
        State: (0, smithy_client_1.expectString)(output.State)
      };
    };
    var deserializeAws_json1_1GetCommandInvocationResult = (output, context) => {
      return {
        CloudWatchOutputConfig: output.CloudWatchOutputConfig !== void 0 && output.CloudWatchOutputConfig !== null ? deserializeAws_json1_1CloudWatchOutputConfig(output.CloudWatchOutputConfig, context) : void 0,
        CommandId: (0, smithy_client_1.expectString)(output.CommandId),
        Comment: (0, smithy_client_1.expectString)(output.Comment),
        DocumentName: (0, smithy_client_1.expectString)(output.DocumentName),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        ExecutionElapsedTime: (0, smithy_client_1.expectString)(output.ExecutionElapsedTime),
        ExecutionEndDateTime: (0, smithy_client_1.expectString)(output.ExecutionEndDateTime),
        ExecutionStartDateTime: (0, smithy_client_1.expectString)(output.ExecutionStartDateTime),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        PluginName: (0, smithy_client_1.expectString)(output.PluginName),
        ResponseCode: (0, smithy_client_1.expectInt32)(output.ResponseCode),
        StandardErrorContent: (0, smithy_client_1.expectString)(output.StandardErrorContent),
        StandardErrorUrl: (0, smithy_client_1.expectString)(output.StandardErrorUrl),
        StandardOutputContent: (0, smithy_client_1.expectString)(output.StandardOutputContent),
        StandardOutputUrl: (0, smithy_client_1.expectString)(output.StandardOutputUrl),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails)
      };
    };
    var deserializeAws_json1_1GetConnectionStatusResponse = (output, context) => {
      return {
        Status: (0, smithy_client_1.expectString)(output.Status),
        Target: (0, smithy_client_1.expectString)(output.Target)
      };
    };
    var deserializeAws_json1_1GetDefaultPatchBaselineResult = (output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        OperatingSystem: (0, smithy_client_1.expectString)(output.OperatingSystem)
      };
    };
    var deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceResult = (output, context) => {
      return {
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        Product: (0, smithy_client_1.expectString)(output.Product),
        SnapshotDownloadUrl: (0, smithy_client_1.expectString)(output.SnapshotDownloadUrl),
        SnapshotId: (0, smithy_client_1.expectString)(output.SnapshotId)
      };
    };
    var deserializeAws_json1_1GetDocumentResult = (output, context) => {
      return {
        AttachmentsContent: output.AttachmentsContent !== void 0 && output.AttachmentsContent !== null ? deserializeAws_json1_1AttachmentContentList(output.AttachmentsContent, context) : void 0,
        Content: (0, smithy_client_1.expectString)(output.Content),
        CreatedDate: output.CreatedDate !== void 0 && output.CreatedDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        DisplayName: (0, smithy_client_1.expectString)(output.DisplayName),
        DocumentFormat: (0, smithy_client_1.expectString)(output.DocumentFormat),
        DocumentType: (0, smithy_client_1.expectString)(output.DocumentType),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Requires: output.Requires !== void 0 && output.Requires !== null ? deserializeAws_json1_1DocumentRequiresList(output.Requires, context) : void 0,
        ReviewStatus: (0, smithy_client_1.expectString)(output.ReviewStatus),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusInformation: (0, smithy_client_1.expectString)(output.StatusInformation),
        VersionName: (0, smithy_client_1.expectString)(output.VersionName)
      };
    };
    var deserializeAws_json1_1GetInventoryResult = (output, context) => {
      return {
        Entities: output.Entities !== void 0 && output.Entities !== null ? deserializeAws_json1_1InventoryResultEntityList(output.Entities, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1GetInventorySchemaResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Schemas: output.Schemas !== void 0 && output.Schemas !== null ? deserializeAws_json1_1InventoryItemSchemaResultList(output.Schemas, context) : void 0
      };
    };
    var deserializeAws_json1_1GetMaintenanceWindowExecutionResult = (output, context) => {
      return {
        EndTime: output.EndTime !== void 0 && output.EndTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndTime))) : void 0,
        StartTime: output.StartTime !== void 0 && output.StartTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartTime))) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        TaskIds: output.TaskIds !== void 0 && output.TaskIds !== null ? deserializeAws_json1_1MaintenanceWindowExecutionTaskIdList(output.TaskIds, context) : void 0,
        WindowExecutionId: (0, smithy_client_1.expectString)(output.WindowExecutionId)
      };
    };
    var deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationResult = (output, context) => {
      return {
        EndTime: output.EndTime !== void 0 && output.EndTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndTime))) : void 0,
        ExecutionId: (0, smithy_client_1.expectString)(output.ExecutionId),
        InvocationId: (0, smithy_client_1.expectString)(output.InvocationId),
        OwnerInformation: (0, smithy_client_1.expectString)(output.OwnerInformation),
        Parameters: (0, smithy_client_1.expectString)(output.Parameters),
        StartTime: output.StartTime !== void 0 && output.StartTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartTime))) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        TaskExecutionId: (0, smithy_client_1.expectString)(output.TaskExecutionId),
        TaskType: (0, smithy_client_1.expectString)(output.TaskType),
        WindowExecutionId: (0, smithy_client_1.expectString)(output.WindowExecutionId),
        WindowTargetId: (0, smithy_client_1.expectString)(output.WindowTargetId)
      };
    };
    var deserializeAws_json1_1GetMaintenanceWindowExecutionTaskResult = (output, context) => {
      return {
        EndTime: output.EndTime !== void 0 && output.EndTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndTime))) : void 0,
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Priority: (0, smithy_client_1.expectInt32)(output.Priority),
        ServiceRole: (0, smithy_client_1.expectString)(output.ServiceRole),
        StartTime: output.StartTime !== void 0 && output.StartTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartTime))) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        TaskArn: (0, smithy_client_1.expectString)(output.TaskArn),
        TaskExecutionId: (0, smithy_client_1.expectString)(output.TaskExecutionId),
        TaskParameters: output.TaskParameters !== void 0 && output.TaskParameters !== null ? deserializeAws_json1_1MaintenanceWindowTaskParametersList(output.TaskParameters, context) : void 0,
        Type: (0, smithy_client_1.expectString)(output.Type),
        WindowExecutionId: (0, smithy_client_1.expectString)(output.WindowExecutionId)
      };
    };
    var deserializeAws_json1_1GetMaintenanceWindowResult = (output, context) => {
      return {
        AllowUnassociatedTargets: (0, smithy_client_1.expectBoolean)(output.AllowUnassociatedTargets),
        CreatedDate: output.CreatedDate !== void 0 && output.CreatedDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        Cutoff: (0, smithy_client_1.expectInt32)(output.Cutoff),
        Description: (0, smithy_client_1.expectString)(output.Description),
        Duration: (0, smithy_client_1.expectInt32)(output.Duration),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled),
        EndDate: (0, smithy_client_1.expectString)(output.EndDate),
        ModifiedDate: output.ModifiedDate !== void 0 && output.ModifiedDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ModifiedDate))) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        NextExecutionTime: (0, smithy_client_1.expectString)(output.NextExecutionTime),
        Schedule: (0, smithy_client_1.expectString)(output.Schedule),
        ScheduleOffset: (0, smithy_client_1.expectInt32)(output.ScheduleOffset),
        ScheduleTimezone: (0, smithy_client_1.expectString)(output.ScheduleTimezone),
        StartDate: (0, smithy_client_1.expectString)(output.StartDate),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    };
    var deserializeAws_json1_1GetMaintenanceWindowTaskResult = (output, context) => {
      return {
        CutoffBehavior: (0, smithy_client_1.expectString)(output.CutoffBehavior),
        Description: (0, smithy_client_1.expectString)(output.Description),
        LoggingInfo: output.LoggingInfo !== void 0 && output.LoggingInfo !== null ? deserializeAws_json1_1LoggingInfo(output.LoggingInfo, context) : void 0,
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Priority: (0, smithy_client_1.expectInt32)(output.Priority),
        ServiceRoleArn: (0, smithy_client_1.expectString)(output.ServiceRoleArn),
        Targets: output.Targets !== void 0 && output.Targets !== null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        TaskArn: (0, smithy_client_1.expectString)(output.TaskArn),
        TaskInvocationParameters: output.TaskInvocationParameters !== void 0 && output.TaskInvocationParameters !== null ? deserializeAws_json1_1MaintenanceWindowTaskInvocationParameters(output.TaskInvocationParameters, context) : void 0,
        TaskParameters: output.TaskParameters !== void 0 && output.TaskParameters !== null ? deserializeAws_json1_1MaintenanceWindowTaskParameters(output.TaskParameters, context) : void 0,
        TaskType: (0, smithy_client_1.expectString)(output.TaskType),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId),
        WindowTaskId: (0, smithy_client_1.expectString)(output.WindowTaskId)
      };
    };
    var deserializeAws_json1_1GetOpsItemResponse = (output, context) => {
      return {
        OpsItem: output.OpsItem !== void 0 && output.OpsItem !== null ? deserializeAws_json1_1OpsItem(output.OpsItem, context) : void 0
      };
    };
    var deserializeAws_json1_1GetOpsMetadataResult = (output, context) => {
      return {
        Metadata: output.Metadata !== void 0 && output.Metadata !== null ? deserializeAws_json1_1MetadataMap(output.Metadata, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        ResourceId: (0, smithy_client_1.expectString)(output.ResourceId)
      };
    };
    var deserializeAws_json1_1GetOpsSummaryResult = (output, context) => {
      return {
        Entities: output.Entities !== void 0 && output.Entities !== null ? deserializeAws_json1_1OpsEntityList(output.Entities, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1GetParameterHistoryResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Parameters: output.Parameters !== void 0 && output.Parameters !== null ? deserializeAws_json1_1ParameterHistoryList(output.Parameters, context) : void 0
      };
    };
    var deserializeAws_json1_1GetParameterResult = (output, context) => {
      return {
        Parameter: output.Parameter !== void 0 && output.Parameter !== null ? deserializeAws_json1_1Parameter(output.Parameter, context) : void 0
      };
    };
    var deserializeAws_json1_1GetParametersByPathResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Parameters: output.Parameters !== void 0 && output.Parameters !== null ? deserializeAws_json1_1ParameterList(output.Parameters, context) : void 0
      };
    };
    var deserializeAws_json1_1GetParametersResult = (output, context) => {
      return {
        InvalidParameters: output.InvalidParameters !== void 0 && output.InvalidParameters !== null ? deserializeAws_json1_1ParameterNameList(output.InvalidParameters, context) : void 0,
        Parameters: output.Parameters !== void 0 && output.Parameters !== null ? deserializeAws_json1_1ParameterList(output.Parameters, context) : void 0
      };
    };
    var deserializeAws_json1_1GetPatchBaselineForPatchGroupResult = (output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        OperatingSystem: (0, smithy_client_1.expectString)(output.OperatingSystem),
        PatchGroup: (0, smithy_client_1.expectString)(output.PatchGroup)
      };
    };
    var deserializeAws_json1_1GetPatchBaselineResult = (output, context) => {
      return {
        ApprovalRules: output.ApprovalRules !== void 0 && output.ApprovalRules !== null ? deserializeAws_json1_1PatchRuleGroup(output.ApprovalRules, context) : void 0,
        ApprovedPatches: output.ApprovedPatches !== void 0 && output.ApprovedPatches !== null ? deserializeAws_json1_1PatchIdList(output.ApprovedPatches, context) : void 0,
        ApprovedPatchesComplianceLevel: (0, smithy_client_1.expectString)(output.ApprovedPatchesComplianceLevel),
        ApprovedPatchesEnableNonSecurity: (0, smithy_client_1.expectBoolean)(output.ApprovedPatchesEnableNonSecurity),
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        CreatedDate: output.CreatedDate !== void 0 && output.CreatedDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        Description: (0, smithy_client_1.expectString)(output.Description),
        GlobalFilters: output.GlobalFilters !== void 0 && output.GlobalFilters !== null ? deserializeAws_json1_1PatchFilterGroup(output.GlobalFilters, context) : void 0,
        ModifiedDate: output.ModifiedDate !== void 0 && output.ModifiedDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ModifiedDate))) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        OperatingSystem: (0, smithy_client_1.expectString)(output.OperatingSystem),
        PatchGroups: output.PatchGroups !== void 0 && output.PatchGroups !== null ? deserializeAws_json1_1PatchGroupList(output.PatchGroups, context) : void 0,
        RejectedPatches: output.RejectedPatches !== void 0 && output.RejectedPatches !== null ? deserializeAws_json1_1PatchIdList(output.RejectedPatches, context) : void 0,
        RejectedPatchesAction: (0, smithy_client_1.expectString)(output.RejectedPatchesAction),
        Sources: output.Sources !== void 0 && output.Sources !== null ? deserializeAws_json1_1PatchSourceList(output.Sources, context) : void 0
      };
    };
    var deserializeAws_json1_1GetServiceSettingResult = (output, context) => {
      return {
        ServiceSetting: output.ServiceSetting !== void 0 && output.ServiceSetting !== null ? deserializeAws_json1_1ServiceSetting(output.ServiceSetting, context) : void 0
      };
    };
    var deserializeAws_json1_1HierarchyLevelLimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1HierarchyTypeMismatchException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1IdempotentParameterMismatch = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1IncompatiblePolicyException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InstanceAggregatedAssociationOverview = (output, context) => {
      return {
        DetailedStatus: (0, smithy_client_1.expectString)(output.DetailedStatus),
        InstanceAssociationStatusAggregatedCount: output.InstanceAssociationStatusAggregatedCount !== void 0 && output.InstanceAssociationStatusAggregatedCount !== null ? deserializeAws_json1_1InstanceAssociationStatusAggregatedCount(output.InstanceAssociationStatusAggregatedCount, context) : void 0
      };
    };
    var deserializeAws_json1_1InstanceAssociation = (output, context) => {
      return {
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationVersion: (0, smithy_client_1.expectString)(output.AssociationVersion),
        Content: (0, smithy_client_1.expectString)(output.Content),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId)
      };
    };
    var deserializeAws_json1_1InstanceAssociationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InstanceAssociation(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InstanceAssociationOutputLocation = (output, context) => {
      return {
        S3Location: output.S3Location !== void 0 && output.S3Location !== null ? deserializeAws_json1_1S3OutputLocation(output.S3Location, context) : void 0
      };
    };
    var deserializeAws_json1_1InstanceAssociationOutputUrl = (output, context) => {
      return {
        S3OutputUrl: output.S3OutputUrl !== void 0 && output.S3OutputUrl !== null ? deserializeAws_json1_1S3OutputUrl(output.S3OutputUrl, context) : void 0
      };
    };
    var deserializeAws_json1_1InstanceAssociationStatusAggregatedCount = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: (0, smithy_client_1.expectInt32)(value)
        };
      }, {});
    };
    var deserializeAws_json1_1InstanceAssociationStatusInfo = (output, context) => {
      return {
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationName: (0, smithy_client_1.expectString)(output.AssociationName),
        AssociationVersion: (0, smithy_client_1.expectString)(output.AssociationVersion),
        DetailedStatus: (0, smithy_client_1.expectString)(output.DetailedStatus),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        ErrorCode: (0, smithy_client_1.expectString)(output.ErrorCode),
        ExecutionDate: output.ExecutionDate !== void 0 && output.ExecutionDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionDate))) : void 0,
        ExecutionSummary: (0, smithy_client_1.expectString)(output.ExecutionSummary),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        Name: (0, smithy_client_1.expectString)(output.Name),
        OutputUrl: output.OutputUrl !== void 0 && output.OutputUrl !== null ? deserializeAws_json1_1InstanceAssociationOutputUrl(output.OutputUrl, context) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status)
      };
    };
    var deserializeAws_json1_1InstanceAssociationStatusInfos = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InstanceAssociationStatusInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InstanceIdList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1InstanceInformation = (output, context) => {
      return {
        ActivationId: (0, smithy_client_1.expectString)(output.ActivationId),
        AgentVersion: (0, smithy_client_1.expectString)(output.AgentVersion),
        AssociationOverview: output.AssociationOverview !== void 0 && output.AssociationOverview !== null ? deserializeAws_json1_1InstanceAggregatedAssociationOverview(output.AssociationOverview, context) : void 0,
        AssociationStatus: (0, smithy_client_1.expectString)(output.AssociationStatus),
        ComputerName: (0, smithy_client_1.expectString)(output.ComputerName),
        IPAddress: (0, smithy_client_1.expectString)(output.IPAddress),
        IamRole: (0, smithy_client_1.expectString)(output.IamRole),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        IsLatestVersion: (0, smithy_client_1.expectBoolean)(output.IsLatestVersion),
        LastAssociationExecutionDate: output.LastAssociationExecutionDate !== void 0 && output.LastAssociationExecutionDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastAssociationExecutionDate))) : void 0,
        LastPingDateTime: output.LastPingDateTime !== void 0 && output.LastPingDateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastPingDateTime))) : void 0,
        LastSuccessfulAssociationExecutionDate: output.LastSuccessfulAssociationExecutionDate !== void 0 && output.LastSuccessfulAssociationExecutionDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastSuccessfulAssociationExecutionDate))) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        PingStatus: (0, smithy_client_1.expectString)(output.PingStatus),
        PlatformName: (0, smithy_client_1.expectString)(output.PlatformName),
        PlatformType: (0, smithy_client_1.expectString)(output.PlatformType),
        PlatformVersion: (0, smithy_client_1.expectString)(output.PlatformVersion),
        RegistrationDate: output.RegistrationDate !== void 0 && output.RegistrationDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.RegistrationDate))) : void 0,
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
        SourceId: (0, smithy_client_1.expectString)(output.SourceId),
        SourceType: (0, smithy_client_1.expectString)(output.SourceType)
      };
    };
    var deserializeAws_json1_1InstanceInformationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InstanceInformation(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InstancePatchState = (output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        CriticalNonCompliantCount: (0, smithy_client_1.expectInt32)(output.CriticalNonCompliantCount),
        FailedCount: (0, smithy_client_1.expectInt32)(output.FailedCount),
        InstallOverrideList: (0, smithy_client_1.expectString)(output.InstallOverrideList),
        InstalledCount: (0, smithy_client_1.expectInt32)(output.InstalledCount),
        InstalledOtherCount: (0, smithy_client_1.expectInt32)(output.InstalledOtherCount),
        InstalledPendingRebootCount: (0, smithy_client_1.expectInt32)(output.InstalledPendingRebootCount),
        InstalledRejectedCount: (0, smithy_client_1.expectInt32)(output.InstalledRejectedCount),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        LastNoRebootInstallOperationTime: output.LastNoRebootInstallOperationTime !== void 0 && output.LastNoRebootInstallOperationTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastNoRebootInstallOperationTime))) : void 0,
        MissingCount: (0, smithy_client_1.expectInt32)(output.MissingCount),
        NotApplicableCount: (0, smithy_client_1.expectInt32)(output.NotApplicableCount),
        Operation: (0, smithy_client_1.expectString)(output.Operation),
        OperationEndTime: output.OperationEndTime !== void 0 && output.OperationEndTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.OperationEndTime))) : void 0,
        OperationStartTime: output.OperationStartTime !== void 0 && output.OperationStartTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.OperationStartTime))) : void 0,
        OtherNonCompliantCount: (0, smithy_client_1.expectInt32)(output.OtherNonCompliantCount),
        OwnerInformation: (0, smithy_client_1.expectString)(output.OwnerInformation),
        PatchGroup: (0, smithy_client_1.expectString)(output.PatchGroup),
        RebootOption: (0, smithy_client_1.expectString)(output.RebootOption),
        SecurityNonCompliantCount: (0, smithy_client_1.expectInt32)(output.SecurityNonCompliantCount),
        SnapshotId: (0, smithy_client_1.expectString)(output.SnapshotId),
        UnreportedNotApplicableCount: (0, smithy_client_1.expectInt32)(output.UnreportedNotApplicableCount)
      };
    };
    var deserializeAws_json1_1InstancePatchStateList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InstancePatchState(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InstancePatchStatesList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InstancePatchState(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InternalServerError = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidActivation = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidActivationId = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidAggregatorException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidAllowedPatternException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidAssociation = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidAssociationVersion = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidAutomationExecutionParametersException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidAutomationSignalException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidAutomationStatusUpdateException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidCommandId = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1InvalidDeleteInventoryParametersException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidDeletionIdException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidDocument = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidDocumentContent = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidDocumentOperation = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidDocumentSchemaVersion = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidDocumentType = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidDocumentVersion = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidFilter = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidFilterKey = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1InvalidFilterOption = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidFilterValue = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidInstanceId = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidInstanceInformationFilterValue = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidInventoryGroupException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidInventoryItemContextException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidInventoryRequestException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidItemContentException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    };
    var deserializeAws_json1_1InvalidKeyId = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidNextToken = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidNotificationConfig = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidOptionException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidOutputFolder = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1InvalidOutputLocation = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1InvalidParameters = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidPermissionType = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidPluginName = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1InvalidPolicyAttributeException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidPolicyTypeException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidResourceId = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1InvalidResourceType = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1InvalidResultAttributeException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidRole = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidSchedule = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidTarget = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidTargetMaps = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidTypeNameException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidUpdate = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InventoryDeletionsList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InventoryDeletionStatusItem(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InventoryDeletionStatusItem = (output, context) => {
      return {
        DeletionId: (0, smithy_client_1.expectString)(output.DeletionId),
        DeletionStartTime: output.DeletionStartTime !== void 0 && output.DeletionStartTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.DeletionStartTime))) : void 0,
        DeletionSummary: output.DeletionSummary !== void 0 && output.DeletionSummary !== null ? deserializeAws_json1_1InventoryDeletionSummary(output.DeletionSummary, context) : void 0,
        LastStatus: (0, smithy_client_1.expectString)(output.LastStatus),
        LastStatusMessage: (0, smithy_client_1.expectString)(output.LastStatusMessage),
        LastStatusUpdateTime: output.LastStatusUpdateTime !== void 0 && output.LastStatusUpdateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastStatusUpdateTime))) : void 0,
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    };
    var deserializeAws_json1_1InventoryDeletionSummary = (output, context) => {
      return {
        RemainingCount: (0, smithy_client_1.expectInt32)(output.RemainingCount),
        SummaryItems: output.SummaryItems !== void 0 && output.SummaryItems !== null ? deserializeAws_json1_1InventoryDeletionSummaryItems(output.SummaryItems, context) : void 0,
        TotalCount: (0, smithy_client_1.expectInt32)(output.TotalCount)
      };
    };
    var deserializeAws_json1_1InventoryDeletionSummaryItem = (output, context) => {
      return {
        Count: (0, smithy_client_1.expectInt32)(output.Count),
        RemainingCount: (0, smithy_client_1.expectInt32)(output.RemainingCount),
        Version: (0, smithy_client_1.expectString)(output.Version)
      };
    };
    var deserializeAws_json1_1InventoryDeletionSummaryItems = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InventoryDeletionSummaryItem(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InventoryItemAttribute = (output, context) => {
      return {
        DataType: (0, smithy_client_1.expectString)(output.DataType),
        Name: (0, smithy_client_1.expectString)(output.Name)
      };
    };
    var deserializeAws_json1_1InventoryItemAttributeList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InventoryItemAttribute(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InventoryItemEntry = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: (0, smithy_client_1.expectString)(value)
        };
      }, {});
    };
    var deserializeAws_json1_1InventoryItemEntryList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InventoryItemEntry(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InventoryItemSchema = (output, context) => {
      return {
        Attributes: output.Attributes !== void 0 && output.Attributes !== null ? deserializeAws_json1_1InventoryItemAttributeList(output.Attributes, context) : void 0,
        DisplayName: (0, smithy_client_1.expectString)(output.DisplayName),
        TypeName: (0, smithy_client_1.expectString)(output.TypeName),
        Version: (0, smithy_client_1.expectString)(output.Version)
      };
    };
    var deserializeAws_json1_1InventoryItemSchemaResultList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InventoryItemSchema(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InventoryResultEntity = (output, context) => {
      return {
        Data: output.Data !== void 0 && output.Data !== null ? deserializeAws_json1_1InventoryResultItemMap(output.Data, context) : void 0,
        Id: (0, smithy_client_1.expectString)(output.Id)
      };
    };
    var deserializeAws_json1_1InventoryResultEntityList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InventoryResultEntity(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InventoryResultItem = (output, context) => {
      return {
        CaptureTime: (0, smithy_client_1.expectString)(output.CaptureTime),
        Content: output.Content !== void 0 && output.Content !== null ? deserializeAws_json1_1InventoryItemEntryList(output.Content, context) : void 0,
        ContentHash: (0, smithy_client_1.expectString)(output.ContentHash),
        SchemaVersion: (0, smithy_client_1.expectString)(output.SchemaVersion),
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    };
    var deserializeAws_json1_1InventoryResultItemMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_1InventoryResultItem(value, context)
        };
      }, {});
    };
    var deserializeAws_json1_1InvocationDoesNotExist = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1ItemContentMismatchException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    };
    var deserializeAws_json1_1ItemSizeLimitExceededException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    };
    var deserializeAws_json1_1LabelParameterVersionResult = (output, context) => {
      return {
        InvalidLabels: output.InvalidLabels !== void 0 && output.InvalidLabels !== null ? deserializeAws_json1_1ParameterLabelList(output.InvalidLabels, context) : void 0,
        ParameterVersion: (0, smithy_client_1.expectLong)(output.ParameterVersion)
      };
    };
    var deserializeAws_json1_1ListAssociationsResult = (output, context) => {
      return {
        Associations: output.Associations !== void 0 && output.Associations !== null ? deserializeAws_json1_1AssociationList(output.Associations, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1ListAssociationVersionsResult = (output, context) => {
      return {
        AssociationVersions: output.AssociationVersions !== void 0 && output.AssociationVersions !== null ? deserializeAws_json1_1AssociationVersionList(output.AssociationVersions, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1ListCommandInvocationsResult = (output, context) => {
      return {
        CommandInvocations: output.CommandInvocations !== void 0 && output.CommandInvocations !== null ? deserializeAws_json1_1CommandInvocationList(output.CommandInvocations, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1ListCommandsResult = (output, context) => {
      return {
        Commands: output.Commands !== void 0 && output.Commands !== null ? deserializeAws_json1_1CommandList(output.Commands, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1ListComplianceItemsResult = (output, context) => {
      return {
        ComplianceItems: output.ComplianceItems !== void 0 && output.ComplianceItems !== null ? deserializeAws_json1_1ComplianceItemList(output.ComplianceItems, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1ListComplianceSummariesResult = (output, context) => {
      return {
        ComplianceSummaryItems: output.ComplianceSummaryItems !== void 0 && output.ComplianceSummaryItems !== null ? deserializeAws_json1_1ComplianceSummaryItemList(output.ComplianceSummaryItems, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1ListDocumentMetadataHistoryResponse = (output, context) => {
      return {
        Author: (0, smithy_client_1.expectString)(output.Author),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        Metadata: output.Metadata !== void 0 && output.Metadata !== null ? deserializeAws_json1_1DocumentMetadataResponseInfo(output.Metadata, context) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1ListDocumentsResult = (output, context) => {
      return {
        DocumentIdentifiers: output.DocumentIdentifiers !== void 0 && output.DocumentIdentifiers !== null ? deserializeAws_json1_1DocumentIdentifierList(output.DocumentIdentifiers, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1ListDocumentVersionsResult = (output, context) => {
      return {
        DocumentVersions: output.DocumentVersions !== void 0 && output.DocumentVersions !== null ? deserializeAws_json1_1DocumentVersionList(output.DocumentVersions, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1ListInventoryEntriesResult = (output, context) => {
      return {
        CaptureTime: (0, smithy_client_1.expectString)(output.CaptureTime),
        Entries: output.Entries !== void 0 && output.Entries !== null ? deserializeAws_json1_1InventoryItemEntryList(output.Entries, context) : void 0,
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        SchemaVersion: (0, smithy_client_1.expectString)(output.SchemaVersion),
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    };
    var deserializeAws_json1_1ListOpsItemEventsResponse = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Summaries: output.Summaries !== void 0 && output.Summaries !== null ? deserializeAws_json1_1OpsItemEventSummaries(output.Summaries, context) : void 0
      };
    };
    var deserializeAws_json1_1ListOpsItemRelatedItemsResponse = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Summaries: output.Summaries !== void 0 && output.Summaries !== null ? deserializeAws_json1_1OpsItemRelatedItemSummaries(output.Summaries, context) : void 0
      };
    };
    var deserializeAws_json1_1ListOpsMetadataResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        OpsMetadataList: output.OpsMetadataList !== void 0 && output.OpsMetadataList !== null ? deserializeAws_json1_1OpsMetadataList(output.OpsMetadataList, context) : void 0
      };
    };
    var deserializeAws_json1_1ListResourceComplianceSummariesResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        ResourceComplianceSummaryItems: output.ResourceComplianceSummaryItems !== void 0 && output.ResourceComplianceSummaryItems !== null ? deserializeAws_json1_1ResourceComplianceSummaryItemList(output.ResourceComplianceSummaryItems, context) : void 0
      };
    };
    var deserializeAws_json1_1ListResourceDataSyncResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        ResourceDataSyncItems: output.ResourceDataSyncItems !== void 0 && output.ResourceDataSyncItems !== null ? deserializeAws_json1_1ResourceDataSyncItemList(output.ResourceDataSyncItems, context) : void 0
      };
    };
    var deserializeAws_json1_1ListTagsForResourceResult = (output, context) => {
      return {
        TagList: output.TagList !== void 0 && output.TagList !== null ? deserializeAws_json1_1TagList(output.TagList, context) : void 0
      };
    };
    var deserializeAws_json1_1LoggingInfo = (output, context) => {
      return {
        S3BucketName: (0, smithy_client_1.expectString)(output.S3BucketName),
        S3KeyPrefix: (0, smithy_client_1.expectString)(output.S3KeyPrefix),
        S3Region: (0, smithy_client_1.expectString)(output.S3Region)
      };
    };
    var deserializeAws_json1_1MaintenanceWindowAutomationParameters = (output, context) => {
      return {
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        Parameters: output.Parameters !== void 0 && output.Parameters !== null ? deserializeAws_json1_1AutomationParameterMap(output.Parameters, context) : void 0
      };
    };
    var deserializeAws_json1_1MaintenanceWindowExecution = (output, context) => {
      return {
        EndTime: output.EndTime !== void 0 && output.EndTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndTime))) : void 0,
        StartTime: output.StartTime !== void 0 && output.StartTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartTime))) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        WindowExecutionId: (0, smithy_client_1.expectString)(output.WindowExecutionId),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    };
    var deserializeAws_json1_1MaintenanceWindowExecutionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowExecution(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1MaintenanceWindowExecutionTaskIdentity = (output, context) => {
      return {
        EndTime: output.EndTime !== void 0 && output.EndTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndTime))) : void 0,
        StartTime: output.StartTime !== void 0 && output.StartTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartTime))) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        TaskArn: (0, smithy_client_1.expectString)(output.TaskArn),
        TaskExecutionId: (0, smithy_client_1.expectString)(output.TaskExecutionId),
        TaskType: (0, smithy_client_1.expectString)(output.TaskType),
        WindowExecutionId: (0, smithy_client_1.expectString)(output.WindowExecutionId)
      };
    };
    var deserializeAws_json1_1MaintenanceWindowExecutionTaskIdentityList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowExecutionTaskIdentity(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1MaintenanceWindowExecutionTaskIdList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1MaintenanceWindowExecutionTaskInvocationIdentity = (output, context) => {
      return {
        EndTime: output.EndTime !== void 0 && output.EndTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndTime))) : void 0,
        ExecutionId: (0, smithy_client_1.expectString)(output.ExecutionId),
        InvocationId: (0, smithy_client_1.expectString)(output.InvocationId),
        OwnerInformation: (0, smithy_client_1.expectString)(output.OwnerInformation),
        Parameters: (0, smithy_client_1.expectString)(output.Parameters),
        StartTime: output.StartTime !== void 0 && output.StartTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartTime))) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        TaskExecutionId: (0, smithy_client_1.expectString)(output.TaskExecutionId),
        TaskType: (0, smithy_client_1.expectString)(output.TaskType),
        WindowExecutionId: (0, smithy_client_1.expectString)(output.WindowExecutionId),
        WindowTargetId: (0, smithy_client_1.expectString)(output.WindowTargetId)
      };
    };
    var deserializeAws_json1_1MaintenanceWindowExecutionTaskInvocationIdentityList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowExecutionTaskInvocationIdentity(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1MaintenanceWindowIdentity = (output, context) => {
      return {
        Cutoff: (0, smithy_client_1.expectInt32)(output.Cutoff),
        Description: (0, smithy_client_1.expectString)(output.Description),
        Duration: (0, smithy_client_1.expectInt32)(output.Duration),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled),
        EndDate: (0, smithy_client_1.expectString)(output.EndDate),
        Name: (0, smithy_client_1.expectString)(output.Name),
        NextExecutionTime: (0, smithy_client_1.expectString)(output.NextExecutionTime),
        Schedule: (0, smithy_client_1.expectString)(output.Schedule),
        ScheduleOffset: (0, smithy_client_1.expectInt32)(output.ScheduleOffset),
        ScheduleTimezone: (0, smithy_client_1.expectString)(output.ScheduleTimezone),
        StartDate: (0, smithy_client_1.expectString)(output.StartDate),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    };
    var deserializeAws_json1_1MaintenanceWindowIdentityForTarget = (output, context) => {
      return {
        Name: (0, smithy_client_1.expectString)(output.Name),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    };
    var deserializeAws_json1_1MaintenanceWindowIdentityList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowIdentity(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1MaintenanceWindowLambdaParameters = (output, context) => {
      return {
        ClientContext: (0, smithy_client_1.expectString)(output.ClientContext),
        Payload: output.Payload !== void 0 && output.Payload !== null ? context.base64Decoder(output.Payload) : void 0,
        Qualifier: (0, smithy_client_1.expectString)(output.Qualifier)
      };
    };
    var deserializeAws_json1_1MaintenanceWindowRunCommandParameters = (output, context) => {
      return {
        CloudWatchOutputConfig: output.CloudWatchOutputConfig !== void 0 && output.CloudWatchOutputConfig !== null ? deserializeAws_json1_1CloudWatchOutputConfig(output.CloudWatchOutputConfig, context) : void 0,
        Comment: (0, smithy_client_1.expectString)(output.Comment),
        DocumentHash: (0, smithy_client_1.expectString)(output.DocumentHash),
        DocumentHashType: (0, smithy_client_1.expectString)(output.DocumentHashType),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        NotificationConfig: output.NotificationConfig !== void 0 && output.NotificationConfig !== null ? deserializeAws_json1_1NotificationConfig(output.NotificationConfig, context) : void 0,
        OutputS3BucketName: (0, smithy_client_1.expectString)(output.OutputS3BucketName),
        OutputS3KeyPrefix: (0, smithy_client_1.expectString)(output.OutputS3KeyPrefix),
        Parameters: output.Parameters !== void 0 && output.Parameters !== null ? deserializeAws_json1_1Parameters(output.Parameters, context) : void 0,
        ServiceRoleArn: (0, smithy_client_1.expectString)(output.ServiceRoleArn),
        TimeoutSeconds: (0, smithy_client_1.expectInt32)(output.TimeoutSeconds)
      };
    };
    var deserializeAws_json1_1MaintenanceWindowsForTargetList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowIdentityForTarget(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1MaintenanceWindowStepFunctionsParameters = (output, context) => {
      return {
        Input: (0, smithy_client_1.expectString)(output.Input),
        Name: (0, smithy_client_1.expectString)(output.Name)
      };
    };
    var deserializeAws_json1_1MaintenanceWindowTarget = (output, context) => {
      return {
        Description: (0, smithy_client_1.expectString)(output.Description),
        Name: (0, smithy_client_1.expectString)(output.Name),
        OwnerInformation: (0, smithy_client_1.expectString)(output.OwnerInformation),
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
        Targets: output.Targets !== void 0 && output.Targets !== null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        WindowId: (0, smithy_client_1.expectString)(output.WindowId),
        WindowTargetId: (0, smithy_client_1.expectString)(output.WindowTargetId)
      };
    };
    var deserializeAws_json1_1MaintenanceWindowTargetList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowTarget(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1MaintenanceWindowTask = (output, context) => {
      return {
        CutoffBehavior: (0, smithy_client_1.expectString)(output.CutoffBehavior),
        Description: (0, smithy_client_1.expectString)(output.Description),
        LoggingInfo: output.LoggingInfo !== void 0 && output.LoggingInfo !== null ? deserializeAws_json1_1LoggingInfo(output.LoggingInfo, context) : void 0,
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Priority: (0, smithy_client_1.expectInt32)(output.Priority),
        ServiceRoleArn: (0, smithy_client_1.expectString)(output.ServiceRoleArn),
        Targets: output.Targets !== void 0 && output.Targets !== null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        TaskArn: (0, smithy_client_1.expectString)(output.TaskArn),
        TaskParameters: output.TaskParameters !== void 0 && output.TaskParameters !== null ? deserializeAws_json1_1MaintenanceWindowTaskParameters(output.TaskParameters, context) : void 0,
        Type: (0, smithy_client_1.expectString)(output.Type),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId),
        WindowTaskId: (0, smithy_client_1.expectString)(output.WindowTaskId)
      };
    };
    var deserializeAws_json1_1MaintenanceWindowTaskInvocationParameters = (output, context) => {
      return {
        Automation: output.Automation !== void 0 && output.Automation !== null ? deserializeAws_json1_1MaintenanceWindowAutomationParameters(output.Automation, context) : void 0,
        Lambda: output.Lambda !== void 0 && output.Lambda !== null ? deserializeAws_json1_1MaintenanceWindowLambdaParameters(output.Lambda, context) : void 0,
        RunCommand: output.RunCommand !== void 0 && output.RunCommand !== null ? deserializeAws_json1_1MaintenanceWindowRunCommandParameters(output.RunCommand, context) : void 0,
        StepFunctions: output.StepFunctions !== void 0 && output.StepFunctions !== null ? deserializeAws_json1_1MaintenanceWindowStepFunctionsParameters(output.StepFunctions, context) : void 0
      };
    };
    var deserializeAws_json1_1MaintenanceWindowTaskList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowTask(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1MaintenanceWindowTaskParameters = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_1MaintenanceWindowTaskParameterValueExpression(value, context)
        };
      }, {});
    };
    var deserializeAws_json1_1MaintenanceWindowTaskParametersList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowTaskParameters(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1MaintenanceWindowTaskParameterValueExpression = (output, context) => {
      return {
        Values: output.Values !== void 0 && output.Values !== null ? deserializeAws_json1_1MaintenanceWindowTaskParameterValueList(output.Values, context) : void 0
      };
    };
    var deserializeAws_json1_1MaintenanceWindowTaskParameterValueList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1MaxDocumentSizeExceeded = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1MetadataMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_1MetadataValue(value, context)
        };
      }, {});
    };
    var deserializeAws_json1_1MetadataValue = (output, context) => {
      return {
        Value: (0, smithy_client_1.expectString)(output.Value)
      };
    };
    var deserializeAws_json1_1ModifyDocumentPermissionResponse = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1NonCompliantSummary = (output, context) => {
      return {
        NonCompliantCount: (0, smithy_client_1.expectInt32)(output.NonCompliantCount),
        SeveritySummary: output.SeveritySummary !== void 0 && output.SeveritySummary !== null ? deserializeAws_json1_1SeveritySummary(output.SeveritySummary, context) : void 0
      };
    };
    var deserializeAws_json1_1NormalStringMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: (0, smithy_client_1.expectString)(value)
        };
      }, {});
    };
    var deserializeAws_json1_1NotificationConfig = (output, context) => {
      return {
        NotificationArn: (0, smithy_client_1.expectString)(output.NotificationArn),
        NotificationEvents: output.NotificationEvents !== void 0 && output.NotificationEvents !== null ? deserializeAws_json1_1NotificationEventList(output.NotificationEvents, context) : void 0,
        NotificationType: (0, smithy_client_1.expectString)(output.NotificationType)
      };
    };
    var deserializeAws_json1_1NotificationEventList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1OpsEntity = (output, context) => {
      return {
        Data: output.Data !== void 0 && output.Data !== null ? deserializeAws_json1_1OpsEntityItemMap(output.Data, context) : void 0,
        Id: (0, smithy_client_1.expectString)(output.Id)
      };
    };
    var deserializeAws_json1_1OpsEntityItem = (output, context) => {
      return {
        CaptureTime: (0, smithy_client_1.expectString)(output.CaptureTime),
        Content: output.Content !== void 0 && output.Content !== null ? deserializeAws_json1_1OpsEntityItemEntryList(output.Content, context) : void 0
      };
    };
    var deserializeAws_json1_1OpsEntityItemEntry = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: (0, smithy_client_1.expectString)(value)
        };
      }, {});
    };
    var deserializeAws_json1_1OpsEntityItemEntryList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1OpsEntityItemEntry(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1OpsEntityItemMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_1OpsEntityItem(value, context)
        };
      }, {});
    };
    var deserializeAws_json1_1OpsEntityList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1OpsEntity(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1OpsItem = (output, context) => {
      return {
        ActualEndTime: output.ActualEndTime !== void 0 && output.ActualEndTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ActualEndTime))) : void 0,
        ActualStartTime: output.ActualStartTime !== void 0 && output.ActualStartTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ActualStartTime))) : void 0,
        Category: (0, smithy_client_1.expectString)(output.Category),
        CreatedBy: (0, smithy_client_1.expectString)(output.CreatedBy),
        CreatedTime: output.CreatedTime !== void 0 && output.CreatedTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedTime))) : void 0,
        Description: (0, smithy_client_1.expectString)(output.Description),
        LastModifiedBy: (0, smithy_client_1.expectString)(output.LastModifiedBy),
        LastModifiedTime: output.LastModifiedTime !== void 0 && output.LastModifiedTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedTime))) : void 0,
        Notifications: output.Notifications !== void 0 && output.Notifications !== null ? deserializeAws_json1_1OpsItemNotifications(output.Notifications, context) : void 0,
        OperationalData: output.OperationalData !== void 0 && output.OperationalData !== null ? deserializeAws_json1_1OpsItemOperationalData(output.OperationalData, context) : void 0,
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId),
        OpsItemType: (0, smithy_client_1.expectString)(output.OpsItemType),
        PlannedEndTime: output.PlannedEndTime !== void 0 && output.PlannedEndTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.PlannedEndTime))) : void 0,
        PlannedStartTime: output.PlannedStartTime !== void 0 && output.PlannedStartTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.PlannedStartTime))) : void 0,
        Priority: (0, smithy_client_1.expectInt32)(output.Priority),
        RelatedOpsItems: output.RelatedOpsItems !== void 0 && output.RelatedOpsItems !== null ? deserializeAws_json1_1RelatedOpsItems(output.RelatedOpsItems, context) : void 0,
        Severity: (0, smithy_client_1.expectString)(output.Severity),
        Source: (0, smithy_client_1.expectString)(output.Source),
        Status: (0, smithy_client_1.expectString)(output.Status),
        Title: (0, smithy_client_1.expectString)(output.Title),
        Version: (0, smithy_client_1.expectString)(output.Version)
      };
    };
    var deserializeAws_json1_1OpsItemAlreadyExistsException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId)
      };
    };
    var deserializeAws_json1_1OpsItemDataValue = (output, context) => {
      return {
        Type: (0, smithy_client_1.expectString)(output.Type),
        Value: (0, smithy_client_1.expectString)(output.Value)
      };
    };
    var deserializeAws_json1_1OpsItemEventSummaries = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1OpsItemEventSummary(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1OpsItemEventSummary = (output, context) => {
      return {
        CreatedBy: output.CreatedBy !== void 0 && output.CreatedBy !== null ? deserializeAws_json1_1OpsItemIdentity(output.CreatedBy, context) : void 0,
        CreatedTime: output.CreatedTime !== void 0 && output.CreatedTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedTime))) : void 0,
        Detail: (0, smithy_client_1.expectString)(output.Detail),
        DetailType: (0, smithy_client_1.expectString)(output.DetailType),
        EventId: (0, smithy_client_1.expectString)(output.EventId),
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId),
        Source: (0, smithy_client_1.expectString)(output.Source)
      };
    };
    var deserializeAws_json1_1OpsItemIdentity = (output, context) => {
      return {
        Arn: (0, smithy_client_1.expectString)(output.Arn)
      };
    };
    var deserializeAws_json1_1OpsItemInvalidParameterException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        ParameterNames: output.ParameterNames !== void 0 && output.ParameterNames !== null ? deserializeAws_json1_1OpsItemParameterNamesList(output.ParameterNames, context) : void 0
      };
    };
    var deserializeAws_json1_1OpsItemLimitExceededException = (output, context) => {
      return {
        Limit: (0, smithy_client_1.expectInt32)(output.Limit),
        LimitType: (0, smithy_client_1.expectString)(output.LimitType),
        Message: (0, smithy_client_1.expectString)(output.Message),
        ResourceTypes: output.ResourceTypes !== void 0 && output.ResourceTypes !== null ? deserializeAws_json1_1OpsItemParameterNamesList(output.ResourceTypes, context) : void 0
      };
    };
    var deserializeAws_json1_1OpsItemNotFoundException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1OpsItemNotification = (output, context) => {
      return {
        Arn: (0, smithy_client_1.expectString)(output.Arn)
      };
    };
    var deserializeAws_json1_1OpsItemNotifications = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1OpsItemNotification(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1OpsItemOperationalData = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_1OpsItemDataValue(value, context)
        };
      }, {});
    };
    var deserializeAws_json1_1OpsItemParameterNamesList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1OpsItemRelatedItemAlreadyExistsException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId),
        ResourceUri: (0, smithy_client_1.expectString)(output.ResourceUri)
      };
    };
    var deserializeAws_json1_1OpsItemRelatedItemAssociationNotFoundException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1OpsItemRelatedItemSummaries = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1OpsItemRelatedItemSummary(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1OpsItemRelatedItemSummary = (output, context) => {
      return {
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationType: (0, smithy_client_1.expectString)(output.AssociationType),
        CreatedBy: output.CreatedBy !== void 0 && output.CreatedBy !== null ? deserializeAws_json1_1OpsItemIdentity(output.CreatedBy, context) : void 0,
        CreatedTime: output.CreatedTime !== void 0 && output.CreatedTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedTime))) : void 0,
        LastModifiedBy: output.LastModifiedBy !== void 0 && output.LastModifiedBy !== null ? deserializeAws_json1_1OpsItemIdentity(output.LastModifiedBy, context) : void 0,
        LastModifiedTime: output.LastModifiedTime !== void 0 && output.LastModifiedTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedTime))) : void 0,
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId),
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
        ResourceUri: (0, smithy_client_1.expectString)(output.ResourceUri)
      };
    };
    var deserializeAws_json1_1OpsItemSummaries = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1OpsItemSummary(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1OpsItemSummary = (output, context) => {
      return {
        ActualEndTime: output.ActualEndTime !== void 0 && output.ActualEndTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ActualEndTime))) : void 0,
        ActualStartTime: output.ActualStartTime !== void 0 && output.ActualStartTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ActualStartTime))) : void 0,
        Category: (0, smithy_client_1.expectString)(output.Category),
        CreatedBy: (0, smithy_client_1.expectString)(output.CreatedBy),
        CreatedTime: output.CreatedTime !== void 0 && output.CreatedTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedTime))) : void 0,
        LastModifiedBy: (0, smithy_client_1.expectString)(output.LastModifiedBy),
        LastModifiedTime: output.LastModifiedTime !== void 0 && output.LastModifiedTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedTime))) : void 0,
        OperationalData: output.OperationalData !== void 0 && output.OperationalData !== null ? deserializeAws_json1_1OpsItemOperationalData(output.OperationalData, context) : void 0,
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId),
        OpsItemType: (0, smithy_client_1.expectString)(output.OpsItemType),
        PlannedEndTime: output.PlannedEndTime !== void 0 && output.PlannedEndTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.PlannedEndTime))) : void 0,
        PlannedStartTime: output.PlannedStartTime !== void 0 && output.PlannedStartTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.PlannedStartTime))) : void 0,
        Priority: (0, smithy_client_1.expectInt32)(output.Priority),
        Severity: (0, smithy_client_1.expectString)(output.Severity),
        Source: (0, smithy_client_1.expectString)(output.Source),
        Status: (0, smithy_client_1.expectString)(output.Status),
        Title: (0, smithy_client_1.expectString)(output.Title)
      };
    };
    var deserializeAws_json1_1OpsMetadata = (output, context) => {
      return {
        CreationDate: output.CreationDate !== void 0 && output.CreationDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreationDate))) : void 0,
        LastModifiedDate: output.LastModifiedDate !== void 0 && output.LastModifiedDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedDate))) : void 0,
        LastModifiedUser: (0, smithy_client_1.expectString)(output.LastModifiedUser),
        OpsMetadataArn: (0, smithy_client_1.expectString)(output.OpsMetadataArn),
        ResourceId: (0, smithy_client_1.expectString)(output.ResourceId)
      };
    };
    var deserializeAws_json1_1OpsMetadataAlreadyExistsException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1OpsMetadataInvalidArgumentException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1OpsMetadataKeyLimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1OpsMetadataLimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1OpsMetadataList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1OpsMetadata(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1OpsMetadataNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1OpsMetadataTooManyUpdatesException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1OutputSource = (output, context) => {
      return {
        OutputSourceId: (0, smithy_client_1.expectString)(output.OutputSourceId),
        OutputSourceType: (0, smithy_client_1.expectString)(output.OutputSourceType)
      };
    };
    var deserializeAws_json1_1Parameter = (output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN),
        DataType: (0, smithy_client_1.expectString)(output.DataType),
        LastModifiedDate: output.LastModifiedDate !== void 0 && output.LastModifiedDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedDate))) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        Selector: (0, smithy_client_1.expectString)(output.Selector),
        SourceResult: (0, smithy_client_1.expectString)(output.SourceResult),
        Type: (0, smithy_client_1.expectString)(output.Type),
        Value: (0, smithy_client_1.expectString)(output.Value),
        Version: (0, smithy_client_1.expectLong)(output.Version)
      };
    };
    var deserializeAws_json1_1ParameterAlreadyExists = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ParameterHistory = (output, context) => {
      return {
        AllowedPattern: (0, smithy_client_1.expectString)(output.AllowedPattern),
        DataType: (0, smithy_client_1.expectString)(output.DataType),
        Description: (0, smithy_client_1.expectString)(output.Description),
        KeyId: (0, smithy_client_1.expectString)(output.KeyId),
        Labels: output.Labels !== void 0 && output.Labels !== null ? deserializeAws_json1_1ParameterLabelList(output.Labels, context) : void 0,
        LastModifiedDate: output.LastModifiedDate !== void 0 && output.LastModifiedDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedDate))) : void 0,
        LastModifiedUser: (0, smithy_client_1.expectString)(output.LastModifiedUser),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Policies: output.Policies !== void 0 && output.Policies !== null ? deserializeAws_json1_1ParameterPolicyList(output.Policies, context) : void 0,
        Tier: (0, smithy_client_1.expectString)(output.Tier),
        Type: (0, smithy_client_1.expectString)(output.Type),
        Value: (0, smithy_client_1.expectString)(output.Value),
        Version: (0, smithy_client_1.expectLong)(output.Version)
      };
    };
    var deserializeAws_json1_1ParameterHistoryList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ParameterHistory(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ParameterInlinePolicy = (output, context) => {
      return {
        PolicyStatus: (0, smithy_client_1.expectString)(output.PolicyStatus),
        PolicyText: (0, smithy_client_1.expectString)(output.PolicyText),
        PolicyType: (0, smithy_client_1.expectString)(output.PolicyType)
      };
    };
    var deserializeAws_json1_1ParameterLabelList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1ParameterLimitExceeded = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ParameterList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Parameter(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ParameterMaxVersionLimitExceeded = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ParameterMetadata = (output, context) => {
      return {
        AllowedPattern: (0, smithy_client_1.expectString)(output.AllowedPattern),
        DataType: (0, smithy_client_1.expectString)(output.DataType),
        Description: (0, smithy_client_1.expectString)(output.Description),
        KeyId: (0, smithy_client_1.expectString)(output.KeyId),
        LastModifiedDate: output.LastModifiedDate !== void 0 && output.LastModifiedDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedDate))) : void 0,
        LastModifiedUser: (0, smithy_client_1.expectString)(output.LastModifiedUser),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Policies: output.Policies !== void 0 && output.Policies !== null ? deserializeAws_json1_1ParameterPolicyList(output.Policies, context) : void 0,
        Tier: (0, smithy_client_1.expectString)(output.Tier),
        Type: (0, smithy_client_1.expectString)(output.Type),
        Version: (0, smithy_client_1.expectLong)(output.Version)
      };
    };
    var deserializeAws_json1_1ParameterMetadataList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ParameterMetadata(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ParameterNameList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1ParameterNotFound = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ParameterPatternMismatchException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ParameterPolicyList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ParameterInlinePolicy(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1Parameters = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_1ParameterValueList(value, context)
        };
      }, {});
    };
    var deserializeAws_json1_1ParameterValueList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1ParameterVersionLabelLimitExceeded = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ParameterVersionNotFound = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1Patch = (output, context) => {
      return {
        AdvisoryIds: output.AdvisoryIds !== void 0 && output.AdvisoryIds !== null ? deserializeAws_json1_1PatchAdvisoryIdList(output.AdvisoryIds, context) : void 0,
        Arch: (0, smithy_client_1.expectString)(output.Arch),
        BugzillaIds: output.BugzillaIds !== void 0 && output.BugzillaIds !== null ? deserializeAws_json1_1PatchBugzillaIdList(output.BugzillaIds, context) : void 0,
        CVEIds: output.CVEIds !== void 0 && output.CVEIds !== null ? deserializeAws_json1_1PatchCVEIdList(output.CVEIds, context) : void 0,
        Classification: (0, smithy_client_1.expectString)(output.Classification),
        ContentUrl: (0, smithy_client_1.expectString)(output.ContentUrl),
        Description: (0, smithy_client_1.expectString)(output.Description),
        Epoch: (0, smithy_client_1.expectInt32)(output.Epoch),
        Id: (0, smithy_client_1.expectString)(output.Id),
        KbNumber: (0, smithy_client_1.expectString)(output.KbNumber),
        Language: (0, smithy_client_1.expectString)(output.Language),
        MsrcNumber: (0, smithy_client_1.expectString)(output.MsrcNumber),
        MsrcSeverity: (0, smithy_client_1.expectString)(output.MsrcSeverity),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Product: (0, smithy_client_1.expectString)(output.Product),
        ProductFamily: (0, smithy_client_1.expectString)(output.ProductFamily),
        Release: (0, smithy_client_1.expectString)(output.Release),
        ReleaseDate: output.ReleaseDate !== void 0 && output.ReleaseDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ReleaseDate))) : void 0,
        Repository: (0, smithy_client_1.expectString)(output.Repository),
        Severity: (0, smithy_client_1.expectString)(output.Severity),
        Title: (0, smithy_client_1.expectString)(output.Title),
        Vendor: (0, smithy_client_1.expectString)(output.Vendor),
        Version: (0, smithy_client_1.expectString)(output.Version)
      };
    };
    var deserializeAws_json1_1PatchAdvisoryIdList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchBaselineIdentity = (output, context) => {
      return {
        BaselineDescription: (0, smithy_client_1.expectString)(output.BaselineDescription),
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        BaselineName: (0, smithy_client_1.expectString)(output.BaselineName),
        DefaultBaseline: (0, smithy_client_1.expectBoolean)(output.DefaultBaseline),
        OperatingSystem: (0, smithy_client_1.expectString)(output.OperatingSystem)
      };
    };
    var deserializeAws_json1_1PatchBaselineIdentityList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1PatchBaselineIdentity(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchBugzillaIdList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchComplianceData = (output, context) => {
      return {
        CVEIds: (0, smithy_client_1.expectString)(output.CVEIds),
        Classification: (0, smithy_client_1.expectString)(output.Classification),
        InstalledTime: output.InstalledTime !== void 0 && output.InstalledTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.InstalledTime))) : void 0,
        KBId: (0, smithy_client_1.expectString)(output.KBId),
        Severity: (0, smithy_client_1.expectString)(output.Severity),
        State: (0, smithy_client_1.expectString)(output.State),
        Title: (0, smithy_client_1.expectString)(output.Title)
      };
    };
    var deserializeAws_json1_1PatchComplianceDataList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1PatchComplianceData(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchCVEIdList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchFilter = (output, context) => {
      return {
        Key: (0, smithy_client_1.expectString)(output.Key),
        Values: output.Values !== void 0 && output.Values !== null ? deserializeAws_json1_1PatchFilterValueList(output.Values, context) : void 0
      };
    };
    var deserializeAws_json1_1PatchFilterGroup = (output, context) => {
      return {
        PatchFilters: output.PatchFilters !== void 0 && output.PatchFilters !== null ? deserializeAws_json1_1PatchFilterList(output.PatchFilters, context) : void 0
      };
    };
    var deserializeAws_json1_1PatchFilterList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1PatchFilter(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchFilterValueList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchGroupList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchGroupPatchBaselineMapping = (output, context) => {
      return {
        BaselineIdentity: output.BaselineIdentity !== void 0 && output.BaselineIdentity !== null ? deserializeAws_json1_1PatchBaselineIdentity(output.BaselineIdentity, context) : void 0,
        PatchGroup: (0, smithy_client_1.expectString)(output.PatchGroup)
      };
    };
    var deserializeAws_json1_1PatchGroupPatchBaselineMappingList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1PatchGroupPatchBaselineMapping(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchIdList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Patch(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchPropertiesList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1PatchPropertyEntry(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchPropertyEntry = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: (0, smithy_client_1.expectString)(value)
        };
      }, {});
    };
    var deserializeAws_json1_1PatchRule = (output, context) => {
      return {
        ApproveAfterDays: (0, smithy_client_1.expectInt32)(output.ApproveAfterDays),
        ApproveUntilDate: (0, smithy_client_1.expectString)(output.ApproveUntilDate),
        ComplianceLevel: (0, smithy_client_1.expectString)(output.ComplianceLevel),
        EnableNonSecurity: (0, smithy_client_1.expectBoolean)(output.EnableNonSecurity),
        PatchFilterGroup: output.PatchFilterGroup !== void 0 && output.PatchFilterGroup !== null ? deserializeAws_json1_1PatchFilterGroup(output.PatchFilterGroup, context) : void 0
      };
    };
    var deserializeAws_json1_1PatchRuleGroup = (output, context) => {
      return {
        PatchRules: output.PatchRules !== void 0 && output.PatchRules !== null ? deserializeAws_json1_1PatchRuleList(output.PatchRules, context) : void 0
      };
    };
    var deserializeAws_json1_1PatchRuleList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1PatchRule(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchSource = (output, context) => {
      return {
        Configuration: (0, smithy_client_1.expectString)(output.Configuration),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Products: output.Products !== void 0 && output.Products !== null ? deserializeAws_json1_1PatchSourceProductList(output.Products, context) : void 0
      };
    };
    var deserializeAws_json1_1PatchSourceList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1PatchSource(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchSourceProductList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchStatus = (output, context) => {
      return {
        ApprovalDate: output.ApprovalDate !== void 0 && output.ApprovalDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ApprovalDate))) : void 0,
        ComplianceLevel: (0, smithy_client_1.expectString)(output.ComplianceLevel),
        DeploymentStatus: (0, smithy_client_1.expectString)(output.DeploymentStatus)
      };
    };
    var deserializeAws_json1_1PlatformTypeList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1PoliciesLimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ProgressCounters = (output, context) => {
      return {
        CancelledSteps: (0, smithy_client_1.expectInt32)(output.CancelledSteps),
        FailedSteps: (0, smithy_client_1.expectInt32)(output.FailedSteps),
        SuccessSteps: (0, smithy_client_1.expectInt32)(output.SuccessSteps),
        TimedOutSteps: (0, smithy_client_1.expectInt32)(output.TimedOutSteps),
        TotalSteps: (0, smithy_client_1.expectInt32)(output.TotalSteps)
      };
    };
    var deserializeAws_json1_1PutComplianceItemsResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1PutInventoryResult = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1PutParameterResult = (output, context) => {
      return {
        Tier: (0, smithy_client_1.expectString)(output.Tier),
        Version: (0, smithy_client_1.expectLong)(output.Version)
      };
    };
    var deserializeAws_json1_1Regions = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1RegisterDefaultPatchBaselineResult = (output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId)
      };
    };
    var deserializeAws_json1_1RegisterPatchBaselineForPatchGroupResult = (output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        PatchGroup: (0, smithy_client_1.expectString)(output.PatchGroup)
      };
    };
    var deserializeAws_json1_1RegisterTargetWithMaintenanceWindowResult = (output, context) => {
      return {
        WindowTargetId: (0, smithy_client_1.expectString)(output.WindowTargetId)
      };
    };
    var deserializeAws_json1_1RegisterTaskWithMaintenanceWindowResult = (output, context) => {
      return {
        WindowTaskId: (0, smithy_client_1.expectString)(output.WindowTaskId)
      };
    };
    var deserializeAws_json1_1RelatedOpsItem = (output, context) => {
      return {
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId)
      };
    };
    var deserializeAws_json1_1RelatedOpsItems = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1RelatedOpsItem(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1RemoveTagsFromResourceResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1ResetServiceSettingResult = (output, context) => {
      return {
        ServiceSetting: output.ServiceSetting !== void 0 && output.ServiceSetting !== null ? deserializeAws_json1_1ServiceSetting(output.ServiceSetting, context) : void 0
      };
    };
    var deserializeAws_json1_1ResolvedTargets = (output, context) => {
      return {
        ParameterValues: output.ParameterValues !== void 0 && output.ParameterValues !== null ? deserializeAws_json1_1TargetParameterList(output.ParameterValues, context) : void 0,
        Truncated: (0, smithy_client_1.expectBoolean)(output.Truncated)
      };
    };
    var deserializeAws_json1_1ResourceComplianceSummaryItem = (output, context) => {
      return {
        ComplianceType: (0, smithy_client_1.expectString)(output.ComplianceType),
        CompliantSummary: output.CompliantSummary !== void 0 && output.CompliantSummary !== null ? deserializeAws_json1_1CompliantSummary(output.CompliantSummary, context) : void 0,
        ExecutionSummary: output.ExecutionSummary !== void 0 && output.ExecutionSummary !== null ? deserializeAws_json1_1ComplianceExecutionSummary(output.ExecutionSummary, context) : void 0,
        NonCompliantSummary: output.NonCompliantSummary !== void 0 && output.NonCompliantSummary !== null ? deserializeAws_json1_1NonCompliantSummary(output.NonCompliantSummary, context) : void 0,
        OverallSeverity: (0, smithy_client_1.expectString)(output.OverallSeverity),
        ResourceId: (0, smithy_client_1.expectString)(output.ResourceId),
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
        Status: (0, smithy_client_1.expectString)(output.Status)
      };
    };
    var deserializeAws_json1_1ResourceComplianceSummaryItemList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ResourceComplianceSummaryItem(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ResourceDataSyncAlreadyExistsException = (output, context) => {
      return {
        SyncName: (0, smithy_client_1.expectString)(output.SyncName)
      };
    };
    var deserializeAws_json1_1ResourceDataSyncAwsOrganizationsSource = (output, context) => {
      return {
        OrganizationSourceType: (0, smithy_client_1.expectString)(output.OrganizationSourceType),
        OrganizationalUnits: output.OrganizationalUnits !== void 0 && output.OrganizationalUnits !== null ? deserializeAws_json1_1ResourceDataSyncOrganizationalUnitList(output.OrganizationalUnits, context) : void 0
      };
    };
    var deserializeAws_json1_1ResourceDataSyncConflictException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1ResourceDataSyncCountExceededException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1ResourceDataSyncDestinationDataSharing = (output, context) => {
      return {
        DestinationDataSharingType: (0, smithy_client_1.expectString)(output.DestinationDataSharingType)
      };
    };
    var deserializeAws_json1_1ResourceDataSyncInvalidConfigurationException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1ResourceDataSyncItem = (output, context) => {
      return {
        LastStatus: (0, smithy_client_1.expectString)(output.LastStatus),
        LastSuccessfulSyncTime: output.LastSuccessfulSyncTime !== void 0 && output.LastSuccessfulSyncTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastSuccessfulSyncTime))) : void 0,
        LastSyncStatusMessage: (0, smithy_client_1.expectString)(output.LastSyncStatusMessage),
        LastSyncTime: output.LastSyncTime !== void 0 && output.LastSyncTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastSyncTime))) : void 0,
        S3Destination: output.S3Destination !== void 0 && output.S3Destination !== null ? deserializeAws_json1_1ResourceDataSyncS3Destination(output.S3Destination, context) : void 0,
        SyncCreatedTime: output.SyncCreatedTime !== void 0 && output.SyncCreatedTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.SyncCreatedTime))) : void 0,
        SyncLastModifiedTime: output.SyncLastModifiedTime !== void 0 && output.SyncLastModifiedTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.SyncLastModifiedTime))) : void 0,
        SyncName: (0, smithy_client_1.expectString)(output.SyncName),
        SyncSource: output.SyncSource !== void 0 && output.SyncSource !== null ? deserializeAws_json1_1ResourceDataSyncSourceWithState(output.SyncSource, context) : void 0,
        SyncType: (0, smithy_client_1.expectString)(output.SyncType)
      };
    };
    var deserializeAws_json1_1ResourceDataSyncItemList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ResourceDataSyncItem(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ResourceDataSyncNotFoundException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        SyncName: (0, smithy_client_1.expectString)(output.SyncName),
        SyncType: (0, smithy_client_1.expectString)(output.SyncType)
      };
    };
    var deserializeAws_json1_1ResourceDataSyncOrganizationalUnit = (output, context) => {
      return {
        OrganizationalUnitId: (0, smithy_client_1.expectString)(output.OrganizationalUnitId)
      };
    };
    var deserializeAws_json1_1ResourceDataSyncOrganizationalUnitList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ResourceDataSyncOrganizationalUnit(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ResourceDataSyncS3Destination = (output, context) => {
      return {
        AWSKMSKeyARN: (0, smithy_client_1.expectString)(output.AWSKMSKeyARN),
        BucketName: (0, smithy_client_1.expectString)(output.BucketName),
        DestinationDataSharing: output.DestinationDataSharing !== void 0 && output.DestinationDataSharing !== null ? deserializeAws_json1_1ResourceDataSyncDestinationDataSharing(output.DestinationDataSharing, context) : void 0,
        Prefix: (0, smithy_client_1.expectString)(output.Prefix),
        Region: (0, smithy_client_1.expectString)(output.Region),
        SyncFormat: (0, smithy_client_1.expectString)(output.SyncFormat)
      };
    };
    var deserializeAws_json1_1ResourceDataSyncSourceRegionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1ResourceDataSyncSourceWithState = (output, context) => {
      return {
        AwsOrganizationsSource: output.AwsOrganizationsSource !== void 0 && output.AwsOrganizationsSource !== null ? deserializeAws_json1_1ResourceDataSyncAwsOrganizationsSource(output.AwsOrganizationsSource, context) : void 0,
        EnableAllOpsDataSources: (0, smithy_client_1.expectBoolean)(output.EnableAllOpsDataSources),
        IncludeFutureRegions: (0, smithy_client_1.expectBoolean)(output.IncludeFutureRegions),
        SourceRegions: output.SourceRegions !== void 0 && output.SourceRegions !== null ? deserializeAws_json1_1ResourceDataSyncSourceRegionList(output.SourceRegions, context) : void 0,
        SourceType: (0, smithy_client_1.expectString)(output.SourceType),
        State: (0, smithy_client_1.expectString)(output.State)
      };
    };
    var deserializeAws_json1_1ResourceInUseException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1ResourceLimitExceededException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1ResumeSessionResponse = (output, context) => {
      return {
        SessionId: (0, smithy_client_1.expectString)(output.SessionId),
        StreamUrl: (0, smithy_client_1.expectString)(output.StreamUrl),
        TokenValue: (0, smithy_client_1.expectString)(output.TokenValue)
      };
    };
    var deserializeAws_json1_1ReviewInformation = (output, context) => {
      return {
        ReviewedTime: output.ReviewedTime !== void 0 && output.ReviewedTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ReviewedTime))) : void 0,
        Reviewer: (0, smithy_client_1.expectString)(output.Reviewer),
        Status: (0, smithy_client_1.expectString)(output.Status)
      };
    };
    var deserializeAws_json1_1ReviewInformationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ReviewInformation(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1Runbook = (output, context) => {
      return {
        DocumentName: (0, smithy_client_1.expectString)(output.DocumentName),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Parameters: output.Parameters !== void 0 && output.Parameters !== null ? deserializeAws_json1_1AutomationParameterMap(output.Parameters, context) : void 0,
        TargetLocations: output.TargetLocations !== void 0 && output.TargetLocations !== null ? deserializeAws_json1_1TargetLocations(output.TargetLocations, context) : void 0,
        TargetMaps: output.TargetMaps !== void 0 && output.TargetMaps !== null ? deserializeAws_json1_1TargetMaps(output.TargetMaps, context) : void 0,
        TargetParameterName: (0, smithy_client_1.expectString)(output.TargetParameterName),
        Targets: output.Targets !== void 0 && output.Targets !== null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0
      };
    };
    var deserializeAws_json1_1Runbooks = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Runbook(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1S3OutputLocation = (output, context) => {
      return {
        OutputS3BucketName: (0, smithy_client_1.expectString)(output.OutputS3BucketName),
        OutputS3KeyPrefix: (0, smithy_client_1.expectString)(output.OutputS3KeyPrefix),
        OutputS3Region: (0, smithy_client_1.expectString)(output.OutputS3Region)
      };
    };
    var deserializeAws_json1_1S3OutputUrl = (output, context) => {
      return {
        OutputUrl: (0, smithy_client_1.expectString)(output.OutputUrl)
      };
    };
    var deserializeAws_json1_1ScheduledWindowExecution = (output, context) => {
      return {
        ExecutionTime: (0, smithy_client_1.expectString)(output.ExecutionTime),
        Name: (0, smithy_client_1.expectString)(output.Name),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    };
    var deserializeAws_json1_1ScheduledWindowExecutionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ScheduledWindowExecution(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1SendAutomationSignalResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1SendCommandResult = (output, context) => {
      return {
        Command: output.Command !== void 0 && output.Command !== null ? deserializeAws_json1_1Command(output.Command, context) : void 0
      };
    };
    var deserializeAws_json1_1ServiceSetting = (output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN),
        LastModifiedDate: output.LastModifiedDate !== void 0 && output.LastModifiedDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedDate))) : void 0,
        LastModifiedUser: (0, smithy_client_1.expectString)(output.LastModifiedUser),
        SettingId: (0, smithy_client_1.expectString)(output.SettingId),
        SettingValue: (0, smithy_client_1.expectString)(output.SettingValue),
        Status: (0, smithy_client_1.expectString)(output.Status)
      };
    };
    var deserializeAws_json1_1ServiceSettingNotFound = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1Session = (output, context) => {
      return {
        Details: (0, smithy_client_1.expectString)(output.Details),
        DocumentName: (0, smithy_client_1.expectString)(output.DocumentName),
        EndDate: output.EndDate !== void 0 && output.EndDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndDate))) : void 0,
        MaxSessionDuration: (0, smithy_client_1.expectString)(output.MaxSessionDuration),
        OutputUrl: output.OutputUrl !== void 0 && output.OutputUrl !== null ? deserializeAws_json1_1SessionManagerOutputUrl(output.OutputUrl, context) : void 0,
        Owner: (0, smithy_client_1.expectString)(output.Owner),
        Reason: (0, smithy_client_1.expectString)(output.Reason),
        SessionId: (0, smithy_client_1.expectString)(output.SessionId),
        StartDate: output.StartDate !== void 0 && output.StartDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartDate))) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status),
        Target: (0, smithy_client_1.expectString)(output.Target)
      };
    };
    var deserializeAws_json1_1SessionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Session(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1SessionManagerOutputUrl = (output, context) => {
      return {
        CloudWatchOutputUrl: (0, smithy_client_1.expectString)(output.CloudWatchOutputUrl),
        S3OutputUrl: (0, smithy_client_1.expectString)(output.S3OutputUrl)
      };
    };
    var deserializeAws_json1_1SeveritySummary = (output, context) => {
      return {
        CriticalCount: (0, smithy_client_1.expectInt32)(output.CriticalCount),
        HighCount: (0, smithy_client_1.expectInt32)(output.HighCount),
        InformationalCount: (0, smithy_client_1.expectInt32)(output.InformationalCount),
        LowCount: (0, smithy_client_1.expectInt32)(output.LowCount),
        MediumCount: (0, smithy_client_1.expectInt32)(output.MediumCount),
        UnspecifiedCount: (0, smithy_client_1.expectInt32)(output.UnspecifiedCount)
      };
    };
    var deserializeAws_json1_1StartAssociationsOnceResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1StartAutomationExecutionResult = (output, context) => {
      return {
        AutomationExecutionId: (0, smithy_client_1.expectString)(output.AutomationExecutionId)
      };
    };
    var deserializeAws_json1_1StartChangeRequestExecutionResult = (output, context) => {
      return {
        AutomationExecutionId: (0, smithy_client_1.expectString)(output.AutomationExecutionId)
      };
    };
    var deserializeAws_json1_1StartSessionResponse = (output, context) => {
      return {
        SessionId: (0, smithy_client_1.expectString)(output.SessionId),
        StreamUrl: (0, smithy_client_1.expectString)(output.StreamUrl),
        TokenValue: (0, smithy_client_1.expectString)(output.TokenValue)
      };
    };
    var deserializeAws_json1_1StatusUnchanged = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1StepExecution = (output, context) => {
      return {
        Action: (0, smithy_client_1.expectString)(output.Action),
        ExecutionEndTime: output.ExecutionEndTime !== void 0 && output.ExecutionEndTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionEndTime))) : void 0,
        ExecutionStartTime: output.ExecutionStartTime !== void 0 && output.ExecutionStartTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionStartTime))) : void 0,
        FailureDetails: output.FailureDetails !== void 0 && output.FailureDetails !== null ? deserializeAws_json1_1FailureDetails(output.FailureDetails, context) : void 0,
        FailureMessage: (0, smithy_client_1.expectString)(output.FailureMessage),
        Inputs: output.Inputs !== void 0 && output.Inputs !== null ? deserializeAws_json1_1NormalStringMap(output.Inputs, context) : void 0,
        IsCritical: (0, smithy_client_1.expectBoolean)(output.IsCritical),
        IsEnd: (0, smithy_client_1.expectBoolean)(output.IsEnd),
        MaxAttempts: (0, smithy_client_1.expectInt32)(output.MaxAttempts),
        NextStep: (0, smithy_client_1.expectString)(output.NextStep),
        OnFailure: (0, smithy_client_1.expectString)(output.OnFailure),
        Outputs: output.Outputs !== void 0 && output.Outputs !== null ? deserializeAws_json1_1AutomationParameterMap(output.Outputs, context) : void 0,
        OverriddenParameters: output.OverriddenParameters !== void 0 && output.OverriddenParameters !== null ? deserializeAws_json1_1AutomationParameterMap(output.OverriddenParameters, context) : void 0,
        Response: (0, smithy_client_1.expectString)(output.Response),
        ResponseCode: (0, smithy_client_1.expectString)(output.ResponseCode),
        StepExecutionId: (0, smithy_client_1.expectString)(output.StepExecutionId),
        StepName: (0, smithy_client_1.expectString)(output.StepName),
        StepStatus: (0, smithy_client_1.expectString)(output.StepStatus),
        TargetLocation: output.TargetLocation !== void 0 && output.TargetLocation !== null ? deserializeAws_json1_1TargetLocation(output.TargetLocation, context) : void 0,
        Targets: output.Targets !== void 0 && output.Targets !== null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        TimeoutSeconds: (0, smithy_client_1.expectLong)(output.TimeoutSeconds),
        ValidNextSteps: output.ValidNextSteps !== void 0 && output.ValidNextSteps !== null ? deserializeAws_json1_1ValidNextStepList(output.ValidNextSteps, context) : void 0
      };
    };
    var deserializeAws_json1_1StepExecutionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1StepExecution(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1StopAutomationExecutionResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1SubTypeCountLimitExceededException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1Tag = (output, context) => {
      return {
        Key: (0, smithy_client_1.expectString)(output.Key),
        Value: (0, smithy_client_1.expectString)(output.Value)
      };
    };
    var deserializeAws_json1_1TagList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Tag(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1Target = (output, context) => {
      return {
        Key: (0, smithy_client_1.expectString)(output.Key),
        Values: output.Values !== void 0 && output.Values !== null ? deserializeAws_json1_1TargetValues(output.Values, context) : void 0
      };
    };
    var deserializeAws_json1_1TargetInUseException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1TargetLocation = (output, context) => {
      return {
        Accounts: output.Accounts !== void 0 && output.Accounts !== null ? deserializeAws_json1_1Accounts(output.Accounts, context) : void 0,
        ExecutionRoleName: (0, smithy_client_1.expectString)(output.ExecutionRoleName),
        Regions: output.Regions !== void 0 && output.Regions !== null ? deserializeAws_json1_1Regions(output.Regions, context) : void 0,
        TargetLocationMaxConcurrency: (0, smithy_client_1.expectString)(output.TargetLocationMaxConcurrency),
        TargetLocationMaxErrors: (0, smithy_client_1.expectString)(output.TargetLocationMaxErrors)
      };
    };
    var deserializeAws_json1_1TargetLocations = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1TargetLocation(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1TargetMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_1TargetMapValueList(value, context)
        };
      }, {});
    };
    var deserializeAws_json1_1TargetMaps = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1TargetMap(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1TargetMapValueList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1TargetNotConnected = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1TargetParameterList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1Targets = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Target(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1TargetValues = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1TerminateSessionResponse = (output, context) => {
      return {
        SessionId: (0, smithy_client_1.expectString)(output.SessionId)
      };
    };
    var deserializeAws_json1_1TooManyTagsError = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1TooManyUpdates = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1TotalSizeLimitExceededException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1UnlabelParameterVersionResult = (output, context) => {
      return {
        InvalidLabels: output.InvalidLabels !== void 0 && output.InvalidLabels !== null ? deserializeAws_json1_1ParameterLabelList(output.InvalidLabels, context) : void 0,
        RemovedLabels: output.RemovedLabels !== void 0 && output.RemovedLabels !== null ? deserializeAws_json1_1ParameterLabelList(output.RemovedLabels, context) : void 0
      };
    };
    var deserializeAws_json1_1UnsupportedCalendarException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1UnsupportedFeatureRequiredException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1UnsupportedInventoryItemContextException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    };
    var deserializeAws_json1_1UnsupportedInventorySchemaVersionException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1UnsupportedOperatingSystem = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1UnsupportedParameterType = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1UnsupportedPlatformType = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1UpdateAssociationResult = (output, context) => {
      return {
        AssociationDescription: output.AssociationDescription !== void 0 && output.AssociationDescription !== null ? deserializeAws_json1_1AssociationDescription(output.AssociationDescription, context) : void 0
      };
    };
    var deserializeAws_json1_1UpdateAssociationStatusResult = (output, context) => {
      return {
        AssociationDescription: output.AssociationDescription !== void 0 && output.AssociationDescription !== null ? deserializeAws_json1_1AssociationDescription(output.AssociationDescription, context) : void 0
      };
    };
    var deserializeAws_json1_1UpdateDocumentDefaultVersionResult = (output, context) => {
      return {
        Description: output.Description !== void 0 && output.Description !== null ? deserializeAws_json1_1DocumentDefaultVersionDescription(output.Description, context) : void 0
      };
    };
    var deserializeAws_json1_1UpdateDocumentMetadataResponse = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1UpdateDocumentResult = (output, context) => {
      return {
        DocumentDescription: output.DocumentDescription !== void 0 && output.DocumentDescription !== null ? deserializeAws_json1_1DocumentDescription(output.DocumentDescription, context) : void 0
      };
    };
    var deserializeAws_json1_1UpdateMaintenanceWindowResult = (output, context) => {
      return {
        AllowUnassociatedTargets: (0, smithy_client_1.expectBoolean)(output.AllowUnassociatedTargets),
        Cutoff: (0, smithy_client_1.expectInt32)(output.Cutoff),
        Description: (0, smithy_client_1.expectString)(output.Description),
        Duration: (0, smithy_client_1.expectInt32)(output.Duration),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled),
        EndDate: (0, smithy_client_1.expectString)(output.EndDate),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Schedule: (0, smithy_client_1.expectString)(output.Schedule),
        ScheduleOffset: (0, smithy_client_1.expectInt32)(output.ScheduleOffset),
        ScheduleTimezone: (0, smithy_client_1.expectString)(output.ScheduleTimezone),
        StartDate: (0, smithy_client_1.expectString)(output.StartDate),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    };
    var deserializeAws_json1_1UpdateMaintenanceWindowTargetResult = (output, context) => {
      return {
        Description: (0, smithy_client_1.expectString)(output.Description),
        Name: (0, smithy_client_1.expectString)(output.Name),
        OwnerInformation: (0, smithy_client_1.expectString)(output.OwnerInformation),
        Targets: output.Targets !== void 0 && output.Targets !== null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        WindowId: (0, smithy_client_1.expectString)(output.WindowId),
        WindowTargetId: (0, smithy_client_1.expectString)(output.WindowTargetId)
      };
    };
    var deserializeAws_json1_1UpdateMaintenanceWindowTaskResult = (output, context) => {
      return {
        CutoffBehavior: (0, smithy_client_1.expectString)(output.CutoffBehavior),
        Description: (0, smithy_client_1.expectString)(output.Description),
        LoggingInfo: output.LoggingInfo !== void 0 && output.LoggingInfo !== null ? deserializeAws_json1_1LoggingInfo(output.LoggingInfo, context) : void 0,
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Priority: (0, smithy_client_1.expectInt32)(output.Priority),
        ServiceRoleArn: (0, smithy_client_1.expectString)(output.ServiceRoleArn),
        Targets: output.Targets !== void 0 && output.Targets !== null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        TaskArn: (0, smithy_client_1.expectString)(output.TaskArn),
        TaskInvocationParameters: output.TaskInvocationParameters !== void 0 && output.TaskInvocationParameters !== null ? deserializeAws_json1_1MaintenanceWindowTaskInvocationParameters(output.TaskInvocationParameters, context) : void 0,
        TaskParameters: output.TaskParameters !== void 0 && output.TaskParameters !== null ? deserializeAws_json1_1MaintenanceWindowTaskParameters(output.TaskParameters, context) : void 0,
        WindowId: (0, smithy_client_1.expectString)(output.WindowId),
        WindowTaskId: (0, smithy_client_1.expectString)(output.WindowTaskId)
      };
    };
    var deserializeAws_json1_1UpdateManagedInstanceRoleResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1UpdateOpsItemResponse = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1UpdateOpsMetadataResult = (output, context) => {
      return {
        OpsMetadataArn: (0, smithy_client_1.expectString)(output.OpsMetadataArn)
      };
    };
    var deserializeAws_json1_1UpdatePatchBaselineResult = (output, context) => {
      return {
        ApprovalRules: output.ApprovalRules !== void 0 && output.ApprovalRules !== null ? deserializeAws_json1_1PatchRuleGroup(output.ApprovalRules, context) : void 0,
        ApprovedPatches: output.ApprovedPatches !== void 0 && output.ApprovedPatches !== null ? deserializeAws_json1_1PatchIdList(output.ApprovedPatches, context) : void 0,
        ApprovedPatchesComplianceLevel: (0, smithy_client_1.expectString)(output.ApprovedPatchesComplianceLevel),
        ApprovedPatchesEnableNonSecurity: (0, smithy_client_1.expectBoolean)(output.ApprovedPatchesEnableNonSecurity),
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        CreatedDate: output.CreatedDate !== void 0 && output.CreatedDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        Description: (0, smithy_client_1.expectString)(output.Description),
        GlobalFilters: output.GlobalFilters !== void 0 && output.GlobalFilters !== null ? deserializeAws_json1_1PatchFilterGroup(output.GlobalFilters, context) : void 0,
        ModifiedDate: output.ModifiedDate !== void 0 && output.ModifiedDate !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ModifiedDate))) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        OperatingSystem: (0, smithy_client_1.expectString)(output.OperatingSystem),
        RejectedPatches: output.RejectedPatches !== void 0 && output.RejectedPatches !== null ? deserializeAws_json1_1PatchIdList(output.RejectedPatches, context) : void 0,
        RejectedPatchesAction: (0, smithy_client_1.expectString)(output.RejectedPatchesAction),
        Sources: output.Sources !== void 0 && output.Sources !== null ? deserializeAws_json1_1PatchSourceList(output.Sources, context) : void 0
      };
    };
    var deserializeAws_json1_1UpdateResourceDataSyncResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1UpdateServiceSettingResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1ValidNextStepList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeMetadata = (output) => {
      var _a;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/AddTagsToResourceCommand.js
var require_AddTagsToResourceCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/AddTagsToResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AddTagsToResourceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var AddTagsToResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "AddTagsToResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AddTagsToResourceRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AddTagsToResourceResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1AddTagsToResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1AddTagsToResourceCommand)(output, context);
      }
    };
    exports.AddTagsToResourceCommand = AddTagsToResourceCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/AssociateOpsItemRelatedItemCommand.js
var require_AssociateOpsItemRelatedItemCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/AssociateOpsItemRelatedItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssociateOpsItemRelatedItemCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var AssociateOpsItemRelatedItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "AssociateOpsItemRelatedItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssociateOpsItemRelatedItemRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssociateOpsItemRelatedItemResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1AssociateOpsItemRelatedItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1AssociateOpsItemRelatedItemCommand)(output, context);
      }
    };
    exports.AssociateOpsItemRelatedItemCommand = AssociateOpsItemRelatedItemCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CancelCommandCommand.js
var require_CancelCommandCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CancelCommandCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CancelCommandCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var CancelCommandCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CancelCommandCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CancelCommandRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CancelCommandResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CancelCommandCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CancelCommandCommand)(output, context);
      }
    };
    exports.CancelCommandCommand = CancelCommandCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CancelMaintenanceWindowExecutionCommand.js
var require_CancelMaintenanceWindowExecutionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CancelMaintenanceWindowExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CancelMaintenanceWindowExecutionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var CancelMaintenanceWindowExecutionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CancelMaintenanceWindowExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CancelMaintenanceWindowExecutionRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CancelMaintenanceWindowExecutionResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CancelMaintenanceWindowExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CancelMaintenanceWindowExecutionCommand)(output, context);
      }
    };
    exports.CancelMaintenanceWindowExecutionCommand = CancelMaintenanceWindowExecutionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateActivationCommand.js
var require_CreateActivationCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateActivationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateActivationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var CreateActivationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateActivationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateActivationRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateActivationResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateActivationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateActivationCommand)(output, context);
      }
    };
    exports.CreateActivationCommand = CreateActivationCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateAssociationBatchCommand.js
var require_CreateAssociationBatchCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateAssociationBatchCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateAssociationBatchCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var CreateAssociationBatchCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateAssociationBatchCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateAssociationBatchRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateAssociationBatchResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateAssociationBatchCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateAssociationBatchCommand)(output, context);
      }
    };
    exports.CreateAssociationBatchCommand = CreateAssociationBatchCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateAssociationCommand.js
var require_CreateAssociationCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateAssociationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateAssociationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var CreateAssociationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateAssociationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateAssociationRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateAssociationResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateAssociationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateAssociationCommand)(output, context);
      }
    };
    exports.CreateAssociationCommand = CreateAssociationCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateDocumentCommand.js
var require_CreateDocumentCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateDocumentCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateDocumentCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var CreateDocumentCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateDocumentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateDocumentRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateDocumentResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateDocumentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateDocumentCommand)(output, context);
      }
    };
    exports.CreateDocumentCommand = CreateDocumentCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateMaintenanceWindowCommand.js
var require_CreateMaintenanceWindowCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateMaintenanceWindowCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var CreateMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateMaintenanceWindowRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateMaintenanceWindowResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateMaintenanceWindowCommand)(output, context);
      }
    };
    exports.CreateMaintenanceWindowCommand = CreateMaintenanceWindowCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateOpsItemCommand.js
var require_CreateOpsItemCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateOpsItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateOpsItemCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var CreateOpsItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateOpsItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateOpsItemRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateOpsItemResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateOpsItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateOpsItemCommand)(output, context);
      }
    };
    exports.CreateOpsItemCommand = CreateOpsItemCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateOpsMetadataCommand.js
var require_CreateOpsMetadataCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateOpsMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateOpsMetadataCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var CreateOpsMetadataCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateOpsMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateOpsMetadataRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateOpsMetadataResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateOpsMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateOpsMetadataCommand)(output, context);
      }
    };
    exports.CreateOpsMetadataCommand = CreateOpsMetadataCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreatePatchBaselineCommand.js
var require_CreatePatchBaselineCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreatePatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreatePatchBaselineCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var CreatePatchBaselineCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreatePatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreatePatchBaselineRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreatePatchBaselineResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreatePatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreatePatchBaselineCommand)(output, context);
      }
    };
    exports.CreatePatchBaselineCommand = CreatePatchBaselineCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateResourceDataSyncCommand.js
var require_CreateResourceDataSyncCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateResourceDataSyncCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateResourceDataSyncCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var CreateResourceDataSyncCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateResourceDataSyncCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateResourceDataSyncRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateResourceDataSyncResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateResourceDataSyncCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateResourceDataSyncCommand)(output, context);
      }
    };
    exports.CreateResourceDataSyncCommand = CreateResourceDataSyncCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteActivationCommand.js
var require_DeleteActivationCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteActivationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteActivationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeleteActivationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteActivationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteActivationRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteActivationResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteActivationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteActivationCommand)(output, context);
      }
    };
    exports.DeleteActivationCommand = DeleteActivationCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteAssociationCommand.js
var require_DeleteAssociationCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteAssociationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteAssociationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeleteAssociationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteAssociationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteAssociationRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteAssociationResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteAssociationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteAssociationCommand)(output, context);
      }
    };
    exports.DeleteAssociationCommand = DeleteAssociationCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteDocumentCommand.js
var require_DeleteDocumentCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteDocumentCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteDocumentCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeleteDocumentCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteDocumentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteDocumentRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteDocumentResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteDocumentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteDocumentCommand)(output, context);
      }
    };
    exports.DeleteDocumentCommand = DeleteDocumentCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteInventoryCommand.js
var require_DeleteInventoryCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteInventoryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteInventoryCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeleteInventoryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteInventoryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteInventoryRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteInventoryResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteInventoryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteInventoryCommand)(output, context);
      }
    };
    exports.DeleteInventoryCommand = DeleteInventoryCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteMaintenanceWindowCommand.js
var require_DeleteMaintenanceWindowCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteMaintenanceWindowCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeleteMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteMaintenanceWindowRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteMaintenanceWindowResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteMaintenanceWindowCommand)(output, context);
      }
    };
    exports.DeleteMaintenanceWindowCommand = DeleteMaintenanceWindowCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteOpsMetadataCommand.js
var require_DeleteOpsMetadataCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteOpsMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteOpsMetadataCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeleteOpsMetadataCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteOpsMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteOpsMetadataRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteOpsMetadataResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteOpsMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteOpsMetadataCommand)(output, context);
      }
    };
    exports.DeleteOpsMetadataCommand = DeleteOpsMetadataCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteParameterCommand.js
var require_DeleteParameterCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteParameterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteParameterCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeleteParameterCommand2 = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteParameterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteParameterRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteParameterResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteParameterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteParameterCommand)(output, context);
      }
    };
    exports.DeleteParameterCommand = DeleteParameterCommand2;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteParametersCommand.js
var require_DeleteParametersCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteParametersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteParametersCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeleteParametersCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteParametersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteParametersRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteParametersResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteParametersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteParametersCommand)(output, context);
      }
    };
    exports.DeleteParametersCommand = DeleteParametersCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeletePatchBaselineCommand.js
var require_DeletePatchBaselineCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeletePatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeletePatchBaselineCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeletePatchBaselineCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeletePatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeletePatchBaselineRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeletePatchBaselineResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeletePatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeletePatchBaselineCommand)(output, context);
      }
    };
    exports.DeletePatchBaselineCommand = DeletePatchBaselineCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteResourceDataSyncCommand.js
var require_DeleteResourceDataSyncCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteResourceDataSyncCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteResourceDataSyncCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeleteResourceDataSyncCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteResourceDataSyncCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteResourceDataSyncRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteResourceDataSyncResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteResourceDataSyncCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteResourceDataSyncCommand)(output, context);
      }
    };
    exports.DeleteResourceDataSyncCommand = DeleteResourceDataSyncCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterManagedInstanceCommand.js
var require_DeregisterManagedInstanceCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterManagedInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeregisterManagedInstanceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeregisterManagedInstanceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeregisterManagedInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeregisterManagedInstanceRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeregisterManagedInstanceResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeregisterManagedInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeregisterManagedInstanceCommand)(output, context);
      }
    };
    exports.DeregisterManagedInstanceCommand = DeregisterManagedInstanceCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterPatchBaselineForPatchGroupCommand.js
var require_DeregisterPatchBaselineForPatchGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterPatchBaselineForPatchGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeregisterPatchBaselineForPatchGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeregisterPatchBaselineForPatchGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeregisterPatchBaselineForPatchGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeregisterPatchBaselineForPatchGroupRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeregisterPatchBaselineForPatchGroupResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand)(output, context);
      }
    };
    exports.DeregisterPatchBaselineForPatchGroupCommand = DeregisterPatchBaselineForPatchGroupCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterTargetFromMaintenanceWindowCommand.js
var require_DeregisterTargetFromMaintenanceWindowCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterTargetFromMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeregisterTargetFromMaintenanceWindowCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeregisterTargetFromMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeregisterTargetFromMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeregisterTargetFromMaintenanceWindowRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeregisterTargetFromMaintenanceWindowResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand)(output, context);
      }
    };
    exports.DeregisterTargetFromMaintenanceWindowCommand = DeregisterTargetFromMaintenanceWindowCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterTaskFromMaintenanceWindowCommand.js
var require_DeregisterTaskFromMaintenanceWindowCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterTaskFromMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeregisterTaskFromMaintenanceWindowCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeregisterTaskFromMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeregisterTaskFromMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeregisterTaskFromMaintenanceWindowRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeregisterTaskFromMaintenanceWindowResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand)(output, context);
      }
    };
    exports.DeregisterTaskFromMaintenanceWindowCommand = DeregisterTaskFromMaintenanceWindowCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeActivationsCommand.js
var require_DescribeActivationsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeActivationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeActivationsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeActivationsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeActivationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeActivationsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeActivationsResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeActivationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeActivationsCommand)(output, context);
      }
    };
    exports.DescribeActivationsCommand = DescribeActivationsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationCommand.js
var require_DescribeAssociationCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAssociationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeAssociationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAssociationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeAssociationRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeAssociationResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeAssociationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeAssociationCommand)(output, context);
      }
    };
    exports.DescribeAssociationCommand = DescribeAssociationCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationExecutionsCommand.js
var require_DescribeAssociationExecutionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationExecutionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAssociationExecutionsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeAssociationExecutionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAssociationExecutionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeAssociationExecutionsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeAssociationExecutionsResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeAssociationExecutionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeAssociationExecutionsCommand)(output, context);
      }
    };
    exports.DescribeAssociationExecutionsCommand = DescribeAssociationExecutionsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationExecutionTargetsCommand.js
var require_DescribeAssociationExecutionTargetsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationExecutionTargetsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAssociationExecutionTargetsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeAssociationExecutionTargetsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAssociationExecutionTargetsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeAssociationExecutionTargetsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeAssociationExecutionTargetsResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeAssociationExecutionTargetsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeAssociationExecutionTargetsCommand)(output, context);
      }
    };
    exports.DescribeAssociationExecutionTargetsCommand = DescribeAssociationExecutionTargetsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAutomationExecutionsCommand.js
var require_DescribeAutomationExecutionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAutomationExecutionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAutomationExecutionsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeAutomationExecutionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAutomationExecutionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeAutomationExecutionsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeAutomationExecutionsResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeAutomationExecutionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeAutomationExecutionsCommand)(output, context);
      }
    };
    exports.DescribeAutomationExecutionsCommand = DescribeAutomationExecutionsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAutomationStepExecutionsCommand.js
var require_DescribeAutomationStepExecutionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAutomationStepExecutionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAutomationStepExecutionsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeAutomationStepExecutionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAutomationStepExecutionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeAutomationStepExecutionsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeAutomationStepExecutionsResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeAutomationStepExecutionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeAutomationStepExecutionsCommand)(output, context);
      }
    };
    exports.DescribeAutomationStepExecutionsCommand = DescribeAutomationStepExecutionsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAvailablePatchesCommand.js
var require_DescribeAvailablePatchesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAvailablePatchesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAvailablePatchesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeAvailablePatchesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAvailablePatchesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeAvailablePatchesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeAvailablePatchesResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeAvailablePatchesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeAvailablePatchesCommand)(output, context);
      }
    };
    exports.DescribeAvailablePatchesCommand = DescribeAvailablePatchesCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeDocumentCommand.js
var require_DescribeDocumentCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeDocumentCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDocumentCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeDocumentCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeDocumentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDocumentRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeDocumentResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeDocumentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeDocumentCommand)(output, context);
      }
    };
    exports.DescribeDocumentCommand = DescribeDocumentCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeDocumentPermissionCommand.js
var require_DescribeDocumentPermissionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeDocumentPermissionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDocumentPermissionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeDocumentPermissionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeDocumentPermissionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDocumentPermissionRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeDocumentPermissionResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeDocumentPermissionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeDocumentPermissionCommand)(output, context);
      }
    };
    exports.DescribeDocumentPermissionCommand = DescribeDocumentPermissionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeEffectiveInstanceAssociationsCommand.js
var require_DescribeEffectiveInstanceAssociationsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeEffectiveInstanceAssociationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeEffectiveInstanceAssociationsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeEffectiveInstanceAssociationsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeEffectiveInstanceAssociationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeEffectiveInstanceAssociationsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeEffectiveInstanceAssociationsResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand)(output, context);
      }
    };
    exports.DescribeEffectiveInstanceAssociationsCommand = DescribeEffectiveInstanceAssociationsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeEffectivePatchesForPatchBaselineCommand.js
var require_DescribeEffectivePatchesForPatchBaselineCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeEffectivePatchesForPatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeEffectivePatchesForPatchBaselineCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeEffectivePatchesForPatchBaselineCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeEffectivePatchesForPatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeEffectivePatchesForPatchBaselineRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeEffectivePatchesForPatchBaselineResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand)(output, context);
      }
    };
    exports.DescribeEffectivePatchesForPatchBaselineCommand = DescribeEffectivePatchesForPatchBaselineCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstanceAssociationsStatusCommand.js
var require_DescribeInstanceAssociationsStatusCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstanceAssociationsStatusCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInstanceAssociationsStatusCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeInstanceAssociationsStatusCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstanceAssociationsStatusCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeInstanceAssociationsStatusRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeInstanceAssociationsStatusResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeInstanceAssociationsStatusCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeInstanceAssociationsStatusCommand)(output, context);
      }
    };
    exports.DescribeInstanceAssociationsStatusCommand = DescribeInstanceAssociationsStatusCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstanceInformationCommand.js
var require_DescribeInstanceInformationCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstanceInformationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInstanceInformationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeInstanceInformationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstanceInformationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeInstanceInformationRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeInstanceInformationResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeInstanceInformationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeInstanceInformationCommand)(output, context);
      }
    };
    exports.DescribeInstanceInformationCommand = DescribeInstanceInformationCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchesCommand.js
var require_DescribeInstancePatchesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInstancePatchesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeInstancePatchesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstancePatchesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeInstancePatchesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeInstancePatchesResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeInstancePatchesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeInstancePatchesCommand)(output, context);
      }
    };
    exports.DescribeInstancePatchesCommand = DescribeInstancePatchesCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchStatesCommand.js
var require_DescribeInstancePatchStatesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchStatesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInstancePatchStatesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeInstancePatchStatesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstancePatchStatesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeInstancePatchStatesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeInstancePatchStatesResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeInstancePatchStatesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeInstancePatchStatesCommand)(output, context);
      }
    };
    exports.DescribeInstancePatchStatesCommand = DescribeInstancePatchStatesCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchStatesForPatchGroupCommand.js
var require_DescribeInstancePatchStatesForPatchGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchStatesForPatchGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInstancePatchStatesForPatchGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeInstancePatchStatesForPatchGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstancePatchStatesForPatchGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeInstancePatchStatesForPatchGroupRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeInstancePatchStatesForPatchGroupResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand)(output, context);
      }
    };
    exports.DescribeInstancePatchStatesForPatchGroupCommand = DescribeInstancePatchStatesForPatchGroupCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInventoryDeletionsCommand.js
var require_DescribeInventoryDeletionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInventoryDeletionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInventoryDeletionsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeInventoryDeletionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInventoryDeletionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeInventoryDeletionsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeInventoryDeletionsResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeInventoryDeletionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeInventoryDeletionsCommand)(output, context);
      }
    };
    exports.DescribeInventoryDeletionsCommand = DescribeInventoryDeletionsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionsCommand.js
var require_DescribeMaintenanceWindowExecutionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowExecutionsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeMaintenanceWindowExecutionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowExecutionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowExecutionsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowExecutionsResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowExecutionsCommand = DescribeMaintenanceWindowExecutionsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionTaskInvocationsCommand.js
var require_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionTaskInvocationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowExecutionTaskInvocationsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeMaintenanceWindowExecutionTaskInvocationsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowExecutionTaskInvocationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowExecutionTaskInvocationsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowExecutionTaskInvocationsResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowExecutionTaskInvocationsCommand = DescribeMaintenanceWindowExecutionTaskInvocationsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionTasksCommand.js
var require_DescribeMaintenanceWindowExecutionTasksCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionTasksCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowExecutionTasksCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeMaintenanceWindowExecutionTasksCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowExecutionTasksCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowExecutionTasksRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowExecutionTasksResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowExecutionTasksCommand = DescribeMaintenanceWindowExecutionTasksCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowScheduleCommand.js
var require_DescribeMaintenanceWindowScheduleCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowScheduleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowScheduleCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeMaintenanceWindowScheduleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowScheduleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowScheduleRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowScheduleResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowScheduleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowScheduleCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowScheduleCommand = DescribeMaintenanceWindowScheduleCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowsCommand.js
var require_DescribeMaintenanceWindowsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeMaintenanceWindowsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowsResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowsCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowsCommand = DescribeMaintenanceWindowsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowsForTargetCommand.js
var require_DescribeMaintenanceWindowsForTargetCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowsForTargetCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowsForTargetCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeMaintenanceWindowsForTargetCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowsForTargetCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowsForTargetRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowsForTargetResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowsForTargetCommand = DescribeMaintenanceWindowsForTargetCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowTargetsCommand.js
var require_DescribeMaintenanceWindowTargetsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowTargetsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowTargetsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeMaintenanceWindowTargetsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowTargetsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowTargetsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowTargetsResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowTargetsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowTargetsCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowTargetsCommand = DescribeMaintenanceWindowTargetsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowTasksCommand.js
var require_DescribeMaintenanceWindowTasksCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowTasksCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowTasksCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeMaintenanceWindowTasksCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowTasksCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowTasksRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowTasksResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowTasksCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowTasksCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowTasksCommand = DescribeMaintenanceWindowTasksCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeOpsItemsCommand.js
var require_DescribeOpsItemsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeOpsItemsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeOpsItemsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeOpsItemsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeOpsItemsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeOpsItemsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeOpsItemsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeOpsItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeOpsItemsCommand)(output, context);
      }
    };
    exports.DescribeOpsItemsCommand = DescribeOpsItemsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeParametersCommand.js
var require_DescribeParametersCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeParametersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeParametersCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_04();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeParametersCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeParametersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeParametersRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DescribeParametersResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeParametersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeParametersCommand)(output, context);
      }
    };
    exports.DescribeParametersCommand = DescribeParametersCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchBaselinesCommand.js
var require_DescribePatchBaselinesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchBaselinesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribePatchBaselinesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribePatchBaselinesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribePatchBaselinesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribePatchBaselinesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DescribePatchBaselinesResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribePatchBaselinesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribePatchBaselinesCommand)(output, context);
      }
    };
    exports.DescribePatchBaselinesCommand = DescribePatchBaselinesCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchGroupsCommand.js
var require_DescribePatchGroupsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchGroupsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribePatchGroupsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribePatchGroupsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribePatchGroupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribePatchGroupsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DescribePatchGroupsResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribePatchGroupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribePatchGroupsCommand)(output, context);
      }
    };
    exports.DescribePatchGroupsCommand = DescribePatchGroupsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchGroupStateCommand.js
var require_DescribePatchGroupStateCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchGroupStateCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribePatchGroupStateCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribePatchGroupStateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribePatchGroupStateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribePatchGroupStateRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DescribePatchGroupStateResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribePatchGroupStateCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribePatchGroupStateCommand)(output, context);
      }
    };
    exports.DescribePatchGroupStateCommand = DescribePatchGroupStateCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchPropertiesCommand.js
var require_DescribePatchPropertiesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchPropertiesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribePatchPropertiesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribePatchPropertiesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribePatchPropertiesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribePatchPropertiesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DescribePatchPropertiesResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribePatchPropertiesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribePatchPropertiesCommand)(output, context);
      }
    };
    exports.DescribePatchPropertiesCommand = DescribePatchPropertiesCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeSessionsCommand.js
var require_DescribeSessionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeSessionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeSessionsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeSessionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeSessionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribeSessionsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DescribeSessionsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeSessionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeSessionsCommand)(output, context);
      }
    };
    exports.DescribeSessionsCommand = DescribeSessionsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DisassociateOpsItemRelatedItemCommand.js
var require_DisassociateOpsItemRelatedItemCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DisassociateOpsItemRelatedItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DisassociateOpsItemRelatedItemCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DisassociateOpsItemRelatedItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DisassociateOpsItemRelatedItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DisassociateOpsItemRelatedItemRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DisassociateOpsItemRelatedItemResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DisassociateOpsItemRelatedItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DisassociateOpsItemRelatedItemCommand)(output, context);
      }
    };
    exports.DisassociateOpsItemRelatedItemCommand = DisassociateOpsItemRelatedItemCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetAutomationExecutionCommand.js
var require_GetAutomationExecutionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetAutomationExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAutomationExecutionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetAutomationExecutionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetAutomationExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetAutomationExecutionRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetAutomationExecutionResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetAutomationExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetAutomationExecutionCommand)(output, context);
      }
    };
    exports.GetAutomationExecutionCommand = GetAutomationExecutionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetCalendarStateCommand.js
var require_GetCalendarStateCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetCalendarStateCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetCalendarStateCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetCalendarStateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetCalendarStateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetCalendarStateRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetCalendarStateResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetCalendarStateCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetCalendarStateCommand)(output, context);
      }
    };
    exports.GetCalendarStateCommand = GetCalendarStateCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetCommandInvocationCommand.js
var require_GetCommandInvocationCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetCommandInvocationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetCommandInvocationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetCommandInvocationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetCommandInvocationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetCommandInvocationRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetCommandInvocationResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetCommandInvocationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetCommandInvocationCommand)(output, context);
      }
    };
    exports.GetCommandInvocationCommand = GetCommandInvocationCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetConnectionStatusCommand.js
var require_GetConnectionStatusCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetConnectionStatusCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetConnectionStatusCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetConnectionStatusCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetConnectionStatusCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetConnectionStatusRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetConnectionStatusResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetConnectionStatusCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetConnectionStatusCommand)(output, context);
      }
    };
    exports.GetConnectionStatusCommand = GetConnectionStatusCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDefaultPatchBaselineCommand.js
var require_GetDefaultPatchBaselineCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDefaultPatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetDefaultPatchBaselineCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetDefaultPatchBaselineCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetDefaultPatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetDefaultPatchBaselineRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetDefaultPatchBaselineResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetDefaultPatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetDefaultPatchBaselineCommand)(output, context);
      }
    };
    exports.GetDefaultPatchBaselineCommand = GetDefaultPatchBaselineCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDeployablePatchSnapshotForInstanceCommand.js
var require_GetDeployablePatchSnapshotForInstanceCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDeployablePatchSnapshotForInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetDeployablePatchSnapshotForInstanceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetDeployablePatchSnapshotForInstanceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetDeployablePatchSnapshotForInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetDeployablePatchSnapshotForInstanceRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetDeployablePatchSnapshotForInstanceResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand)(output, context);
      }
    };
    exports.GetDeployablePatchSnapshotForInstanceCommand = GetDeployablePatchSnapshotForInstanceCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDocumentCommand.js
var require_GetDocumentCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDocumentCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetDocumentCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetDocumentCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetDocumentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetDocumentRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetDocumentResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetDocumentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetDocumentCommand)(output, context);
      }
    };
    exports.GetDocumentCommand = GetDocumentCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetInventoryCommand.js
var require_GetInventoryCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetInventoryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetInventoryCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetInventoryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetInventoryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.GetInventoryRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetInventoryResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetInventoryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetInventoryCommand)(output, context);
      }
    };
    exports.GetInventoryCommand = GetInventoryCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetInventorySchemaCommand.js
var require_GetInventorySchemaCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetInventorySchemaCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetInventorySchemaCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetInventorySchemaCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetInventorySchemaCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetInventorySchemaRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetInventorySchemaResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetInventorySchemaCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetInventorySchemaCommand)(output, context);
      }
    };
    exports.GetInventorySchemaCommand = GetInventorySchemaCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowCommand.js
var require_GetMaintenanceWindowCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMaintenanceWindowCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetMaintenanceWindowRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetMaintenanceWindowResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetMaintenanceWindowCommand)(output, context);
      }
    };
    exports.GetMaintenanceWindowCommand = GetMaintenanceWindowCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionCommand.js
var require_GetMaintenanceWindowExecutionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMaintenanceWindowExecutionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetMaintenanceWindowExecutionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetMaintenanceWindowExecutionRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetMaintenanceWindowExecutionResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetMaintenanceWindowExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetMaintenanceWindowExecutionCommand)(output, context);
      }
    };
    exports.GetMaintenanceWindowExecutionCommand = GetMaintenanceWindowExecutionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionTaskCommand.js
var require_GetMaintenanceWindowExecutionTaskCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionTaskCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMaintenanceWindowExecutionTaskCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetMaintenanceWindowExecutionTaskCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowExecutionTaskCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetMaintenanceWindowExecutionTaskRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetMaintenanceWindowExecutionTaskResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand)(output, context);
      }
    };
    exports.GetMaintenanceWindowExecutionTaskCommand = GetMaintenanceWindowExecutionTaskCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionTaskInvocationCommand.js
var require_GetMaintenanceWindowExecutionTaskInvocationCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionTaskInvocationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMaintenanceWindowExecutionTaskInvocationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetMaintenanceWindowExecutionTaskInvocationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowExecutionTaskInvocationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetMaintenanceWindowExecutionTaskInvocationRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetMaintenanceWindowExecutionTaskInvocationResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand)(output, context);
      }
    };
    exports.GetMaintenanceWindowExecutionTaskInvocationCommand = GetMaintenanceWindowExecutionTaskInvocationCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowTaskCommand.js
var require_GetMaintenanceWindowTaskCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowTaskCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMaintenanceWindowTaskCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetMaintenanceWindowTaskCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowTaskCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetMaintenanceWindowTaskRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetMaintenanceWindowTaskResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetMaintenanceWindowTaskCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetMaintenanceWindowTaskCommand)(output, context);
      }
    };
    exports.GetMaintenanceWindowTaskCommand = GetMaintenanceWindowTaskCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsItemCommand.js
var require_GetOpsItemCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetOpsItemCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetOpsItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetOpsItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetOpsItemRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetOpsItemResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetOpsItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetOpsItemCommand)(output, context);
      }
    };
    exports.GetOpsItemCommand = GetOpsItemCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsMetadataCommand.js
var require_GetOpsMetadataCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetOpsMetadataCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetOpsMetadataCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetOpsMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetOpsMetadataRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetOpsMetadataResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetOpsMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetOpsMetadataCommand)(output, context);
      }
    };
    exports.GetOpsMetadataCommand = GetOpsMetadataCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsSummaryCommand.js
var require_GetOpsSummaryCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsSummaryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetOpsSummaryCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetOpsSummaryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetOpsSummaryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.GetOpsSummaryRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetOpsSummaryResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetOpsSummaryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetOpsSummaryCommand)(output, context);
      }
    };
    exports.GetOpsSummaryCommand = GetOpsSummaryCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParameterCommand.js
var require_GetParameterCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParameterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetParameterCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetParameterCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetParameterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetParameterRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetParameterResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetParameterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetParameterCommand)(output, context);
      }
    };
    exports.GetParameterCommand = GetParameterCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParameterHistoryCommand.js
var require_GetParameterHistoryCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParameterHistoryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetParameterHistoryCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetParameterHistoryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetParameterHistoryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetParameterHistoryRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetParameterHistoryResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetParameterHistoryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetParameterHistoryCommand)(output, context);
      }
    };
    exports.GetParameterHistoryCommand = GetParameterHistoryCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParametersByPathCommand.js
var require_GetParametersByPathCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParametersByPathCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetParametersByPathCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetParametersByPathCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetParametersByPathCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetParametersByPathRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetParametersByPathResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetParametersByPathCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetParametersByPathCommand)(output, context);
      }
    };
    exports.GetParametersByPathCommand = GetParametersByPathCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParametersCommand.js
var require_GetParametersCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParametersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetParametersCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetParametersCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetParametersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetParametersRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetParametersResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetParametersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetParametersCommand)(output, context);
      }
    };
    exports.GetParametersCommand = GetParametersCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetPatchBaselineCommand.js
var require_GetPatchBaselineCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetPatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetPatchBaselineCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetPatchBaselineCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetPatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetPatchBaselineRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetPatchBaselineResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetPatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetPatchBaselineCommand)(output, context);
      }
    };
    exports.GetPatchBaselineCommand = GetPatchBaselineCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetPatchBaselineForPatchGroupCommand.js
var require_GetPatchBaselineForPatchGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetPatchBaselineForPatchGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetPatchBaselineForPatchGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetPatchBaselineForPatchGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetPatchBaselineForPatchGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetPatchBaselineForPatchGroupRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetPatchBaselineForPatchGroupResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetPatchBaselineForPatchGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetPatchBaselineForPatchGroupCommand)(output, context);
      }
    };
    exports.GetPatchBaselineForPatchGroupCommand = GetPatchBaselineForPatchGroupCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetServiceSettingCommand.js
var require_GetServiceSettingCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetServiceSettingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetServiceSettingCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetServiceSettingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetServiceSettingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetServiceSettingRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetServiceSettingResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetServiceSettingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetServiceSettingCommand)(output, context);
      }
    };
    exports.GetServiceSettingCommand = GetServiceSettingCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/LabelParameterVersionCommand.js
var require_LabelParameterVersionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/LabelParameterVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LabelParameterVersionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var LabelParameterVersionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "LabelParameterVersionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.LabelParameterVersionRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.LabelParameterVersionResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1LabelParameterVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1LabelParameterVersionCommand)(output, context);
      }
    };
    exports.LabelParameterVersionCommand = LabelParameterVersionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListAssociationsCommand.js
var require_ListAssociationsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListAssociationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAssociationsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListAssociationsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListAssociationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListAssociationsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListAssociationsResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListAssociationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListAssociationsCommand)(output, context);
      }
    };
    exports.ListAssociationsCommand = ListAssociationsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListAssociationVersionsCommand.js
var require_ListAssociationVersionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListAssociationVersionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAssociationVersionsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListAssociationVersionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListAssociationVersionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListAssociationVersionsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListAssociationVersionsResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListAssociationVersionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListAssociationVersionsCommand)(output, context);
      }
    };
    exports.ListAssociationVersionsCommand = ListAssociationVersionsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListCommandInvocationsCommand.js
var require_ListCommandInvocationsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListCommandInvocationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListCommandInvocationsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListCommandInvocationsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListCommandInvocationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListCommandInvocationsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListCommandInvocationsResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListCommandInvocationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListCommandInvocationsCommand)(output, context);
      }
    };
    exports.ListCommandInvocationsCommand = ListCommandInvocationsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListCommandsCommand.js
var require_ListCommandsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListCommandsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListCommandsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListCommandsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListCommandsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListCommandsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListCommandsResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListCommandsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListCommandsCommand)(output, context);
      }
    };
    exports.ListCommandsCommand = ListCommandsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListComplianceItemsCommand.js
var require_ListComplianceItemsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListComplianceItemsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListComplianceItemsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListComplianceItemsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListComplianceItemsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListComplianceItemsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListComplianceItemsResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListComplianceItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListComplianceItemsCommand)(output, context);
      }
    };
    exports.ListComplianceItemsCommand = ListComplianceItemsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListComplianceSummariesCommand.js
var require_ListComplianceSummariesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListComplianceSummariesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListComplianceSummariesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListComplianceSummariesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListComplianceSummariesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListComplianceSummariesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListComplianceSummariesResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListComplianceSummariesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListComplianceSummariesCommand)(output, context);
      }
    };
    exports.ListComplianceSummariesCommand = ListComplianceSummariesCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentMetadataHistoryCommand.js
var require_ListDocumentMetadataHistoryCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentMetadataHistoryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListDocumentMetadataHistoryCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListDocumentMetadataHistoryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListDocumentMetadataHistoryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListDocumentMetadataHistoryRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListDocumentMetadataHistoryResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListDocumentMetadataHistoryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListDocumentMetadataHistoryCommand)(output, context);
      }
    };
    exports.ListDocumentMetadataHistoryCommand = ListDocumentMetadataHistoryCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentsCommand.js
var require_ListDocumentsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListDocumentsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListDocumentsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListDocumentsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListDocumentsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListDocumentsResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListDocumentsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListDocumentsCommand)(output, context);
      }
    };
    exports.ListDocumentsCommand = ListDocumentsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentVersionsCommand.js
var require_ListDocumentVersionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentVersionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListDocumentVersionsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListDocumentVersionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListDocumentVersionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListDocumentVersionsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListDocumentVersionsResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListDocumentVersionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListDocumentVersionsCommand)(output, context);
      }
    };
    exports.ListDocumentVersionsCommand = ListDocumentVersionsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListInventoryEntriesCommand.js
var require_ListInventoryEntriesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListInventoryEntriesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListInventoryEntriesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListInventoryEntriesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListInventoryEntriesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListInventoryEntriesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListInventoryEntriesResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListInventoryEntriesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListInventoryEntriesCommand)(output, context);
      }
    };
    exports.ListInventoryEntriesCommand = ListInventoryEntriesCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsItemEventsCommand.js
var require_ListOpsItemEventsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsItemEventsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListOpsItemEventsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListOpsItemEventsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListOpsItemEventsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListOpsItemEventsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListOpsItemEventsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListOpsItemEventsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListOpsItemEventsCommand)(output, context);
      }
    };
    exports.ListOpsItemEventsCommand = ListOpsItemEventsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsItemRelatedItemsCommand.js
var require_ListOpsItemRelatedItemsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsItemRelatedItemsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListOpsItemRelatedItemsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListOpsItemRelatedItemsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListOpsItemRelatedItemsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListOpsItemRelatedItemsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListOpsItemRelatedItemsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListOpsItemRelatedItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListOpsItemRelatedItemsCommand)(output, context);
      }
    };
    exports.ListOpsItemRelatedItemsCommand = ListOpsItemRelatedItemsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsMetadataCommand.js
var require_ListOpsMetadataCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListOpsMetadataCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListOpsMetadataCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListOpsMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListOpsMetadataRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListOpsMetadataResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListOpsMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListOpsMetadataCommand)(output, context);
      }
    };
    exports.ListOpsMetadataCommand = ListOpsMetadataCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListResourceComplianceSummariesCommand.js
var require_ListResourceComplianceSummariesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListResourceComplianceSummariesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListResourceComplianceSummariesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListResourceComplianceSummariesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListResourceComplianceSummariesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListResourceComplianceSummariesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListResourceComplianceSummariesResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListResourceComplianceSummariesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListResourceComplianceSummariesCommand)(output, context);
      }
    };
    exports.ListResourceComplianceSummariesCommand = ListResourceComplianceSummariesCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListResourceDataSyncCommand.js
var require_ListResourceDataSyncCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListResourceDataSyncCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListResourceDataSyncCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListResourceDataSyncCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListResourceDataSyncCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListResourceDataSyncRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListResourceDataSyncResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListResourceDataSyncCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListResourceDataSyncCommand)(output, context);
      }
    };
    exports.ListResourceDataSyncCommand = ListResourceDataSyncCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListTagsForResourceCommand.js
var require_ListTagsForResourceCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListTagsForResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListTagsForResourceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListTagsForResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListTagsForResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListTagsForResourceRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListTagsForResourceResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListTagsForResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListTagsForResourceCommand)(output, context);
      }
    };
    exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ModifyDocumentPermissionCommand.js
var require_ModifyDocumentPermissionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ModifyDocumentPermissionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModifyDocumentPermissionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ModifyDocumentPermissionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ModifyDocumentPermissionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ModifyDocumentPermissionRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ModifyDocumentPermissionResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ModifyDocumentPermissionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ModifyDocumentPermissionCommand)(output, context);
      }
    };
    exports.ModifyDocumentPermissionCommand = ModifyDocumentPermissionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutComplianceItemsCommand.js
var require_PutComplianceItemsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutComplianceItemsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutComplianceItemsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var PutComplianceItemsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "PutComplianceItemsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.PutComplianceItemsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.PutComplianceItemsResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1PutComplianceItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1PutComplianceItemsCommand)(output, context);
      }
    };
    exports.PutComplianceItemsCommand = PutComplianceItemsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutInventoryCommand.js
var require_PutInventoryCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutInventoryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutInventoryCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var PutInventoryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "PutInventoryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.PutInventoryRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.PutInventoryResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1PutInventoryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1PutInventoryCommand)(output, context);
      }
    };
    exports.PutInventoryCommand = PutInventoryCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutParameterCommand.js
var require_PutParameterCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutParameterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutParameterCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var PutParameterCommand2 = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "PutParameterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.PutParameterRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.PutParameterResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1PutParameterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1PutParameterCommand)(output, context);
      }
    };
    exports.PutParameterCommand = PutParameterCommand2;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterDefaultPatchBaselineCommand.js
var require_RegisterDefaultPatchBaselineCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterDefaultPatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterDefaultPatchBaselineCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var RegisterDefaultPatchBaselineCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RegisterDefaultPatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RegisterDefaultPatchBaselineRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RegisterDefaultPatchBaselineResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1RegisterDefaultPatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1RegisterDefaultPatchBaselineCommand)(output, context);
      }
    };
    exports.RegisterDefaultPatchBaselineCommand = RegisterDefaultPatchBaselineCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterPatchBaselineForPatchGroupCommand.js
var require_RegisterPatchBaselineForPatchGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterPatchBaselineForPatchGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterPatchBaselineForPatchGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var RegisterPatchBaselineForPatchGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RegisterPatchBaselineForPatchGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RegisterPatchBaselineForPatchGroupRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RegisterPatchBaselineForPatchGroupResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand)(output, context);
      }
    };
    exports.RegisterPatchBaselineForPatchGroupCommand = RegisterPatchBaselineForPatchGroupCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterTargetWithMaintenanceWindowCommand.js
var require_RegisterTargetWithMaintenanceWindowCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterTargetWithMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterTargetWithMaintenanceWindowCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var RegisterTargetWithMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RegisterTargetWithMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RegisterTargetWithMaintenanceWindowRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RegisterTargetWithMaintenanceWindowResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand)(output, context);
      }
    };
    exports.RegisterTargetWithMaintenanceWindowCommand = RegisterTargetWithMaintenanceWindowCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterTaskWithMaintenanceWindowCommand.js
var require_RegisterTaskWithMaintenanceWindowCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterTaskWithMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterTaskWithMaintenanceWindowCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var RegisterTaskWithMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RegisterTaskWithMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RegisterTaskWithMaintenanceWindowRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RegisterTaskWithMaintenanceWindowResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand)(output, context);
      }
    };
    exports.RegisterTaskWithMaintenanceWindowCommand = RegisterTaskWithMaintenanceWindowCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RemoveTagsFromResourceCommand.js
var require_RemoveTagsFromResourceCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RemoveTagsFromResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoveTagsFromResourceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var RemoveTagsFromResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RemoveTagsFromResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RemoveTagsFromResourceRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RemoveTagsFromResourceResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1RemoveTagsFromResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1RemoveTagsFromResourceCommand)(output, context);
      }
    };
    exports.RemoveTagsFromResourceCommand = RemoveTagsFromResourceCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ResetServiceSettingCommand.js
var require_ResetServiceSettingCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ResetServiceSettingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResetServiceSettingCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ResetServiceSettingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ResetServiceSettingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ResetServiceSettingRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ResetServiceSettingResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ResetServiceSettingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ResetServiceSettingCommand)(output, context);
      }
    };
    exports.ResetServiceSettingCommand = ResetServiceSettingCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ResumeSessionCommand.js
var require_ResumeSessionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ResumeSessionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResumeSessionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ResumeSessionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ResumeSessionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ResumeSessionRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ResumeSessionResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ResumeSessionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ResumeSessionCommand)(output, context);
      }
    };
    exports.ResumeSessionCommand = ResumeSessionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/SendAutomationSignalCommand.js
var require_SendAutomationSignalCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/SendAutomationSignalCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SendAutomationSignalCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var SendAutomationSignalCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "SendAutomationSignalCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.SendAutomationSignalRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.SendAutomationSignalResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1SendAutomationSignalCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1SendAutomationSignalCommand)(output, context);
      }
    };
    exports.SendAutomationSignalCommand = SendAutomationSignalCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/SendCommandCommand.js
var require_SendCommandCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/SendCommandCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SendCommandCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var SendCommandCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "SendCommandCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.SendCommandRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.SendCommandResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1SendCommandCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1SendCommandCommand)(output, context);
      }
    };
    exports.SendCommandCommand = SendCommandCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartAssociationsOnceCommand.js
var require_StartAssociationsOnceCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartAssociationsOnceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartAssociationsOnceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var StartAssociationsOnceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StartAssociationsOnceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StartAssociationsOnceRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.StartAssociationsOnceResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1StartAssociationsOnceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1StartAssociationsOnceCommand)(output, context);
      }
    };
    exports.StartAssociationsOnceCommand = StartAssociationsOnceCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartAutomationExecutionCommand.js
var require_StartAutomationExecutionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartAutomationExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartAutomationExecutionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var StartAutomationExecutionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StartAutomationExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StartAutomationExecutionRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.StartAutomationExecutionResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1StartAutomationExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1StartAutomationExecutionCommand)(output, context);
      }
    };
    exports.StartAutomationExecutionCommand = StartAutomationExecutionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartChangeRequestExecutionCommand.js
var require_StartChangeRequestExecutionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartChangeRequestExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartChangeRequestExecutionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var StartChangeRequestExecutionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StartChangeRequestExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StartChangeRequestExecutionRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.StartChangeRequestExecutionResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1StartChangeRequestExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1StartChangeRequestExecutionCommand)(output, context);
      }
    };
    exports.StartChangeRequestExecutionCommand = StartChangeRequestExecutionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartSessionCommand.js
var require_StartSessionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartSessionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartSessionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var StartSessionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StartSessionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StartSessionRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.StartSessionResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1StartSessionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1StartSessionCommand)(output, context);
      }
    };
    exports.StartSessionCommand = StartSessionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StopAutomationExecutionCommand.js
var require_StopAutomationExecutionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StopAutomationExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StopAutomationExecutionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var StopAutomationExecutionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StopAutomationExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StopAutomationExecutionRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.StopAutomationExecutionResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1StopAutomationExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1StopAutomationExecutionCommand)(output, context);
      }
    };
    exports.StopAutomationExecutionCommand = StopAutomationExecutionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/TerminateSessionCommand.js
var require_TerminateSessionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/TerminateSessionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TerminateSessionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var TerminateSessionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "TerminateSessionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.TerminateSessionRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.TerminateSessionResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1TerminateSessionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1TerminateSessionCommand)(output, context);
      }
    };
    exports.TerminateSessionCommand = TerminateSessionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UnlabelParameterVersionCommand.js
var require_UnlabelParameterVersionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UnlabelParameterVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UnlabelParameterVersionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UnlabelParameterVersionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UnlabelParameterVersionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UnlabelParameterVersionRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UnlabelParameterVersionResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UnlabelParameterVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UnlabelParameterVersionCommand)(output, context);
      }
    };
    exports.UnlabelParameterVersionCommand = UnlabelParameterVersionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateAssociationCommand.js
var require_UpdateAssociationCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateAssociationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateAssociationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateAssociationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateAssociationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateAssociationRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UpdateAssociationResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateAssociationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateAssociationCommand)(output, context);
      }
    };
    exports.UpdateAssociationCommand = UpdateAssociationCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateAssociationStatusCommand.js
var require_UpdateAssociationStatusCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateAssociationStatusCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateAssociationStatusCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateAssociationStatusCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateAssociationStatusCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateAssociationStatusRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UpdateAssociationStatusResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateAssociationStatusCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateAssociationStatusCommand)(output, context);
      }
    };
    exports.UpdateAssociationStatusCommand = UpdateAssociationStatusCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentCommand.js
var require_UpdateDocumentCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateDocumentCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateDocumentCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateDocumentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateDocumentRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UpdateDocumentResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateDocumentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateDocumentCommand)(output, context);
      }
    };
    exports.UpdateDocumentCommand = UpdateDocumentCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentDefaultVersionCommand.js
var require_UpdateDocumentDefaultVersionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentDefaultVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateDocumentDefaultVersionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateDocumentDefaultVersionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateDocumentDefaultVersionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateDocumentDefaultVersionRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UpdateDocumentDefaultVersionResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateDocumentDefaultVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateDocumentDefaultVersionCommand)(output, context);
      }
    };
    exports.UpdateDocumentDefaultVersionCommand = UpdateDocumentDefaultVersionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentMetadataCommand.js
var require_UpdateDocumentMetadataCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateDocumentMetadataCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateDocumentMetadataCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateDocumentMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateDocumentMetadataRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateDocumentMetadataResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateDocumentMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateDocumentMetadataCommand)(output, context);
      }
    };
    exports.UpdateDocumentMetadataCommand = UpdateDocumentMetadataCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowCommand.js
var require_UpdateMaintenanceWindowCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateMaintenanceWindowCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateMaintenanceWindowCommand)(output, context);
      }
    };
    exports.UpdateMaintenanceWindowCommand = UpdateMaintenanceWindowCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowTargetCommand.js
var require_UpdateMaintenanceWindowTargetCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowTargetCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateMaintenanceWindowTargetCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateMaintenanceWindowTargetCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateMaintenanceWindowTargetCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowTargetRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowTargetResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateMaintenanceWindowTargetCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateMaintenanceWindowTargetCommand)(output, context);
      }
    };
    exports.UpdateMaintenanceWindowTargetCommand = UpdateMaintenanceWindowTargetCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowTaskCommand.js
var require_UpdateMaintenanceWindowTaskCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowTaskCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateMaintenanceWindowTaskCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateMaintenanceWindowTaskCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateMaintenanceWindowTaskCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowTaskRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowTaskResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateMaintenanceWindowTaskCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateMaintenanceWindowTaskCommand)(output, context);
      }
    };
    exports.UpdateMaintenanceWindowTaskCommand = UpdateMaintenanceWindowTaskCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateManagedInstanceRoleCommand.js
var require_UpdateManagedInstanceRoleCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateManagedInstanceRoleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateManagedInstanceRoleCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateManagedInstanceRoleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateManagedInstanceRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateManagedInstanceRoleRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateManagedInstanceRoleResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateManagedInstanceRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateManagedInstanceRoleCommand)(output, context);
      }
    };
    exports.UpdateManagedInstanceRoleCommand = UpdateManagedInstanceRoleCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateOpsItemCommand.js
var require_UpdateOpsItemCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateOpsItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateOpsItemCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateOpsItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateOpsItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateOpsItemRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateOpsItemResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateOpsItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateOpsItemCommand)(output, context);
      }
    };
    exports.UpdateOpsItemCommand = UpdateOpsItemCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateOpsMetadataCommand.js
var require_UpdateOpsMetadataCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateOpsMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateOpsMetadataCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateOpsMetadataCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateOpsMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateOpsMetadataRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateOpsMetadataResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateOpsMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateOpsMetadataCommand)(output, context);
      }
    };
    exports.UpdateOpsMetadataCommand = UpdateOpsMetadataCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdatePatchBaselineCommand.js
var require_UpdatePatchBaselineCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdatePatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdatePatchBaselineCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdatePatchBaselineCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdatePatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdatePatchBaselineRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdatePatchBaselineResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdatePatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdatePatchBaselineCommand)(output, context);
      }
    };
    exports.UpdatePatchBaselineCommand = UpdatePatchBaselineCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateResourceDataSyncCommand.js
var require_UpdateResourceDataSyncCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateResourceDataSyncCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateResourceDataSyncCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateResourceDataSyncCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateResourceDataSyncCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateResourceDataSyncRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateResourceDataSyncResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateResourceDataSyncCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateResourceDataSyncCommand)(output, context);
      }
    };
    exports.UpdateResourceDataSyncCommand = UpdateResourceDataSyncCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateServiceSettingCommand.js
var require_UpdateServiceSettingCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateServiceSettingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateServiceSettingCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateServiceSettingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateServiceSettingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateServiceSettingRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateServiceSettingResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateServiceSettingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateServiceSettingCommand)(output, context);
      }
    };
    exports.UpdateServiceSettingCommand = UpdateServiceSettingCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/package.json
var require_package4 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-ssm",
      description: "AWS SDK for JavaScript Ssm Client for Node.js, Browser and React Native",
      version: "3.121.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/client-sts": "3.121.0",
        "@aws-sdk/config-resolver": "3.110.0",
        "@aws-sdk/credential-provider-node": "3.121.0",
        "@aws-sdk/fetch-http-handler": "3.110.0",
        "@aws-sdk/hash-node": "3.110.0",
        "@aws-sdk/invalid-dependency": "3.110.0",
        "@aws-sdk/middleware-content-length": "3.110.0",
        "@aws-sdk/middleware-host-header": "3.110.0",
        "@aws-sdk/middleware-logger": "3.110.0",
        "@aws-sdk/middleware-recursion-detection": "3.110.0",
        "@aws-sdk/middleware-retry": "3.118.1",
        "@aws-sdk/middleware-serde": "3.110.0",
        "@aws-sdk/middleware-signing": "3.110.0",
        "@aws-sdk/middleware-stack": "3.110.0",
        "@aws-sdk/middleware-user-agent": "3.110.0",
        "@aws-sdk/node-config-provider": "3.110.0",
        "@aws-sdk/node-http-handler": "3.118.1",
        "@aws-sdk/protocol-http": "3.110.0",
        "@aws-sdk/smithy-client": "3.110.0",
        "@aws-sdk/types": "3.110.0",
        "@aws-sdk/url-parser": "3.110.0",
        "@aws-sdk/util-base64-browser": "3.109.0",
        "@aws-sdk/util-base64-node": "3.55.0",
        "@aws-sdk/util-body-length-browser": "3.55.0",
        "@aws-sdk/util-body-length-node": "3.55.0",
        "@aws-sdk/util-defaults-mode-browser": "3.110.0",
        "@aws-sdk/util-defaults-mode-node": "3.110.0",
        "@aws-sdk/util-user-agent-browser": "3.110.0",
        "@aws-sdk/util-user-agent-node": "3.118.0",
        "@aws-sdk/util-utf8-browser": "3.109.0",
        "@aws-sdk/util-utf8-node": "3.109.0",
        "@aws-sdk/util-waiter": "3.118.1",
        tslib: "^2.3.1",
        uuid: "^8.3.2"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.58.0",
        "@tsconfig/recommended": "1.0.1",
        "@types/node": "^12.7.5",
        "@types/uuid": "^8.3.0",
        concurrently: "7.0.0",
        "downlevel-dts": "0.7.0",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      engines: {
        node: ">=12.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-ssm",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-ssm"
      }
    };
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/endpoints.js
var require_endpoints4 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/endpoints.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultRegionInfoProvider = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var regionHash = {
      "ca-central-1": {
        variants: [
          {
            hostname: "ssm-fips.ca-central-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-east-1": {
        variants: [
          {
            hostname: "ssm-fips.us-east-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-east-2": {
        variants: [
          {
            hostname: "ssm-fips.us-east-2.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-gov-east-1": {
        variants: [
          {
            hostname: "ssm.us-gov-east-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-gov-west-1": {
        variants: [
          {
            hostname: "ssm.us-gov-west-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-west-1": {
        variants: [
          {
            hostname: "ssm-fips.us-west-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-west-2": {
        variants: [
          {
            hostname: "ssm-fips.us-west-2.amazonaws.com",
            tags: ["fips"]
          }
        ]
      }
    };
    var partitionHash = {
      aws: {
        regions: [
          "af-south-1",
          "ap-east-1",
          "ap-northeast-1",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "ap-southeast-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ca-central-1",
          "eu-central-1",
          "eu-north-1",
          "eu-south-1",
          "eu-west-1",
          "eu-west-2",
          "eu-west-3",
          "fips-ca-central-1",
          "fips-us-east-1",
          "fips-us-east-2",
          "fips-us-west-1",
          "fips-us-west-2",
          "me-south-1",
          "sa-east-1",
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2"
        ],
        regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "ssm.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "ssm-fips.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "ssm-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "ssm.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-cn": {
        regions: ["cn-north-1", "cn-northwest-1"],
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "ssm.{region}.amazonaws.com.cn",
            tags: []
          },
          {
            hostname: "ssm-fips.{region}.amazonaws.com.cn",
            tags: ["fips"]
          },
          {
            hostname: "ssm-fips.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "ssm.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-iso": {
        regions: ["us-iso-east-1", "us-iso-west-1"],
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "ssm.{region}.c2s.ic.gov",
            tags: []
          },
          {
            hostname: "ssm-fips.{region}.c2s.ic.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-iso-b": {
        regions: ["us-isob-east-1"],
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "ssm.{region}.sc2s.sgov.gov",
            tags: []
          },
          {
            hostname: "ssm-fips.{region}.sc2s.sgov.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-us-gov": {
        regions: ["fips-us-gov-east-1", "fips-us-gov-west-1", "us-gov-east-1", "us-gov-west-1"],
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "ssm.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "ssm.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "ssm-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "ssm.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      }
    };
    var defaultRegionInfoProvider = async (region, options) => (0, config_resolver_1.getRegionInfo)(region, {
      ...options,
      signingService: "ssm",
      regionHash,
      partitionHash
    });
    exports.defaultRegionInfoProvider = defaultRegionInfoProvider;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared4 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var url_parser_1 = require_dist_cjs26();
    var endpoints_1 = require_endpoints4();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e;
      return {
        apiVersion: "2014-11-06",
        disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
        logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
        regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : endpoints_1.defaultRegionInfoProvider,
        serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : "SSM",
        urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : url_parser_1.parseUrl
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/runtimeConfig.js
var require_runtimeConfig4 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib();
    var package_json_1 = tslib_1.__importDefault(require_package4());
    var client_sts_1 = require_dist_cjs43();
    var config_resolver_1 = require_dist_cjs7();
    var credential_provider_node_1 = require_dist_cjs42();
    var hash_node_1 = require_dist_cjs29();
    var middleware_retry_1 = require_dist_cjs13();
    var node_config_provider_1 = require_dist_cjs24();
    var node_http_handler_1 = require_dist_cjs31();
    var util_base64_node_1 = require_dist_cjs32();
    var util_body_length_node_1 = require_dist_cjs33();
    var util_user_agent_node_1 = require_dist_cjs34();
    var util_utf8_node_1 = require_dist_cjs35();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared4();
    var smithy_client_1 = require_dist_cjs3();
    var util_defaults_mode_node_1 = require_dist_cjs36();
    var smithy_client_2 = require_dist_cjs3();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : util_base64_node_1.fromBase64,
        base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : util_base64_node_1.toBase64,
        bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null && _d !== void 0 ? _d : (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _e !== void 0 ? _e : (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: (_f = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _f !== void 0 ? _f : (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (_g = config === null || config === void 0 ? void 0 : config.region) !== null && _g !== void 0 ? _g : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (_h = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _h !== void 0 ? _h : new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (_j = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _j !== void 0 ? _j : (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || middleware_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: (_k = config === null || config === void 0 ? void 0 : config.sha256) !== null && _k !== void 0 ? _k : hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (_l = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _l !== void 0 ? _l : node_http_handler_1.streamCollector,
        useDualstackEndpoint: (_m = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _m !== void 0 ? _m : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (_o = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _o !== void 0 ? _o : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder: (_p = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _p !== void 0 ? _p : util_utf8_node_1.fromUtf8,
        utf8Encoder: (_q = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _q !== void 0 ? _q : util_utf8_node_1.toUtf8
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/SSMClient.js
var require_SSMClient = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/SSMClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSMClient = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var middleware_content_length_1 = require_dist_cjs8();
    var middleware_host_header_1 = require_dist_cjs9();
    var middleware_logger_1 = require_dist_cjs10();
    var middleware_recursion_detection_1 = require_dist_cjs11();
    var middleware_retry_1 = require_dist_cjs13();
    var middleware_signing_1 = require_dist_cjs19();
    var middleware_user_agent_1 = require_dist_cjs20();
    var smithy_client_1 = require_dist_cjs3();
    var runtimeConfig_1 = require_runtimeConfig4();
    var SSMClient2 = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, config_resolver_1.resolveRegionConfig)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveEndpointsConfig)(_config_1);
        const _config_3 = (0, middleware_retry_1.resolveRetryConfig)(_config_2);
        const _config_4 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_3);
        const _config_5 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.SSMClient = SSMClient2;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/SSM.js
var require_SSM = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/SSM.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSM = void 0;
    var AddTagsToResourceCommand_1 = require_AddTagsToResourceCommand();
    var AssociateOpsItemRelatedItemCommand_1 = require_AssociateOpsItemRelatedItemCommand();
    var CancelCommandCommand_1 = require_CancelCommandCommand();
    var CancelMaintenanceWindowExecutionCommand_1 = require_CancelMaintenanceWindowExecutionCommand();
    var CreateActivationCommand_1 = require_CreateActivationCommand();
    var CreateAssociationBatchCommand_1 = require_CreateAssociationBatchCommand();
    var CreateAssociationCommand_1 = require_CreateAssociationCommand();
    var CreateDocumentCommand_1 = require_CreateDocumentCommand();
    var CreateMaintenanceWindowCommand_1 = require_CreateMaintenanceWindowCommand();
    var CreateOpsItemCommand_1 = require_CreateOpsItemCommand();
    var CreateOpsMetadataCommand_1 = require_CreateOpsMetadataCommand();
    var CreatePatchBaselineCommand_1 = require_CreatePatchBaselineCommand();
    var CreateResourceDataSyncCommand_1 = require_CreateResourceDataSyncCommand();
    var DeleteActivationCommand_1 = require_DeleteActivationCommand();
    var DeleteAssociationCommand_1 = require_DeleteAssociationCommand();
    var DeleteDocumentCommand_1 = require_DeleteDocumentCommand();
    var DeleteInventoryCommand_1 = require_DeleteInventoryCommand();
    var DeleteMaintenanceWindowCommand_1 = require_DeleteMaintenanceWindowCommand();
    var DeleteOpsMetadataCommand_1 = require_DeleteOpsMetadataCommand();
    var DeleteParameterCommand_1 = require_DeleteParameterCommand();
    var DeleteParametersCommand_1 = require_DeleteParametersCommand();
    var DeletePatchBaselineCommand_1 = require_DeletePatchBaselineCommand();
    var DeleteResourceDataSyncCommand_1 = require_DeleteResourceDataSyncCommand();
    var DeregisterManagedInstanceCommand_1 = require_DeregisterManagedInstanceCommand();
    var DeregisterPatchBaselineForPatchGroupCommand_1 = require_DeregisterPatchBaselineForPatchGroupCommand();
    var DeregisterTargetFromMaintenanceWindowCommand_1 = require_DeregisterTargetFromMaintenanceWindowCommand();
    var DeregisterTaskFromMaintenanceWindowCommand_1 = require_DeregisterTaskFromMaintenanceWindowCommand();
    var DescribeActivationsCommand_1 = require_DescribeActivationsCommand();
    var DescribeAssociationCommand_1 = require_DescribeAssociationCommand();
    var DescribeAssociationExecutionsCommand_1 = require_DescribeAssociationExecutionsCommand();
    var DescribeAssociationExecutionTargetsCommand_1 = require_DescribeAssociationExecutionTargetsCommand();
    var DescribeAutomationExecutionsCommand_1 = require_DescribeAutomationExecutionsCommand();
    var DescribeAutomationStepExecutionsCommand_1 = require_DescribeAutomationStepExecutionsCommand();
    var DescribeAvailablePatchesCommand_1 = require_DescribeAvailablePatchesCommand();
    var DescribeDocumentCommand_1 = require_DescribeDocumentCommand();
    var DescribeDocumentPermissionCommand_1 = require_DescribeDocumentPermissionCommand();
    var DescribeEffectiveInstanceAssociationsCommand_1 = require_DescribeEffectiveInstanceAssociationsCommand();
    var DescribeEffectivePatchesForPatchBaselineCommand_1 = require_DescribeEffectivePatchesForPatchBaselineCommand();
    var DescribeInstanceAssociationsStatusCommand_1 = require_DescribeInstanceAssociationsStatusCommand();
    var DescribeInstanceInformationCommand_1 = require_DescribeInstanceInformationCommand();
    var DescribeInstancePatchesCommand_1 = require_DescribeInstancePatchesCommand();
    var DescribeInstancePatchStatesCommand_1 = require_DescribeInstancePatchStatesCommand();
    var DescribeInstancePatchStatesForPatchGroupCommand_1 = require_DescribeInstancePatchStatesForPatchGroupCommand();
    var DescribeInventoryDeletionsCommand_1 = require_DescribeInventoryDeletionsCommand();
    var DescribeMaintenanceWindowExecutionsCommand_1 = require_DescribeMaintenanceWindowExecutionsCommand();
    var DescribeMaintenanceWindowExecutionTaskInvocationsCommand_1 = require_DescribeMaintenanceWindowExecutionTaskInvocationsCommand();
    var DescribeMaintenanceWindowExecutionTasksCommand_1 = require_DescribeMaintenanceWindowExecutionTasksCommand();
    var DescribeMaintenanceWindowScheduleCommand_1 = require_DescribeMaintenanceWindowScheduleCommand();
    var DescribeMaintenanceWindowsCommand_1 = require_DescribeMaintenanceWindowsCommand();
    var DescribeMaintenanceWindowsForTargetCommand_1 = require_DescribeMaintenanceWindowsForTargetCommand();
    var DescribeMaintenanceWindowTargetsCommand_1 = require_DescribeMaintenanceWindowTargetsCommand();
    var DescribeMaintenanceWindowTasksCommand_1 = require_DescribeMaintenanceWindowTasksCommand();
    var DescribeOpsItemsCommand_1 = require_DescribeOpsItemsCommand();
    var DescribeParametersCommand_1 = require_DescribeParametersCommand();
    var DescribePatchBaselinesCommand_1 = require_DescribePatchBaselinesCommand();
    var DescribePatchGroupsCommand_1 = require_DescribePatchGroupsCommand();
    var DescribePatchGroupStateCommand_1 = require_DescribePatchGroupStateCommand();
    var DescribePatchPropertiesCommand_1 = require_DescribePatchPropertiesCommand();
    var DescribeSessionsCommand_1 = require_DescribeSessionsCommand();
    var DisassociateOpsItemRelatedItemCommand_1 = require_DisassociateOpsItemRelatedItemCommand();
    var GetAutomationExecutionCommand_1 = require_GetAutomationExecutionCommand();
    var GetCalendarStateCommand_1 = require_GetCalendarStateCommand();
    var GetCommandInvocationCommand_1 = require_GetCommandInvocationCommand();
    var GetConnectionStatusCommand_1 = require_GetConnectionStatusCommand();
    var GetDefaultPatchBaselineCommand_1 = require_GetDefaultPatchBaselineCommand();
    var GetDeployablePatchSnapshotForInstanceCommand_1 = require_GetDeployablePatchSnapshotForInstanceCommand();
    var GetDocumentCommand_1 = require_GetDocumentCommand();
    var GetInventoryCommand_1 = require_GetInventoryCommand();
    var GetInventorySchemaCommand_1 = require_GetInventorySchemaCommand();
    var GetMaintenanceWindowCommand_1 = require_GetMaintenanceWindowCommand();
    var GetMaintenanceWindowExecutionCommand_1 = require_GetMaintenanceWindowExecutionCommand();
    var GetMaintenanceWindowExecutionTaskCommand_1 = require_GetMaintenanceWindowExecutionTaskCommand();
    var GetMaintenanceWindowExecutionTaskInvocationCommand_1 = require_GetMaintenanceWindowExecutionTaskInvocationCommand();
    var GetMaintenanceWindowTaskCommand_1 = require_GetMaintenanceWindowTaskCommand();
    var GetOpsItemCommand_1 = require_GetOpsItemCommand();
    var GetOpsMetadataCommand_1 = require_GetOpsMetadataCommand();
    var GetOpsSummaryCommand_1 = require_GetOpsSummaryCommand();
    var GetParameterCommand_1 = require_GetParameterCommand();
    var GetParameterHistoryCommand_1 = require_GetParameterHistoryCommand();
    var GetParametersByPathCommand_1 = require_GetParametersByPathCommand();
    var GetParametersCommand_1 = require_GetParametersCommand();
    var GetPatchBaselineCommand_1 = require_GetPatchBaselineCommand();
    var GetPatchBaselineForPatchGroupCommand_1 = require_GetPatchBaselineForPatchGroupCommand();
    var GetServiceSettingCommand_1 = require_GetServiceSettingCommand();
    var LabelParameterVersionCommand_1 = require_LabelParameterVersionCommand();
    var ListAssociationsCommand_1 = require_ListAssociationsCommand();
    var ListAssociationVersionsCommand_1 = require_ListAssociationVersionsCommand();
    var ListCommandInvocationsCommand_1 = require_ListCommandInvocationsCommand();
    var ListCommandsCommand_1 = require_ListCommandsCommand();
    var ListComplianceItemsCommand_1 = require_ListComplianceItemsCommand();
    var ListComplianceSummariesCommand_1 = require_ListComplianceSummariesCommand();
    var ListDocumentMetadataHistoryCommand_1 = require_ListDocumentMetadataHistoryCommand();
    var ListDocumentsCommand_1 = require_ListDocumentsCommand();
    var ListDocumentVersionsCommand_1 = require_ListDocumentVersionsCommand();
    var ListInventoryEntriesCommand_1 = require_ListInventoryEntriesCommand();
    var ListOpsItemEventsCommand_1 = require_ListOpsItemEventsCommand();
    var ListOpsItemRelatedItemsCommand_1 = require_ListOpsItemRelatedItemsCommand();
    var ListOpsMetadataCommand_1 = require_ListOpsMetadataCommand();
    var ListResourceComplianceSummariesCommand_1 = require_ListResourceComplianceSummariesCommand();
    var ListResourceDataSyncCommand_1 = require_ListResourceDataSyncCommand();
    var ListTagsForResourceCommand_1 = require_ListTagsForResourceCommand();
    var ModifyDocumentPermissionCommand_1 = require_ModifyDocumentPermissionCommand();
    var PutComplianceItemsCommand_1 = require_PutComplianceItemsCommand();
    var PutInventoryCommand_1 = require_PutInventoryCommand();
    var PutParameterCommand_1 = require_PutParameterCommand();
    var RegisterDefaultPatchBaselineCommand_1 = require_RegisterDefaultPatchBaselineCommand();
    var RegisterPatchBaselineForPatchGroupCommand_1 = require_RegisterPatchBaselineForPatchGroupCommand();
    var RegisterTargetWithMaintenanceWindowCommand_1 = require_RegisterTargetWithMaintenanceWindowCommand();
    var RegisterTaskWithMaintenanceWindowCommand_1 = require_RegisterTaskWithMaintenanceWindowCommand();
    var RemoveTagsFromResourceCommand_1 = require_RemoveTagsFromResourceCommand();
    var ResetServiceSettingCommand_1 = require_ResetServiceSettingCommand();
    var ResumeSessionCommand_1 = require_ResumeSessionCommand();
    var SendAutomationSignalCommand_1 = require_SendAutomationSignalCommand();
    var SendCommandCommand_1 = require_SendCommandCommand();
    var StartAssociationsOnceCommand_1 = require_StartAssociationsOnceCommand();
    var StartAutomationExecutionCommand_1 = require_StartAutomationExecutionCommand();
    var StartChangeRequestExecutionCommand_1 = require_StartChangeRequestExecutionCommand();
    var StartSessionCommand_1 = require_StartSessionCommand();
    var StopAutomationExecutionCommand_1 = require_StopAutomationExecutionCommand();
    var TerminateSessionCommand_1 = require_TerminateSessionCommand();
    var UnlabelParameterVersionCommand_1 = require_UnlabelParameterVersionCommand();
    var UpdateAssociationCommand_1 = require_UpdateAssociationCommand();
    var UpdateAssociationStatusCommand_1 = require_UpdateAssociationStatusCommand();
    var UpdateDocumentCommand_1 = require_UpdateDocumentCommand();
    var UpdateDocumentDefaultVersionCommand_1 = require_UpdateDocumentDefaultVersionCommand();
    var UpdateDocumentMetadataCommand_1 = require_UpdateDocumentMetadataCommand();
    var UpdateMaintenanceWindowCommand_1 = require_UpdateMaintenanceWindowCommand();
    var UpdateMaintenanceWindowTargetCommand_1 = require_UpdateMaintenanceWindowTargetCommand();
    var UpdateMaintenanceWindowTaskCommand_1 = require_UpdateMaintenanceWindowTaskCommand();
    var UpdateManagedInstanceRoleCommand_1 = require_UpdateManagedInstanceRoleCommand();
    var UpdateOpsItemCommand_1 = require_UpdateOpsItemCommand();
    var UpdateOpsMetadataCommand_1 = require_UpdateOpsMetadataCommand();
    var UpdatePatchBaselineCommand_1 = require_UpdatePatchBaselineCommand();
    var UpdateResourceDataSyncCommand_1 = require_UpdateResourceDataSyncCommand();
    var UpdateServiceSettingCommand_1 = require_UpdateServiceSettingCommand();
    var SSMClient_1 = require_SSMClient();
    var SSM = class extends SSMClient_1.SSMClient {
      addTagsToResource(args, optionsOrCb, cb) {
        const command = new AddTagsToResourceCommand_1.AddTagsToResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      associateOpsItemRelatedItem(args, optionsOrCb, cb) {
        const command = new AssociateOpsItemRelatedItemCommand_1.AssociateOpsItemRelatedItemCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      cancelCommand(args, optionsOrCb, cb) {
        const command = new CancelCommandCommand_1.CancelCommandCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      cancelMaintenanceWindowExecution(args, optionsOrCb, cb) {
        const command = new CancelMaintenanceWindowExecutionCommand_1.CancelMaintenanceWindowExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createActivation(args, optionsOrCb, cb) {
        const command = new CreateActivationCommand_1.CreateActivationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createAssociation(args, optionsOrCb, cb) {
        const command = new CreateAssociationCommand_1.CreateAssociationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createAssociationBatch(args, optionsOrCb, cb) {
        const command = new CreateAssociationBatchCommand_1.CreateAssociationBatchCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createDocument(args, optionsOrCb, cb) {
        const command = new CreateDocumentCommand_1.CreateDocumentCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new CreateMaintenanceWindowCommand_1.CreateMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createOpsItem(args, optionsOrCb, cb) {
        const command = new CreateOpsItemCommand_1.CreateOpsItemCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createOpsMetadata(args, optionsOrCb, cb) {
        const command = new CreateOpsMetadataCommand_1.CreateOpsMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createPatchBaseline(args, optionsOrCb, cb) {
        const command = new CreatePatchBaselineCommand_1.CreatePatchBaselineCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createResourceDataSync(args, optionsOrCb, cb) {
        const command = new CreateResourceDataSyncCommand_1.CreateResourceDataSyncCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteActivation(args, optionsOrCb, cb) {
        const command = new DeleteActivationCommand_1.DeleteActivationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteAssociation(args, optionsOrCb, cb) {
        const command = new DeleteAssociationCommand_1.DeleteAssociationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteDocument(args, optionsOrCb, cb) {
        const command = new DeleteDocumentCommand_1.DeleteDocumentCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteInventory(args, optionsOrCb, cb) {
        const command = new DeleteInventoryCommand_1.DeleteInventoryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new DeleteMaintenanceWindowCommand_1.DeleteMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteOpsMetadata(args, optionsOrCb, cb) {
        const command = new DeleteOpsMetadataCommand_1.DeleteOpsMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteParameter(args, optionsOrCb, cb) {
        const command = new DeleteParameterCommand_1.DeleteParameterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteParameters(args, optionsOrCb, cb) {
        const command = new DeleteParametersCommand_1.DeleteParametersCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deletePatchBaseline(args, optionsOrCb, cb) {
        const command = new DeletePatchBaselineCommand_1.DeletePatchBaselineCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteResourceDataSync(args, optionsOrCb, cb) {
        const command = new DeleteResourceDataSyncCommand_1.DeleteResourceDataSyncCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deregisterManagedInstance(args, optionsOrCb, cb) {
        const command = new DeregisterManagedInstanceCommand_1.DeregisterManagedInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deregisterPatchBaselineForPatchGroup(args, optionsOrCb, cb) {
        const command = new DeregisterPatchBaselineForPatchGroupCommand_1.DeregisterPatchBaselineForPatchGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deregisterTargetFromMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new DeregisterTargetFromMaintenanceWindowCommand_1.DeregisterTargetFromMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deregisterTaskFromMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new DeregisterTaskFromMaintenanceWindowCommand_1.DeregisterTaskFromMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeActivations(args, optionsOrCb, cb) {
        const command = new DescribeActivationsCommand_1.DescribeActivationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeAssociation(args, optionsOrCb, cb) {
        const command = new DescribeAssociationCommand_1.DescribeAssociationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeAssociationExecutions(args, optionsOrCb, cb) {
        const command = new DescribeAssociationExecutionsCommand_1.DescribeAssociationExecutionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeAssociationExecutionTargets(args, optionsOrCb, cb) {
        const command = new DescribeAssociationExecutionTargetsCommand_1.DescribeAssociationExecutionTargetsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeAutomationExecutions(args, optionsOrCb, cb) {
        const command = new DescribeAutomationExecutionsCommand_1.DescribeAutomationExecutionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeAutomationStepExecutions(args, optionsOrCb, cb) {
        const command = new DescribeAutomationStepExecutionsCommand_1.DescribeAutomationStepExecutionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeAvailablePatches(args, optionsOrCb, cb) {
        const command = new DescribeAvailablePatchesCommand_1.DescribeAvailablePatchesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDocument(args, optionsOrCb, cb) {
        const command = new DescribeDocumentCommand_1.DescribeDocumentCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDocumentPermission(args, optionsOrCb, cb) {
        const command = new DescribeDocumentPermissionCommand_1.DescribeDocumentPermissionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeEffectiveInstanceAssociations(args, optionsOrCb, cb) {
        const command = new DescribeEffectiveInstanceAssociationsCommand_1.DescribeEffectiveInstanceAssociationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeEffectivePatchesForPatchBaseline(args, optionsOrCb, cb) {
        const command = new DescribeEffectivePatchesForPatchBaselineCommand_1.DescribeEffectivePatchesForPatchBaselineCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeInstanceAssociationsStatus(args, optionsOrCb, cb) {
        const command = new DescribeInstanceAssociationsStatusCommand_1.DescribeInstanceAssociationsStatusCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeInstanceInformation(args, optionsOrCb, cb) {
        const command = new DescribeInstanceInformationCommand_1.DescribeInstanceInformationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeInstancePatches(args, optionsOrCb, cb) {
        const command = new DescribeInstancePatchesCommand_1.DescribeInstancePatchesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeInstancePatchStates(args, optionsOrCb, cb) {
        const command = new DescribeInstancePatchStatesCommand_1.DescribeInstancePatchStatesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeInstancePatchStatesForPatchGroup(args, optionsOrCb, cb) {
        const command = new DescribeInstancePatchStatesForPatchGroupCommand_1.DescribeInstancePatchStatesForPatchGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeInventoryDeletions(args, optionsOrCb, cb) {
        const command = new DescribeInventoryDeletionsCommand_1.DescribeInventoryDeletionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindowExecutions(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowExecutionsCommand_1.DescribeMaintenanceWindowExecutionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindowExecutionTaskInvocations(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowExecutionTaskInvocationsCommand_1.DescribeMaintenanceWindowExecutionTaskInvocationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindowExecutionTasks(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowExecutionTasksCommand_1.DescribeMaintenanceWindowExecutionTasksCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindows(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowsCommand_1.DescribeMaintenanceWindowsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindowSchedule(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowScheduleCommand_1.DescribeMaintenanceWindowScheduleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindowsForTarget(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowsForTargetCommand_1.DescribeMaintenanceWindowsForTargetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindowTargets(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowTargetsCommand_1.DescribeMaintenanceWindowTargetsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindowTasks(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowTasksCommand_1.DescribeMaintenanceWindowTasksCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeOpsItems(args, optionsOrCb, cb) {
        const command = new DescribeOpsItemsCommand_1.DescribeOpsItemsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeParameters(args, optionsOrCb, cb) {
        const command = new DescribeParametersCommand_1.DescribeParametersCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describePatchBaselines(args, optionsOrCb, cb) {
        const command = new DescribePatchBaselinesCommand_1.DescribePatchBaselinesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describePatchGroups(args, optionsOrCb, cb) {
        const command = new DescribePatchGroupsCommand_1.DescribePatchGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describePatchGroupState(args, optionsOrCb, cb) {
        const command = new DescribePatchGroupStateCommand_1.DescribePatchGroupStateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describePatchProperties(args, optionsOrCb, cb) {
        const command = new DescribePatchPropertiesCommand_1.DescribePatchPropertiesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeSessions(args, optionsOrCb, cb) {
        const command = new DescribeSessionsCommand_1.DescribeSessionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      disassociateOpsItemRelatedItem(args, optionsOrCb, cb) {
        const command = new DisassociateOpsItemRelatedItemCommand_1.DisassociateOpsItemRelatedItemCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getAutomationExecution(args, optionsOrCb, cb) {
        const command = new GetAutomationExecutionCommand_1.GetAutomationExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getCalendarState(args, optionsOrCb, cb) {
        const command = new GetCalendarStateCommand_1.GetCalendarStateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getCommandInvocation(args, optionsOrCb, cb) {
        const command = new GetCommandInvocationCommand_1.GetCommandInvocationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getConnectionStatus(args, optionsOrCb, cb) {
        const command = new GetConnectionStatusCommand_1.GetConnectionStatusCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getDefaultPatchBaseline(args, optionsOrCb, cb) {
        const command = new GetDefaultPatchBaselineCommand_1.GetDefaultPatchBaselineCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getDeployablePatchSnapshotForInstance(args, optionsOrCb, cb) {
        const command = new GetDeployablePatchSnapshotForInstanceCommand_1.GetDeployablePatchSnapshotForInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getDocument(args, optionsOrCb, cb) {
        const command = new GetDocumentCommand_1.GetDocumentCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getInventory(args, optionsOrCb, cb) {
        const command = new GetInventoryCommand_1.GetInventoryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getInventorySchema(args, optionsOrCb, cb) {
        const command = new GetInventorySchemaCommand_1.GetInventorySchemaCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new GetMaintenanceWindowCommand_1.GetMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getMaintenanceWindowExecution(args, optionsOrCb, cb) {
        const command = new GetMaintenanceWindowExecutionCommand_1.GetMaintenanceWindowExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getMaintenanceWindowExecutionTask(args, optionsOrCb, cb) {
        const command = new GetMaintenanceWindowExecutionTaskCommand_1.GetMaintenanceWindowExecutionTaskCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getMaintenanceWindowExecutionTaskInvocation(args, optionsOrCb, cb) {
        const command = new GetMaintenanceWindowExecutionTaskInvocationCommand_1.GetMaintenanceWindowExecutionTaskInvocationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getMaintenanceWindowTask(args, optionsOrCb, cb) {
        const command = new GetMaintenanceWindowTaskCommand_1.GetMaintenanceWindowTaskCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getOpsItem(args, optionsOrCb, cb) {
        const command = new GetOpsItemCommand_1.GetOpsItemCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getOpsMetadata(args, optionsOrCb, cb) {
        const command = new GetOpsMetadataCommand_1.GetOpsMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getOpsSummary(args, optionsOrCb, cb) {
        const command = new GetOpsSummaryCommand_1.GetOpsSummaryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getParameter(args, optionsOrCb, cb) {
        const command = new GetParameterCommand_1.GetParameterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getParameterHistory(args, optionsOrCb, cb) {
        const command = new GetParameterHistoryCommand_1.GetParameterHistoryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getParameters(args, optionsOrCb, cb) {
        const command = new GetParametersCommand_1.GetParametersCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getParametersByPath(args, optionsOrCb, cb) {
        const command = new GetParametersByPathCommand_1.GetParametersByPathCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getPatchBaseline(args, optionsOrCb, cb) {
        const command = new GetPatchBaselineCommand_1.GetPatchBaselineCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getPatchBaselineForPatchGroup(args, optionsOrCb, cb) {
        const command = new GetPatchBaselineForPatchGroupCommand_1.GetPatchBaselineForPatchGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getServiceSetting(args, optionsOrCb, cb) {
        const command = new GetServiceSettingCommand_1.GetServiceSettingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      labelParameterVersion(args, optionsOrCb, cb) {
        const command = new LabelParameterVersionCommand_1.LabelParameterVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAssociations(args, optionsOrCb, cb) {
        const command = new ListAssociationsCommand_1.ListAssociationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAssociationVersions(args, optionsOrCb, cb) {
        const command = new ListAssociationVersionsCommand_1.ListAssociationVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listCommandInvocations(args, optionsOrCb, cb) {
        const command = new ListCommandInvocationsCommand_1.ListCommandInvocationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listCommands(args, optionsOrCb, cb) {
        const command = new ListCommandsCommand_1.ListCommandsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listComplianceItems(args, optionsOrCb, cb) {
        const command = new ListComplianceItemsCommand_1.ListComplianceItemsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listComplianceSummaries(args, optionsOrCb, cb) {
        const command = new ListComplianceSummariesCommand_1.ListComplianceSummariesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listDocumentMetadataHistory(args, optionsOrCb, cb) {
        const command = new ListDocumentMetadataHistoryCommand_1.ListDocumentMetadataHistoryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listDocuments(args, optionsOrCb, cb) {
        const command = new ListDocumentsCommand_1.ListDocumentsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listDocumentVersions(args, optionsOrCb, cb) {
        const command = new ListDocumentVersionsCommand_1.ListDocumentVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listInventoryEntries(args, optionsOrCb, cb) {
        const command = new ListInventoryEntriesCommand_1.ListInventoryEntriesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listOpsItemEvents(args, optionsOrCb, cb) {
        const command = new ListOpsItemEventsCommand_1.ListOpsItemEventsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listOpsItemRelatedItems(args, optionsOrCb, cb) {
        const command = new ListOpsItemRelatedItemsCommand_1.ListOpsItemRelatedItemsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listOpsMetadata(args, optionsOrCb, cb) {
        const command = new ListOpsMetadataCommand_1.ListOpsMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listResourceComplianceSummaries(args, optionsOrCb, cb) {
        const command = new ListResourceComplianceSummariesCommand_1.ListResourceComplianceSummariesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listResourceDataSync(args, optionsOrCb, cb) {
        const command = new ListResourceDataSyncCommand_1.ListResourceDataSyncCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listTagsForResource(args, optionsOrCb, cb) {
        const command = new ListTagsForResourceCommand_1.ListTagsForResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      modifyDocumentPermission(args, optionsOrCb, cb) {
        const command = new ModifyDocumentPermissionCommand_1.ModifyDocumentPermissionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putComplianceItems(args, optionsOrCb, cb) {
        const command = new PutComplianceItemsCommand_1.PutComplianceItemsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putInventory(args, optionsOrCb, cb) {
        const command = new PutInventoryCommand_1.PutInventoryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putParameter(args, optionsOrCb, cb) {
        const command = new PutParameterCommand_1.PutParameterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      registerDefaultPatchBaseline(args, optionsOrCb, cb) {
        const command = new RegisterDefaultPatchBaselineCommand_1.RegisterDefaultPatchBaselineCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      registerPatchBaselineForPatchGroup(args, optionsOrCb, cb) {
        const command = new RegisterPatchBaselineForPatchGroupCommand_1.RegisterPatchBaselineForPatchGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      registerTargetWithMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new RegisterTargetWithMaintenanceWindowCommand_1.RegisterTargetWithMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      registerTaskWithMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new RegisterTaskWithMaintenanceWindowCommand_1.RegisterTaskWithMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      removeTagsFromResource(args, optionsOrCb, cb) {
        const command = new RemoveTagsFromResourceCommand_1.RemoveTagsFromResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      resetServiceSetting(args, optionsOrCb, cb) {
        const command = new ResetServiceSettingCommand_1.ResetServiceSettingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      resumeSession(args, optionsOrCb, cb) {
        const command = new ResumeSessionCommand_1.ResumeSessionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      sendAutomationSignal(args, optionsOrCb, cb) {
        const command = new SendAutomationSignalCommand_1.SendAutomationSignalCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      sendCommand(args, optionsOrCb, cb) {
        const command = new SendCommandCommand_1.SendCommandCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      startAssociationsOnce(args, optionsOrCb, cb) {
        const command = new StartAssociationsOnceCommand_1.StartAssociationsOnceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      startAutomationExecution(args, optionsOrCb, cb) {
        const command = new StartAutomationExecutionCommand_1.StartAutomationExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      startChangeRequestExecution(args, optionsOrCb, cb) {
        const command = new StartChangeRequestExecutionCommand_1.StartChangeRequestExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      startSession(args, optionsOrCb, cb) {
        const command = new StartSessionCommand_1.StartSessionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      stopAutomationExecution(args, optionsOrCb, cb) {
        const command = new StopAutomationExecutionCommand_1.StopAutomationExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      terminateSession(args, optionsOrCb, cb) {
        const command = new TerminateSessionCommand_1.TerminateSessionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      unlabelParameterVersion(args, optionsOrCb, cb) {
        const command = new UnlabelParameterVersionCommand_1.UnlabelParameterVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateAssociation(args, optionsOrCb, cb) {
        const command = new UpdateAssociationCommand_1.UpdateAssociationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateAssociationStatus(args, optionsOrCb, cb) {
        const command = new UpdateAssociationStatusCommand_1.UpdateAssociationStatusCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateDocument(args, optionsOrCb, cb) {
        const command = new UpdateDocumentCommand_1.UpdateDocumentCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateDocumentDefaultVersion(args, optionsOrCb, cb) {
        const command = new UpdateDocumentDefaultVersionCommand_1.UpdateDocumentDefaultVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateDocumentMetadata(args, optionsOrCb, cb) {
        const command = new UpdateDocumentMetadataCommand_1.UpdateDocumentMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new UpdateMaintenanceWindowCommand_1.UpdateMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateMaintenanceWindowTarget(args, optionsOrCb, cb) {
        const command = new UpdateMaintenanceWindowTargetCommand_1.UpdateMaintenanceWindowTargetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateMaintenanceWindowTask(args, optionsOrCb, cb) {
        const command = new UpdateMaintenanceWindowTaskCommand_1.UpdateMaintenanceWindowTaskCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateManagedInstanceRole(args, optionsOrCb, cb) {
        const command = new UpdateManagedInstanceRoleCommand_1.UpdateManagedInstanceRoleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateOpsItem(args, optionsOrCb, cb) {
        const command = new UpdateOpsItemCommand_1.UpdateOpsItemCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateOpsMetadata(args, optionsOrCb, cb) {
        const command = new UpdateOpsMetadataCommand_1.UpdateOpsMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updatePatchBaseline(args, optionsOrCb, cb) {
        const command = new UpdatePatchBaselineCommand_1.UpdatePatchBaselineCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateResourceDataSync(args, optionsOrCb, cb) {
        const command = new UpdateResourceDataSyncCommand_1.UpdateResourceDataSyncCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateServiceSetting(args, optionsOrCb, cb) {
        const command = new UpdateServiceSettingCommand_1.UpdateServiceSettingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.SSM = SSM;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/index.js
var require_commands4 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_AddTagsToResourceCommand(), exports);
    tslib_1.__exportStar(require_AssociateOpsItemRelatedItemCommand(), exports);
    tslib_1.__exportStar(require_CancelCommandCommand(), exports);
    tslib_1.__exportStar(require_CancelMaintenanceWindowExecutionCommand(), exports);
    tslib_1.__exportStar(require_CreateActivationCommand(), exports);
    tslib_1.__exportStar(require_CreateAssociationBatchCommand(), exports);
    tslib_1.__exportStar(require_CreateAssociationCommand(), exports);
    tslib_1.__exportStar(require_CreateDocumentCommand(), exports);
    tslib_1.__exportStar(require_CreateMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_CreateOpsItemCommand(), exports);
    tslib_1.__exportStar(require_CreateOpsMetadataCommand(), exports);
    tslib_1.__exportStar(require_CreatePatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_CreateResourceDataSyncCommand(), exports);
    tslib_1.__exportStar(require_DeleteActivationCommand(), exports);
    tslib_1.__exportStar(require_DeleteAssociationCommand(), exports);
    tslib_1.__exportStar(require_DeleteDocumentCommand(), exports);
    tslib_1.__exportStar(require_DeleteInventoryCommand(), exports);
    tslib_1.__exportStar(require_DeleteMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_DeleteOpsMetadataCommand(), exports);
    tslib_1.__exportStar(require_DeleteParameterCommand(), exports);
    tslib_1.__exportStar(require_DeleteParametersCommand(), exports);
    tslib_1.__exportStar(require_DeletePatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_DeleteResourceDataSyncCommand(), exports);
    tslib_1.__exportStar(require_DeregisterManagedInstanceCommand(), exports);
    tslib_1.__exportStar(require_DeregisterPatchBaselineForPatchGroupCommand(), exports);
    tslib_1.__exportStar(require_DeregisterTargetFromMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_DeregisterTaskFromMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_DescribeActivationsCommand(), exports);
    tslib_1.__exportStar(require_DescribeAssociationCommand(), exports);
    tslib_1.__exportStar(require_DescribeAssociationExecutionTargetsCommand(), exports);
    tslib_1.__exportStar(require_DescribeAssociationExecutionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeAutomationExecutionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeAutomationStepExecutionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeAvailablePatchesCommand(), exports);
    tslib_1.__exportStar(require_DescribeDocumentCommand(), exports);
    tslib_1.__exportStar(require_DescribeDocumentPermissionCommand(), exports);
    tslib_1.__exportStar(require_DescribeEffectiveInstanceAssociationsCommand(), exports);
    tslib_1.__exportStar(require_DescribeEffectivePatchesForPatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_DescribeInstanceAssociationsStatusCommand(), exports);
    tslib_1.__exportStar(require_DescribeInstanceInformationCommand(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchStatesCommand(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchStatesForPatchGroupCommand(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchesCommand(), exports);
    tslib_1.__exportStar(require_DescribeInventoryDeletionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionTaskInvocationsCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionTasksCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowScheduleCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowTargetsCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowTasksCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowsCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowsForTargetCommand(), exports);
    tslib_1.__exportStar(require_DescribeOpsItemsCommand(), exports);
    tslib_1.__exportStar(require_DescribeParametersCommand(), exports);
    tslib_1.__exportStar(require_DescribePatchBaselinesCommand(), exports);
    tslib_1.__exportStar(require_DescribePatchGroupStateCommand(), exports);
    tslib_1.__exportStar(require_DescribePatchGroupsCommand(), exports);
    tslib_1.__exportStar(require_DescribePatchPropertiesCommand(), exports);
    tslib_1.__exportStar(require_DescribeSessionsCommand(), exports);
    tslib_1.__exportStar(require_DisassociateOpsItemRelatedItemCommand(), exports);
    tslib_1.__exportStar(require_GetAutomationExecutionCommand(), exports);
    tslib_1.__exportStar(require_GetCalendarStateCommand(), exports);
    tslib_1.__exportStar(require_GetCommandInvocationCommand(), exports);
    tslib_1.__exportStar(require_GetConnectionStatusCommand(), exports);
    tslib_1.__exportStar(require_GetDefaultPatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_GetDeployablePatchSnapshotForInstanceCommand(), exports);
    tslib_1.__exportStar(require_GetDocumentCommand(), exports);
    tslib_1.__exportStar(require_GetInventoryCommand(), exports);
    tslib_1.__exportStar(require_GetInventorySchemaCommand(), exports);
    tslib_1.__exportStar(require_GetMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_GetMaintenanceWindowExecutionCommand(), exports);
    tslib_1.__exportStar(require_GetMaintenanceWindowExecutionTaskCommand(), exports);
    tslib_1.__exportStar(require_GetMaintenanceWindowExecutionTaskInvocationCommand(), exports);
    tslib_1.__exportStar(require_GetMaintenanceWindowTaskCommand(), exports);
    tslib_1.__exportStar(require_GetOpsItemCommand(), exports);
    tslib_1.__exportStar(require_GetOpsMetadataCommand(), exports);
    tslib_1.__exportStar(require_GetOpsSummaryCommand(), exports);
    tslib_1.__exportStar(require_GetParameterCommand(), exports);
    tslib_1.__exportStar(require_GetParameterHistoryCommand(), exports);
    tslib_1.__exportStar(require_GetParametersByPathCommand(), exports);
    tslib_1.__exportStar(require_GetParametersCommand(), exports);
    tslib_1.__exportStar(require_GetPatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_GetPatchBaselineForPatchGroupCommand(), exports);
    tslib_1.__exportStar(require_GetServiceSettingCommand(), exports);
    tslib_1.__exportStar(require_LabelParameterVersionCommand(), exports);
    tslib_1.__exportStar(require_ListAssociationVersionsCommand(), exports);
    tslib_1.__exportStar(require_ListAssociationsCommand(), exports);
    tslib_1.__exportStar(require_ListCommandInvocationsCommand(), exports);
    tslib_1.__exportStar(require_ListCommandsCommand(), exports);
    tslib_1.__exportStar(require_ListComplianceItemsCommand(), exports);
    tslib_1.__exportStar(require_ListComplianceSummariesCommand(), exports);
    tslib_1.__exportStar(require_ListDocumentMetadataHistoryCommand(), exports);
    tslib_1.__exportStar(require_ListDocumentVersionsCommand(), exports);
    tslib_1.__exportStar(require_ListDocumentsCommand(), exports);
    tslib_1.__exportStar(require_ListInventoryEntriesCommand(), exports);
    tslib_1.__exportStar(require_ListOpsItemEventsCommand(), exports);
    tslib_1.__exportStar(require_ListOpsItemRelatedItemsCommand(), exports);
    tslib_1.__exportStar(require_ListOpsMetadataCommand(), exports);
    tslib_1.__exportStar(require_ListResourceComplianceSummariesCommand(), exports);
    tslib_1.__exportStar(require_ListResourceDataSyncCommand(), exports);
    tslib_1.__exportStar(require_ListTagsForResourceCommand(), exports);
    tslib_1.__exportStar(require_ModifyDocumentPermissionCommand(), exports);
    tslib_1.__exportStar(require_PutComplianceItemsCommand(), exports);
    tslib_1.__exportStar(require_PutInventoryCommand(), exports);
    tslib_1.__exportStar(require_PutParameterCommand(), exports);
    tslib_1.__exportStar(require_RegisterDefaultPatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_RegisterPatchBaselineForPatchGroupCommand(), exports);
    tslib_1.__exportStar(require_RegisterTargetWithMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_RegisterTaskWithMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_RemoveTagsFromResourceCommand(), exports);
    tslib_1.__exportStar(require_ResetServiceSettingCommand(), exports);
    tslib_1.__exportStar(require_ResumeSessionCommand(), exports);
    tslib_1.__exportStar(require_SendAutomationSignalCommand(), exports);
    tslib_1.__exportStar(require_SendCommandCommand(), exports);
    tslib_1.__exportStar(require_StartAssociationsOnceCommand(), exports);
    tslib_1.__exportStar(require_StartAutomationExecutionCommand(), exports);
    tslib_1.__exportStar(require_StartChangeRequestExecutionCommand(), exports);
    tslib_1.__exportStar(require_StartSessionCommand(), exports);
    tslib_1.__exportStar(require_StopAutomationExecutionCommand(), exports);
    tslib_1.__exportStar(require_TerminateSessionCommand(), exports);
    tslib_1.__exportStar(require_UnlabelParameterVersionCommand(), exports);
    tslib_1.__exportStar(require_UpdateAssociationCommand(), exports);
    tslib_1.__exportStar(require_UpdateAssociationStatusCommand(), exports);
    tslib_1.__exportStar(require_UpdateDocumentCommand(), exports);
    tslib_1.__exportStar(require_UpdateDocumentDefaultVersionCommand(), exports);
    tslib_1.__exportStar(require_UpdateDocumentMetadataCommand(), exports);
    tslib_1.__exportStar(require_UpdateMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_UpdateMaintenanceWindowTargetCommand(), exports);
    tslib_1.__exportStar(require_UpdateMaintenanceWindowTaskCommand(), exports);
    tslib_1.__exportStar(require_UpdateManagedInstanceRoleCommand(), exports);
    tslib_1.__exportStar(require_UpdateOpsItemCommand(), exports);
    tslib_1.__exportStar(require_UpdateOpsMetadataCommand(), exports);
    tslib_1.__exportStar(require_UpdatePatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_UpdateResourceDataSyncCommand(), exports);
    tslib_1.__exportStar(require_UpdateServiceSettingCommand(), exports);
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/models/index.js
var require_models4 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_models_04(), exports);
    tslib_1.__exportStar(require_models_1(), exports);
    tslib_1.__exportStar(require_models_2(), exports);
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeActivationsPaginator.js
var require_DescribeActivationsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeActivationsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeActivations = void 0;
    var DescribeActivationsCommand_1 = require_DescribeActivationsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeActivationsCommand_1.DescribeActivationsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeActivations(input, ...args);
    };
    async function* paginateDescribeActivations(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeActivations = paginateDescribeActivations;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAssociationExecutionTargetsPaginator.js
var require_DescribeAssociationExecutionTargetsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAssociationExecutionTargetsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeAssociationExecutionTargets = void 0;
    var DescribeAssociationExecutionTargetsCommand_1 = require_DescribeAssociationExecutionTargetsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeAssociationExecutionTargetsCommand_1.DescribeAssociationExecutionTargetsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeAssociationExecutionTargets(input, ...args);
    };
    async function* paginateDescribeAssociationExecutionTargets(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeAssociationExecutionTargets = paginateDescribeAssociationExecutionTargets;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAssociationExecutionsPaginator.js
var require_DescribeAssociationExecutionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAssociationExecutionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeAssociationExecutions = void 0;
    var DescribeAssociationExecutionsCommand_1 = require_DescribeAssociationExecutionsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeAssociationExecutionsCommand_1.DescribeAssociationExecutionsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeAssociationExecutions(input, ...args);
    };
    async function* paginateDescribeAssociationExecutions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeAssociationExecutions = paginateDescribeAssociationExecutions;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAutomationExecutionsPaginator.js
var require_DescribeAutomationExecutionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAutomationExecutionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeAutomationExecutions = void 0;
    var DescribeAutomationExecutionsCommand_1 = require_DescribeAutomationExecutionsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeAutomationExecutionsCommand_1.DescribeAutomationExecutionsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeAutomationExecutions(input, ...args);
    };
    async function* paginateDescribeAutomationExecutions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeAutomationExecutions = paginateDescribeAutomationExecutions;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAutomationStepExecutionsPaginator.js
var require_DescribeAutomationStepExecutionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAutomationStepExecutionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeAutomationStepExecutions = void 0;
    var DescribeAutomationStepExecutionsCommand_1 = require_DescribeAutomationStepExecutionsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeAutomationStepExecutionsCommand_1.DescribeAutomationStepExecutionsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeAutomationStepExecutions(input, ...args);
    };
    async function* paginateDescribeAutomationStepExecutions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeAutomationStepExecutions = paginateDescribeAutomationStepExecutions;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAvailablePatchesPaginator.js
var require_DescribeAvailablePatchesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAvailablePatchesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeAvailablePatches = void 0;
    var DescribeAvailablePatchesCommand_1 = require_DescribeAvailablePatchesCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeAvailablePatchesCommand_1.DescribeAvailablePatchesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeAvailablePatches(input, ...args);
    };
    async function* paginateDescribeAvailablePatches(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeAvailablePatches = paginateDescribeAvailablePatches;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeEffectiveInstanceAssociationsPaginator.js
var require_DescribeEffectiveInstanceAssociationsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeEffectiveInstanceAssociationsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeEffectiveInstanceAssociations = void 0;
    var DescribeEffectiveInstanceAssociationsCommand_1 = require_DescribeEffectiveInstanceAssociationsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeEffectiveInstanceAssociationsCommand_1.DescribeEffectiveInstanceAssociationsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeEffectiveInstanceAssociations(input, ...args);
    };
    async function* paginateDescribeEffectiveInstanceAssociations(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeEffectiveInstanceAssociations = paginateDescribeEffectiveInstanceAssociations;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeEffectivePatchesForPatchBaselinePaginator.js
var require_DescribeEffectivePatchesForPatchBaselinePaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeEffectivePatchesForPatchBaselinePaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeEffectivePatchesForPatchBaseline = void 0;
    var DescribeEffectivePatchesForPatchBaselineCommand_1 = require_DescribeEffectivePatchesForPatchBaselineCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeEffectivePatchesForPatchBaselineCommand_1.DescribeEffectivePatchesForPatchBaselineCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeEffectivePatchesForPatchBaseline(input, ...args);
    };
    async function* paginateDescribeEffectivePatchesForPatchBaseline(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeEffectivePatchesForPatchBaseline = paginateDescribeEffectivePatchesForPatchBaseline;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstanceAssociationsStatusPaginator.js
var require_DescribeInstanceAssociationsStatusPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstanceAssociationsStatusPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInstanceAssociationsStatus = void 0;
    var DescribeInstanceAssociationsStatusCommand_1 = require_DescribeInstanceAssociationsStatusCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeInstanceAssociationsStatusCommand_1.DescribeInstanceAssociationsStatusCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeInstanceAssociationsStatus(input, ...args);
    };
    async function* paginateDescribeInstanceAssociationsStatus(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeInstanceAssociationsStatus = paginateDescribeInstanceAssociationsStatus;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstanceInformationPaginator.js
var require_DescribeInstanceInformationPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstanceInformationPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInstanceInformation = void 0;
    var DescribeInstanceInformationCommand_1 = require_DescribeInstanceInformationCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeInstanceInformationCommand_1.DescribeInstanceInformationCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeInstanceInformation(input, ...args);
    };
    async function* paginateDescribeInstanceInformation(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeInstanceInformation = paginateDescribeInstanceInformation;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/Interfaces.js
var require_Interfaces3 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchStatesForPatchGroupPaginator.js
var require_DescribeInstancePatchStatesForPatchGroupPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchStatesForPatchGroupPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInstancePatchStatesForPatchGroup = void 0;
    var DescribeInstancePatchStatesForPatchGroupCommand_1 = require_DescribeInstancePatchStatesForPatchGroupCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeInstancePatchStatesForPatchGroupCommand_1.DescribeInstancePatchStatesForPatchGroupCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeInstancePatchStatesForPatchGroup(input, ...args);
    };
    async function* paginateDescribeInstancePatchStatesForPatchGroup(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeInstancePatchStatesForPatchGroup = paginateDescribeInstancePatchStatesForPatchGroup;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchStatesPaginator.js
var require_DescribeInstancePatchStatesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchStatesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInstancePatchStates = void 0;
    var DescribeInstancePatchStatesCommand_1 = require_DescribeInstancePatchStatesCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeInstancePatchStatesCommand_1.DescribeInstancePatchStatesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeInstancePatchStates(input, ...args);
    };
    async function* paginateDescribeInstancePatchStates(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeInstancePatchStates = paginateDescribeInstancePatchStates;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchesPaginator.js
var require_DescribeInstancePatchesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInstancePatches = void 0;
    var DescribeInstancePatchesCommand_1 = require_DescribeInstancePatchesCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeInstancePatchesCommand_1.DescribeInstancePatchesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeInstancePatches(input, ...args);
    };
    async function* paginateDescribeInstancePatches(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeInstancePatches = paginateDescribeInstancePatches;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInventoryDeletionsPaginator.js
var require_DescribeInventoryDeletionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInventoryDeletionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInventoryDeletions = void 0;
    var DescribeInventoryDeletionsCommand_1 = require_DescribeInventoryDeletionsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeInventoryDeletionsCommand_1.DescribeInventoryDeletionsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeInventoryDeletions(input, ...args);
    };
    async function* paginateDescribeInventoryDeletions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeInventoryDeletions = paginateDescribeInventoryDeletions;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionTaskInvocationsPaginator.js
var require_DescribeMaintenanceWindowExecutionTaskInvocationsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionTaskInvocationsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowExecutionTaskInvocations = void 0;
    var DescribeMaintenanceWindowExecutionTaskInvocationsCommand_1 = require_DescribeMaintenanceWindowExecutionTaskInvocationsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowExecutionTaskInvocationsCommand_1.DescribeMaintenanceWindowExecutionTaskInvocationsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeMaintenanceWindowExecutionTaskInvocations(input, ...args);
    };
    async function* paginateDescribeMaintenanceWindowExecutionTaskInvocations(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindowExecutionTaskInvocations = paginateDescribeMaintenanceWindowExecutionTaskInvocations;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionTasksPaginator.js
var require_DescribeMaintenanceWindowExecutionTasksPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionTasksPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowExecutionTasks = void 0;
    var DescribeMaintenanceWindowExecutionTasksCommand_1 = require_DescribeMaintenanceWindowExecutionTasksCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowExecutionTasksCommand_1.DescribeMaintenanceWindowExecutionTasksCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeMaintenanceWindowExecutionTasks(input, ...args);
    };
    async function* paginateDescribeMaintenanceWindowExecutionTasks(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindowExecutionTasks = paginateDescribeMaintenanceWindowExecutionTasks;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionsPaginator.js
var require_DescribeMaintenanceWindowExecutionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowExecutions = void 0;
    var DescribeMaintenanceWindowExecutionsCommand_1 = require_DescribeMaintenanceWindowExecutionsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowExecutionsCommand_1.DescribeMaintenanceWindowExecutionsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeMaintenanceWindowExecutions(input, ...args);
    };
    async function* paginateDescribeMaintenanceWindowExecutions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindowExecutions = paginateDescribeMaintenanceWindowExecutions;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowSchedulePaginator.js
var require_DescribeMaintenanceWindowSchedulePaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowSchedulePaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowSchedule = void 0;
    var DescribeMaintenanceWindowScheduleCommand_1 = require_DescribeMaintenanceWindowScheduleCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowScheduleCommand_1.DescribeMaintenanceWindowScheduleCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeMaintenanceWindowSchedule(input, ...args);
    };
    async function* paginateDescribeMaintenanceWindowSchedule(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindowSchedule = paginateDescribeMaintenanceWindowSchedule;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowTargetsPaginator.js
var require_DescribeMaintenanceWindowTargetsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowTargetsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowTargets = void 0;
    var DescribeMaintenanceWindowTargetsCommand_1 = require_DescribeMaintenanceWindowTargetsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowTargetsCommand_1.DescribeMaintenanceWindowTargetsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeMaintenanceWindowTargets(input, ...args);
    };
    async function* paginateDescribeMaintenanceWindowTargets(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindowTargets = paginateDescribeMaintenanceWindowTargets;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowTasksPaginator.js
var require_DescribeMaintenanceWindowTasksPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowTasksPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowTasks = void 0;
    var DescribeMaintenanceWindowTasksCommand_1 = require_DescribeMaintenanceWindowTasksCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowTasksCommand_1.DescribeMaintenanceWindowTasksCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeMaintenanceWindowTasks(input, ...args);
    };
    async function* paginateDescribeMaintenanceWindowTasks(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindowTasks = paginateDescribeMaintenanceWindowTasks;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowsForTargetPaginator.js
var require_DescribeMaintenanceWindowsForTargetPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowsForTargetPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowsForTarget = void 0;
    var DescribeMaintenanceWindowsForTargetCommand_1 = require_DescribeMaintenanceWindowsForTargetCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowsForTargetCommand_1.DescribeMaintenanceWindowsForTargetCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeMaintenanceWindowsForTarget(input, ...args);
    };
    async function* paginateDescribeMaintenanceWindowsForTarget(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindowsForTarget = paginateDescribeMaintenanceWindowsForTarget;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowsPaginator.js
var require_DescribeMaintenanceWindowsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindows = void 0;
    var DescribeMaintenanceWindowsCommand_1 = require_DescribeMaintenanceWindowsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowsCommand_1.DescribeMaintenanceWindowsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeMaintenanceWindows(input, ...args);
    };
    async function* paginateDescribeMaintenanceWindows(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindows = paginateDescribeMaintenanceWindows;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeOpsItemsPaginator.js
var require_DescribeOpsItemsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeOpsItemsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeOpsItems = void 0;
    var DescribeOpsItemsCommand_1 = require_DescribeOpsItemsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeOpsItemsCommand_1.DescribeOpsItemsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeOpsItems(input, ...args);
    };
    async function* paginateDescribeOpsItems(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeOpsItems = paginateDescribeOpsItems;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeParametersPaginator.js
var require_DescribeParametersPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeParametersPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeParameters = void 0;
    var DescribeParametersCommand_1 = require_DescribeParametersCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeParametersCommand_1.DescribeParametersCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeParameters(input, ...args);
    };
    async function* paginateDescribeParameters(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeParameters = paginateDescribeParameters;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchBaselinesPaginator.js
var require_DescribePatchBaselinesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchBaselinesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribePatchBaselines = void 0;
    var DescribePatchBaselinesCommand_1 = require_DescribePatchBaselinesCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribePatchBaselinesCommand_1.DescribePatchBaselinesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describePatchBaselines(input, ...args);
    };
    async function* paginateDescribePatchBaselines(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribePatchBaselines = paginateDescribePatchBaselines;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchGroupsPaginator.js
var require_DescribePatchGroupsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchGroupsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribePatchGroups = void 0;
    var DescribePatchGroupsCommand_1 = require_DescribePatchGroupsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribePatchGroupsCommand_1.DescribePatchGroupsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describePatchGroups(input, ...args);
    };
    async function* paginateDescribePatchGroups(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribePatchGroups = paginateDescribePatchGroups;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchPropertiesPaginator.js
var require_DescribePatchPropertiesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchPropertiesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribePatchProperties = void 0;
    var DescribePatchPropertiesCommand_1 = require_DescribePatchPropertiesCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribePatchPropertiesCommand_1.DescribePatchPropertiesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describePatchProperties(input, ...args);
    };
    async function* paginateDescribePatchProperties(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribePatchProperties = paginateDescribePatchProperties;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeSessionsPaginator.js
var require_DescribeSessionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeSessionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeSessions = void 0;
    var DescribeSessionsCommand_1 = require_DescribeSessionsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeSessionsCommand_1.DescribeSessionsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeSessions(input, ...args);
    };
    async function* paginateDescribeSessions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeSessions = paginateDescribeSessions;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetInventoryPaginator.js
var require_GetInventoryPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetInventoryPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetInventory = void 0;
    var GetInventoryCommand_1 = require_GetInventoryCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new GetInventoryCommand_1.GetInventoryCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.getInventory(input, ...args);
    };
    async function* paginateGetInventory(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateGetInventory = paginateGetInventory;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetInventorySchemaPaginator.js
var require_GetInventorySchemaPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetInventorySchemaPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetInventorySchema = void 0;
    var GetInventorySchemaCommand_1 = require_GetInventorySchemaCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new GetInventorySchemaCommand_1.GetInventorySchemaCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.getInventorySchema(input, ...args);
    };
    async function* paginateGetInventorySchema(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateGetInventorySchema = paginateGetInventorySchema;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetOpsSummaryPaginator.js
var require_GetOpsSummaryPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetOpsSummaryPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetOpsSummary = void 0;
    var GetOpsSummaryCommand_1 = require_GetOpsSummaryCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new GetOpsSummaryCommand_1.GetOpsSummaryCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.getOpsSummary(input, ...args);
    };
    async function* paginateGetOpsSummary(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateGetOpsSummary = paginateGetOpsSummary;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetParameterHistoryPaginator.js
var require_GetParameterHistoryPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetParameterHistoryPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetParameterHistory = void 0;
    var GetParameterHistoryCommand_1 = require_GetParameterHistoryCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new GetParameterHistoryCommand_1.GetParameterHistoryCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.getParameterHistory(input, ...args);
    };
    async function* paginateGetParameterHistory(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateGetParameterHistory = paginateGetParameterHistory;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetParametersByPathPaginator.js
var require_GetParametersByPathPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetParametersByPathPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetParametersByPath = void 0;
    var GetParametersByPathCommand_1 = require_GetParametersByPathCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new GetParametersByPathCommand_1.GetParametersByPathCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.getParametersByPath(input, ...args);
    };
    async function* paginateGetParametersByPath(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateGetParametersByPath = paginateGetParametersByPath;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListAssociationVersionsPaginator.js
var require_ListAssociationVersionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListAssociationVersionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAssociationVersions = void 0;
    var ListAssociationVersionsCommand_1 = require_ListAssociationVersionsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAssociationVersionsCommand_1.ListAssociationVersionsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAssociationVersions(input, ...args);
    };
    async function* paginateListAssociationVersions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAssociationVersions = paginateListAssociationVersions;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListAssociationsPaginator.js
var require_ListAssociationsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListAssociationsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAssociations = void 0;
    var ListAssociationsCommand_1 = require_ListAssociationsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAssociationsCommand_1.ListAssociationsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAssociations(input, ...args);
    };
    async function* paginateListAssociations(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAssociations = paginateListAssociations;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListCommandInvocationsPaginator.js
var require_ListCommandInvocationsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListCommandInvocationsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListCommandInvocations = void 0;
    var ListCommandInvocationsCommand_1 = require_ListCommandInvocationsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListCommandInvocationsCommand_1.ListCommandInvocationsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listCommandInvocations(input, ...args);
    };
    async function* paginateListCommandInvocations(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListCommandInvocations = paginateListCommandInvocations;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListCommandsPaginator.js
var require_ListCommandsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListCommandsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListCommands = void 0;
    var ListCommandsCommand_1 = require_ListCommandsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListCommandsCommand_1.ListCommandsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listCommands(input, ...args);
    };
    async function* paginateListCommands(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListCommands = paginateListCommands;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListComplianceItemsPaginator.js
var require_ListComplianceItemsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListComplianceItemsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListComplianceItems = void 0;
    var ListComplianceItemsCommand_1 = require_ListComplianceItemsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListComplianceItemsCommand_1.ListComplianceItemsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listComplianceItems(input, ...args);
    };
    async function* paginateListComplianceItems(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListComplianceItems = paginateListComplianceItems;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListComplianceSummariesPaginator.js
var require_ListComplianceSummariesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListComplianceSummariesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListComplianceSummaries = void 0;
    var ListComplianceSummariesCommand_1 = require_ListComplianceSummariesCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListComplianceSummariesCommand_1.ListComplianceSummariesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listComplianceSummaries(input, ...args);
    };
    async function* paginateListComplianceSummaries(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListComplianceSummaries = paginateListComplianceSummaries;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListDocumentVersionsPaginator.js
var require_ListDocumentVersionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListDocumentVersionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListDocumentVersions = void 0;
    var ListDocumentVersionsCommand_1 = require_ListDocumentVersionsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListDocumentVersionsCommand_1.ListDocumentVersionsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listDocumentVersions(input, ...args);
    };
    async function* paginateListDocumentVersions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListDocumentVersions = paginateListDocumentVersions;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListDocumentsPaginator.js
var require_ListDocumentsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListDocumentsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListDocuments = void 0;
    var ListDocumentsCommand_1 = require_ListDocumentsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListDocumentsCommand_1.ListDocumentsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listDocuments(input, ...args);
    };
    async function* paginateListDocuments(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListDocuments = paginateListDocuments;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsItemEventsPaginator.js
var require_ListOpsItemEventsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsItemEventsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListOpsItemEvents = void 0;
    var ListOpsItemEventsCommand_1 = require_ListOpsItemEventsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListOpsItemEventsCommand_1.ListOpsItemEventsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listOpsItemEvents(input, ...args);
    };
    async function* paginateListOpsItemEvents(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListOpsItemEvents = paginateListOpsItemEvents;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsItemRelatedItemsPaginator.js
var require_ListOpsItemRelatedItemsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsItemRelatedItemsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListOpsItemRelatedItems = void 0;
    var ListOpsItemRelatedItemsCommand_1 = require_ListOpsItemRelatedItemsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListOpsItemRelatedItemsCommand_1.ListOpsItemRelatedItemsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listOpsItemRelatedItems(input, ...args);
    };
    async function* paginateListOpsItemRelatedItems(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListOpsItemRelatedItems = paginateListOpsItemRelatedItems;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsMetadataPaginator.js
var require_ListOpsMetadataPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsMetadataPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListOpsMetadata = void 0;
    var ListOpsMetadataCommand_1 = require_ListOpsMetadataCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListOpsMetadataCommand_1.ListOpsMetadataCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listOpsMetadata(input, ...args);
    };
    async function* paginateListOpsMetadata(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListOpsMetadata = paginateListOpsMetadata;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListResourceComplianceSummariesPaginator.js
var require_ListResourceComplianceSummariesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListResourceComplianceSummariesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListResourceComplianceSummaries = void 0;
    var ListResourceComplianceSummariesCommand_1 = require_ListResourceComplianceSummariesCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListResourceComplianceSummariesCommand_1.ListResourceComplianceSummariesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listResourceComplianceSummaries(input, ...args);
    };
    async function* paginateListResourceComplianceSummaries(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListResourceComplianceSummaries = paginateListResourceComplianceSummaries;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListResourceDataSyncPaginator.js
var require_ListResourceDataSyncPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListResourceDataSyncPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListResourceDataSync = void 0;
    var ListResourceDataSyncCommand_1 = require_ListResourceDataSyncCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListResourceDataSyncCommand_1.ListResourceDataSyncCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listResourceDataSync(input, ...args);
    };
    async function* paginateListResourceDataSync(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListResourceDataSync = paginateListResourceDataSync;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/index.js
var require_pagination3 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_DescribeActivationsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeAssociationExecutionTargetsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeAssociationExecutionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeAutomationExecutionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeAutomationStepExecutionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeAvailablePatchesPaginator(), exports);
    tslib_1.__exportStar(require_DescribeEffectiveInstanceAssociationsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeEffectivePatchesForPatchBaselinePaginator(), exports);
    tslib_1.__exportStar(require_DescribeInstanceAssociationsStatusPaginator(), exports);
    tslib_1.__exportStar(require_DescribeInstanceInformationPaginator(), exports);
    tslib_1.__exportStar(require_Interfaces3(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchStatesForPatchGroupPaginator(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchStatesPaginator(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchesPaginator(), exports);
    tslib_1.__exportStar(require_DescribeInventoryDeletionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionTaskInvocationsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionTasksPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowSchedulePaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowTargetsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowTasksPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowsForTargetPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeOpsItemsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeParametersPaginator(), exports);
    tslib_1.__exportStar(require_DescribePatchBaselinesPaginator(), exports);
    tslib_1.__exportStar(require_DescribePatchGroupsPaginator(), exports);
    tslib_1.__exportStar(require_DescribePatchPropertiesPaginator(), exports);
    tslib_1.__exportStar(require_DescribeSessionsPaginator(), exports);
    tslib_1.__exportStar(require_GetInventoryPaginator(), exports);
    tslib_1.__exportStar(require_GetInventorySchemaPaginator(), exports);
    tslib_1.__exportStar(require_GetOpsSummaryPaginator(), exports);
    tslib_1.__exportStar(require_GetParameterHistoryPaginator(), exports);
    tslib_1.__exportStar(require_GetParametersByPathPaginator(), exports);
    tslib_1.__exportStar(require_ListAssociationVersionsPaginator(), exports);
    tslib_1.__exportStar(require_ListAssociationsPaginator(), exports);
    tslib_1.__exportStar(require_ListCommandInvocationsPaginator(), exports);
    tslib_1.__exportStar(require_ListCommandsPaginator(), exports);
    tslib_1.__exportStar(require_ListComplianceItemsPaginator(), exports);
    tslib_1.__exportStar(require_ListComplianceSummariesPaginator(), exports);
    tslib_1.__exportStar(require_ListDocumentVersionsPaginator(), exports);
    tslib_1.__exportStar(require_ListDocumentsPaginator(), exports);
    tslib_1.__exportStar(require_ListOpsItemEventsPaginator(), exports);
    tslib_1.__exportStar(require_ListOpsItemRelatedItemsPaginator(), exports);
    tslib_1.__exportStar(require_ListOpsMetadataPaginator(), exports);
    tslib_1.__exportStar(require_ListResourceComplianceSummariesPaginator(), exports);
    tslib_1.__exportStar(require_ListResourceDataSyncPaginator(), exports);
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js
var require_sleep = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sleep = void 0;
    var sleep = (seconds) => {
      return new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
    };
    exports.sleep = sleep;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js
var require_waiter = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkExceptions = exports.WaiterState = exports.waiterServiceDefaults = void 0;
    exports.waiterServiceDefaults = {
      minDelay: 2,
      maxDelay: 120
    };
    var WaiterState;
    (function(WaiterState2) {
      WaiterState2["ABORTED"] = "ABORTED";
      WaiterState2["FAILURE"] = "FAILURE";
      WaiterState2["SUCCESS"] = "SUCCESS";
      WaiterState2["RETRY"] = "RETRY";
      WaiterState2["TIMEOUT"] = "TIMEOUT";
    })(WaiterState = exports.WaiterState || (exports.WaiterState = {}));
    var checkExceptions = (result) => {
      if (result.state === WaiterState.ABORTED) {
        const abortError = new Error(`${JSON.stringify({
          ...result,
          reason: "Request was aborted"
        })}`);
        abortError.name = "AbortError";
        throw abortError;
      } else if (result.state === WaiterState.TIMEOUT) {
        const timeoutError = new Error(`${JSON.stringify({
          ...result,
          reason: "Waiter has timed out"
        })}`);
        timeoutError.name = "TimeoutError";
        throw timeoutError;
      } else if (result.state !== WaiterState.SUCCESS) {
        throw new Error(`${JSON.stringify({ result })}`);
      }
      return result;
    };
    exports.checkExceptions = checkExceptions;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js
var require_poller = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.runPolling = void 0;
    var sleep_1 = require_sleep();
    var waiter_1 = require_waiter();
    var exponentialBackoffWithJitter = (minDelay, maxDelay, attemptCeiling, attempt) => {
      if (attempt > attemptCeiling)
        return maxDelay;
      const delay = minDelay * 2 ** (attempt - 1);
      return randomInRange(minDelay, delay);
    };
    var randomInRange = (min, max) => min + Math.random() * (max - min);
    var runPolling = async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) => {
      var _a;
      const { state } = await acceptorChecks(client, input);
      if (state !== waiter_1.WaiterState.RETRY) {
        return { state };
      }
      let currentAttempt = 1;
      const waitUntil = Date.now() + maxWaitTime * 1e3;
      const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
      while (true) {
        if (((_a = abortController === null || abortController === void 0 ? void 0 : abortController.signal) === null || _a === void 0 ? void 0 : _a.aborted) || (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted)) {
          return { state: waiter_1.WaiterState.ABORTED };
        }
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1e3 > waitUntil) {
          return { state: waiter_1.WaiterState.TIMEOUT };
        }
        await (0, sleep_1.sleep)(delay);
        const { state: state2 } = await acceptorChecks(client, input);
        if (state2 !== waiter_1.WaiterState.RETRY) {
          return { state: state2 };
        }
        currentAttempt += 1;
      }
    };
    exports.runPolling = runPolling;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js
var require_validate2 = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateWaiterOptions = void 0;
    var validateWaiterOptions = (options) => {
      if (options.maxWaitTime < 1) {
        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
      } else if (options.minDelay < 1) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
      } else if (options.maxDelay < 1) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
      } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      } else if (options.maxDelay < options.minDelay) {
        throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      }
    };
    exports.validateWaiterOptions = validateWaiterOptions;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js
var require_utils = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_sleep(), exports);
    tslib_1.__exportStar(require_validate2(), exports);
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js
var require_createWaiter = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createWaiter = void 0;
    var poller_1 = require_poller();
    var utils_1 = require_utils();
    var waiter_1 = require_waiter();
    var abortTimeout = async (abortSignal) => {
      return new Promise((resolve) => {
        abortSignal.onabort = () => resolve({ state: waiter_1.WaiterState.ABORTED });
      });
    };
    var createWaiter = async (options, input, acceptorChecks) => {
      const params = {
        ...waiter_1.waiterServiceDefaults,
        ...options
      };
      (0, utils_1.validateWaiterOptions)(params);
      const exitConditions = [(0, poller_1.runPolling)(params, input, acceptorChecks)];
      if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
      }
      if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
      }
      return Promise.race(exitConditions);
    };
    exports.createWaiter = createWaiter;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/index.js
var require_dist_cjs45 = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_createWaiter(), exports);
    tslib_1.__exportStar(require_waiter(), exports);
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/waiters/waitForCommandExecuted.js
var require_waitForCommandExecuted = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/waiters/waitForCommandExecuted.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilCommandExecuted = exports.waitForCommandExecuted = void 0;
    var util_waiter_1 = require_dist_cjs45();
    var GetCommandInvocationCommand_1 = require_GetCommandInvocationCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetCommandInvocationCommand_1.GetCommandInvocationCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "Pending") {
            return { state: util_waiter_1.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "InProgress") {
            return { state: util_waiter_1.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "Delayed") {
            return { state: util_waiter_1.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "Success") {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "Cancelled") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "TimedOut") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "Failed") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "Cancelling") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "InvocationDoesNotExist") {
          return { state: util_waiter_1.WaiterState.RETRY, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForCommandExecuted = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForCommandExecuted = waitForCommandExecuted;
    var waitUntilCommandExecuted = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilCommandExecuted = waitUntilCommandExecuted;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/waiters/index.js
var require_waiters = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/waiters/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_waitForCommandExecuted(), exports);
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/index.js
var require_dist_cjs46 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSMServiceException = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_SSM(), exports);
    tslib_1.__exportStar(require_SSMClient(), exports);
    tslib_1.__exportStar(require_commands4(), exports);
    tslib_1.__exportStar(require_models4(), exports);
    tslib_1.__exportStar(require_pagination3(), exports);
    tslib_1.__exportStar(require_waiters(), exports);
    var SSMServiceException_1 = require_SSMServiceException();
    Object.defineProperty(exports, "SSMServiceException", { enumerable: true, get: function() {
      return SSMServiceException_1.SSMServiceException;
    } });
  }
});

// src/lambda/secure-string-parameter-handler.lambda.ts
var secure_string_parameter_handler_lambda_exports = {};
__export(secure_string_parameter_handler_lambda_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(secure_string_parameter_handler_lambda_exports);
var import_client_kms = __toESM(require_dist_cjs44());
var import_client_ssm = __toESM(require_dist_cjs46());
var kms = new import_client_kms.KMSClient({ region: process.env.AWS_REGION });
var ssm = new import_client_ssm.SSMClient({ region: process.env.AWS_REGION });
function handler(event) {
  console.debug(JSON.stringify(event));
  switch (event.RequestType) {
    case "Create":
      return onCreateAndUpdate(event);
    case "Update":
      return onCreateAndUpdate(event);
    case "Delete":
      return onDelete(event);
    default:
      throw new Error(`Unknown RequestType: ${event.RequestType}`);
  }
}
async function onCreateAndUpdate(event) {
  const { parameterName, stringValue, allowedPattern, description, tier, encryptionKey, valueType } = event.ResourceProperties;
  const decryptedValue = valueType === "encrypted" ? await decrypt(stringValue, encryptionKey) : stringValue;
  const params = {
    Name: parameterName,
    Value: decryptedValue,
    Overwrite: true,
    Type: "SecureString",
    AllowedPattern: allowedPattern,
    Description: description,
    Tier: tier,
    KeyId: encryptionKey
  };
  await ssm.send(new import_client_ssm.PutParameterCommand(params));
  return {
    PhysicalResourceId: parameterName
  };
}
async function onDelete(event) {
  const { parameterName } = event.ResourceProperties;
  const params = {
    Name: parameterName
  };
  await ssm.send(new import_client_ssm.DeleteParameterCommand(params));
  return {
    PhysicalResourceId: parameterName
  };
}
async function decrypt(value, key) {
  const params = {
    CiphertextBlob: Buffer.from(value, "base64"),
    KeyId: key
  };
  const { Plaintext } = await kms.send(new import_client_kms.DecryptCommand(params));
  if (Plaintext === void 0)
    throw new Error("Unable to decrypt");
  return Buffer.from(Plaintext).toString("utf-8");
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
//# sourceMappingURL=index.js.map
